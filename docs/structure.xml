<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="Error.php" hash="7297796e78160bfeba5fcacc9d650da1" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="4" package="Default">
      <extends>\Exception</extends>
      <name>Error</name>
      <full_name>\PHPSandbox\Error</full_name>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Error.php</error>
      <error line="4" code="50000">No DocBlock was found for \PHPSandbox\Error</error>
    </parse_markers>
  </file>
  <file path="PHPSandbox.php" hash="8c324715d274d6df80eda71e467d439d" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="15" package="Default">
      <extends/>
      <name>PHPSandbox</name>
      <full_name>\PHPSandbox\PHPSandbox</full_name>
      <docblock line="4">
        <description>PHPSandbox class for PHP Sandboxes.</description>
        <long-description>&lt;p&gt;This class encapsulates the entire functionality of a PHPSandbox so that an end user
only has to create a PHPSandbox instance, configure its options, and run their code&lt;/p&gt;</long-description>
        <tag line="4" name="namespace" description="PHPSandbox"/>
        <tag line="4" name="author" description="Elijah Horton &lt;fieryprophet@yahoo.com&gt;"/>
        <tag line="4" name="version" description="1.0"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="19" namespace="PHPSandbox" package="Default">
        <name>$function_prefix</name>
        <default>'__PHPSandbox_'</default>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
          <tag line="16" name="var" description="The prefix given to the obfuscated sandbox variable passed to the generated code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="23" namespace="PHPSandbox" package="Default">
        <name>$superglobals</name>
        <default>array('_GET', '_POST', '_COOKIE', '_FILES', '_ENV', '_REQUEST', '_SERVER', '_SESSION', 'GLOBALS')</default>
        <docblock line="20">
          <description></description>
          <long-description></long-description>
          <tag line="20" name="var" description="A static array of superglobal names used for redefining superglobal values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="37" namespace="PHPSandbox" package="Default">
        <name>$magic_constants</name>
        <default>array('__LINE__', '__FILE__', '__DIR__', '__FUNCTION__', '__CLASS__', '__TRAIT__', '__METHOD__', '__NAMESPACE__')</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag line="34" name="var" description="A static array of magic constant names used for redefining magic constant values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="50" namespace="PHPSandbox" package="Default">
        <name>$defined_funcs</name>
        <default>array('get_defined_functions', 'get_defined_vars', 'get_defined_constants', 'get_declared_classes', 'get_declared_interfaces', 'get_declared_traits')</default>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag line="47" name="var" description="A static array of defined_* and declared_* functions names used for redefining defined_* and declared_* values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" namespace="PHPSandbox" package="Default">
        <name>$name</name>
        <default>''</default>
        <docblock line="58">
          <description></description>
          <long-description></long-description>
          <tag line="58" name="var" description="The randomly generated name of the PHPSandbox variable passed to the generated closure" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" namespace="PHPSandbox" package="Default">
        <name>$definitions</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array())</default>
      </property>
      <property final="false" static="false" visibility="protected" line="73" namespace="PHPSandbox" package="Default">
        <name>$whitelist</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'globals' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array(), 'classes' =&gt; array(), 'interfaces' =&gt; array(), 'traits' =&gt; array(), 'keywords' =&gt; array(), 'operators' =&gt; array(), 'primitives' =&gt; array(), 'types' =&gt; array())</default>
      </property>
      <property final="false" static="false" visibility="protected" line="91" namespace="PHPSandbox" package="Default">
        <name>$blacklist</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'globals' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array(), 'classes' =&gt; array(), 'interfaces' =&gt; array(), 'traits' =&gt; array(), 'keywords' =&gt; array('declare' =&gt; true, 'include' =&gt; true, 'eval' =&gt; true, 'exit' =&gt; true, 'halt' =&gt; true), 'operators' =&gt; array(), 'primitives' =&gt; array(), 'types' =&gt; array())</default>
      </property>
      <property final="false" static="false" visibility="public" line="119" namespace="PHPSandbox" package="Default">
        <name>$error_level</name>
        <default>null</default>
        <docblock line="115">
          <description></description>
          <long-description></long-description>
          <tag line="115" name="var" description="The error_reporting level to set the PHPSandbox scope to when executing the generated closure, if set to null it will use parent scope error level." type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="115" name="default" description="null"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="124" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_trusted_code</name>
        <default>true</default>
        <docblock line="120">
          <description></description>
          <long-description></long-description>
          <tag line="120" name="var" description="Should PHPSandbox automagically whitelist prepended and appended code?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="120" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="129" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_functions</name>
        <default>true</default>
        <docblock line="125">
          <description></description>
          <long-description></long-description>
          <tag line="125" name="var" description="Should PHPSandbox automagically whitelist functions created in sandboxed code if $allow_functions is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="125" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="134" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_constants</name>
        <default>true</default>
        <docblock line="130">
          <description></description>
          <long-description></long-description>
          <tag line="130" name="var" description="Should PHPSandbox automagically whitelist constants created in sandboxed code if $allow_constants is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="130" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="139" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_globals</name>
        <default>true</default>
        <docblock line="135">
          <description></description>
          <long-description></long-description>
          <tag line="135" name="var" description="Should PHPSandbox automagically whitelist global variables created in sandboxed code if $allow_globals is true? (Used to whitelist them in the variables list)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="135" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="144" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_classes</name>
        <default>true</default>
        <docblock line="140">
          <description></description>
          <long-description></long-description>
          <tag line="140" name="var" description="Should PHPSandbox automagically whitelist classes created in sandboxed code if $allow_classes is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="140" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="149" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_interfaces</name>
        <default>true</default>
        <docblock line="145">
          <description></description>
          <long-description></long-description>
          <tag line="145" name="var" description="Should PHPSandbox automagically whitelist interfaces created in sandboxed code if $allow_interfaces is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="145" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="154" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_traits</name>
        <default>true</default>
        <docblock line="150">
          <description></description>
          <long-description></long-description>
          <tag line="150" name="var" description="Should PHPSandbox automagically whitelist traits created in sandboxed code if $allow_traits is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="150" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="159" namespace="PHPSandbox" package="Default">
        <name>$auto_define_vars</name>
        <default>true</default>
        <docblock line="155">
          <description></description>
          <long-description></long-description>
          <tag line="155" name="var" description="Should PHPSandbox automagically define variables passed to prepended, appended and prepared code closures?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="155" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="164" namespace="PHPSandbox" package="Default">
        <name>$overwrite_defined_funcs</name>
        <default>true</default>
        <docblock line="160">
          <description></description>
          <long-description></long-description>
          <tag line="160" name="var" description="Should PHPSandbox overwrite get_defined_functions, get_defined_vars, get_defined_constants, get_declared_classes, get_declared_interfaces and get_declared_traits?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="160" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="169" namespace="PHPSandbox" package="Default">
        <name>$overwrite_superglobals</name>
        <default>true</default>
        <docblock line="165">
          <description></description>
          <long-description></long-description>
          <tag line="165" name="var" description="Should PHPSandbox overwrite $_GET, $_POST, $_COOKIE, $_FILES, $_ENV, $_REQUEST, $_SERVER, $_SESSION and $GLOBALS superglobals? If so, unless alternate superglobal values have been defined they will return as empty arrays." type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="165" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="174" namespace="PHPSandbox" package="Default">
        <name>$allow_functions</name>
        <default>false</default>
        <docblock line="170">
          <description></description>
          <long-description></long-description>
          <tag line="170" name="var" description="Should PHPSandbox allow sandboxed code to declare functions?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="170" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="179" namespace="PHPSandbox" package="Default">
        <name>$allow_closures</name>
        <default>false</default>
        <docblock line="175">
          <description></description>
          <long-description></long-description>
          <tag line="175" name="var" description="Should PHPSandbox allow sandboxed code to declare closures?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="175" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="184" namespace="PHPSandbox" package="Default">
        <name>$allow_variables</name>
        <default>true</default>
        <docblock line="180">
          <description></description>
          <long-description></long-description>
          <tag line="180" name="var" description="Should PHPSandbox allow sandboxed code to create variables?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="180" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="189" namespace="PHPSandbox" package="Default">
        <name>$allow_static_variables</name>
        <default>true</default>
        <docblock line="185">
          <description></description>
          <long-description></long-description>
          <tag line="185" name="var" description="Should PHPSandbox allow sandboxed code to create static variables?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="185" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="194" namespace="PHPSandbox" package="Default">
        <name>$allow_objects</name>
        <default>true</default>
        <docblock line="190">
          <description></description>
          <long-description></long-description>
          <tag line="190" name="var" description="Should PHPSandbox allow sandboxed code to create objects of allow classes (e.g. new keyword)?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="190" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="199" namespace="PHPSandbox" package="Default">
        <name>$allow_constants</name>
        <default>false</default>
        <docblock line="195">
          <description></description>
          <long-description></long-description>
          <tag line="195" name="var" description="Should PHPSandbox allow sandboxed code to define constants?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="195" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="204" namespace="PHPSandbox" package="Default">
        <name>$allow_globals</name>
        <default>false</default>
        <docblock line="200">
          <description></description>
          <long-description></long-description>
          <tag line="200" name="var" description="Should PHPSandbox allow sandboxed code to use global keyword to access variables in the global scope?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="200" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="209" namespace="PHPSandbox" package="Default">
        <name>$allow_namespaces</name>
        <default>false</default>
        <docblock line="205">
          <description></description>
          <long-description></long-description>
          <tag line="205" name="var" description="Should PHPSandbox allow sandboxed code to declare namespaces (utilizing the define_namespace function?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="205" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="214" namespace="PHPSandbox" package="Default">
        <name>$allow_aliases</name>
        <default>false</default>
        <docblock line="210">
          <description></description>
          <long-description></long-description>
          <tag line="210" name="var" description="Should PHPSandbox allow sandboxed code to use namespaces and declare namespace aliases (utilizing the define_alias function?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="210" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="219" namespace="PHPSandbox" package="Default">
        <name>$allow_classes</name>
        <default>false</default>
        <docblock line="215">
          <description></description>
          <long-description></long-description>
          <tag line="215" name="var" description="Should PHPSandbox allow sandboxed code to declare classes?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="215" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="224" namespace="PHPSandbox" package="Default">
        <name>$allow_interfaces</name>
        <default>false</default>
        <docblock line="220">
          <description></description>
          <long-description></long-description>
          <tag line="220" name="var" description="Should PHPSandbox allow sandboxed code to declare interfaces?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="220" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="229" namespace="PHPSandbox" package="Default">
        <name>$allow_traits</name>
        <default>false</default>
        <docblock line="225">
          <description></description>
          <long-description></long-description>
          <tag line="225" name="var" description="Should PHPSandbox allow sandboxed code to declare traits?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="225" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="234" namespace="PHPSandbox" package="Default">
        <name>$allow_escaping</name>
        <default>false</default>
        <docblock line="230">
          <description></description>
          <long-description></long-description>
          <tag line="230" name="var" description="Should PHPSandbox allow sandboxed code to escape to HTML?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="230" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="239" namespace="PHPSandbox" package="Default">
        <name>$allow_casting</name>
        <default>false</default>
        <docblock line="235">
          <description></description>
          <long-description></long-description>
          <tag line="235" name="var" description="Should PHPSandbox allow sandboxed code to cast types? (This will still be subject to allowed classes)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="235" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="244" namespace="PHPSandbox" package="Default">
        <name>$allow_error_suppressing</name>
        <default>false</default>
        <docblock line="240">
          <description></description>
          <long-description></long-description>
          <tag line="240" name="var" description="Should PHPSandbox allow sandboxed code to suppress errors (e.g. the @ operator?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="240" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="249" namespace="PHPSandbox" package="Default">
        <name>$allow_references</name>
        <default>true</default>
        <docblock line="245">
          <description></description>
          <long-description></long-description>
          <tag line="245" name="var" description="Should PHPSandbox allow sandboxed code to assign references?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="245" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="254" namespace="PHPSandbox" package="Default">
        <name>$allow_backticks</name>
        <default>false</default>
        <docblock line="250">
          <description></description>
          <long-description></long-description>
          <tag line="250" name="var" description="Should PHPSandbox allow sandboxed code to use backtick execution? (e.g. $var = \`ping google.com\`; This will also be disabled if shell_exec is not whitelisted or if it is blacklisted, and will be converted to a defined shell_exec function call if one is defined)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="250" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="259" namespace="PHPSandbox" package="Default">
        <name>$allow_halting</name>
        <default>false</default>
        <docblock line="255">
          <description></description>
          <long-description></long-description>
          <tag line="255" name="var" description="Should PHPSandbox allow sandboxed code to halt the PHP compiler?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="255" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="264" namespace="PHPSandbox" package="Default">
        <name>$prepended_code</name>
        <default>''</default>
        <docblock line="261">
          <description></description>
          <long-description></long-description>
          <tag line="261" name="var" description="String of prepended code, will be automagically whitelisted for functions, variables, globals, constants, classes, interfaces and traits if $auto_whitelist_trusted_code is true" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="268" namespace="PHPSandbox" package="Default">
        <name>$appended_code</name>
        <default>''</default>
        <docblock line="265">
          <description></description>
          <long-description></long-description>
          <tag line="265" name="var" description="String of appended code, will be automagically whitelisted for functions, variables, globals, constants, classes, interfaces and traits if $auto_whitelist_trusted_code is true" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="273" namespace="PHPSandbox" package="Default">
        <name>$preparsed_code</name>
        <default>''</default>
        <docblock line="270">
          <description></description>
          <long-description></long-description>
          <tag line="270" name="var" description="String of preparsed code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="277" namespace="PHPSandbox" package="Default">
        <name>$parsed_ast</name>
        <default>array()</default>
        <docblock line="274">
          <description></description>
          <long-description></long-description>
          <tag line="274" name="var" description="Array of parsed code broken down into AST tokens, for debugging and serialization purposes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="281" namespace="PHPSandbox" package="Default">
        <name>$prepared_code</name>
        <default>''</default>
        <docblock line="278">
          <description></description>
          <long-description></long-description>
          <tag line="278" name="var" description="String of prepared code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="285" namespace="PHPSandbox" package="Default">
        <name>$prepared_ast</name>
        <default>array()</default>
        <docblock line="282">
          <description></description>
          <long-description></long-description>
          <tag line="282" name="var" description="Array of prepared code broken down into AST tokens, for debugging and serialization purposes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="289" namespace="PHPSandbox" package="Default">
        <name>$generated_code</name>
        <default>''</default>
        <docblock line="286">
          <description></description>
          <long-description></long-description>
          <tag line="286" name="var" description="String of generated code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="293" namespace="PHPSandbox" package="Default">
        <name>$generated_closure</name>
        <default>null</default>
        <docblock line="290">
          <description></description>
          <long-description></long-description>
          <tag line="290" name="var" description="Closure generated by PHPSandbox execution, stored for future executions without the need to reparse and validate the code" type="\Closure|null">
            <type by_reference="false">\Closure</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="311" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="294">
          <description>PHPSandbox class constructor</description>
          <long-description></long-description>
          <tag line="294" name="example" description="$sandbox = new PHPSandbox\PHPSandbox;&#13;&#10;You can pass optional arrays of predefined functions, variables, etc. to the sandbox through the constructor"/>
          <tag line="294" name="param" description="Optional array of options to set for the sandbox" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="Optional array of functions to define for the sandbox" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="Optional array of variables to define for the sandbox" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="Optional array of constants to define for the sandbox" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="Optional array of namespaces to define for the sandbox" type="array" variable="$namespaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="Optional array of aliases to define for the sandbox" type="array" variable="$aliases">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="Optional array of globals to define for the sandbox" type="array" variable="$globals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="Optional array of superglobals to define for the sandbox" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="param" description="Optional array of magic constants to define for the sandbox" type="array" variable="$magic_constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="294" name="return" description="The returned PHPSandbox variable" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="311">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="312">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="313">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="314">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="315">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="316">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="317">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="318">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPSandbox" line="348" package="Default">
        <name>create</name>
        <full_name>create</full_name>
        <docblock line="330">
          <description>PHPSandbox static factory method</description>
          <long-description>&lt;p&gt;You can pass optional arrays of predefined functions, variables, etc. to the sandbox through the constructor&lt;/p&gt;</long-description>
          <tag line="330" name="example" description="$sandbox = PHPSandbox\PHPSandbox::create();"/>
          <tag line="330" name="param" description="Optional array of options to set for the sandbox" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="param" description="Optional array of functions to define for the sandbox" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="param" description="Optional array of variables to define for the sandbox" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="param" description="Optional array of constants to define for the sandbox" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="param" description="Optional array of namespaces to define for the sandbox" type="array" variable="$namespaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="param" description="Optional array of aliases to define for the sandbox" type="array" variable="$aliases">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="param" description="Optional array of globals to define for the sandbox" type="array" variable="$globals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="param" description="Optional array of superglobals to define for the sandbox" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="param" description="Optional array of magic constants to define for the sandbox" type="array" variable="$magic_constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="330" name="return" description="The returned PHPSandbox variable" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
        <argument line="348">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="349">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="350">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="351">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="352">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="353">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="354">
          <name>$globals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="355">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="356">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="369" package="Default">
        <name>__invoke</name>
        <full_name>__invoke</full_name>
        <docblock line="359">
          <description>PHPSandbox invoke magic method</description>
          <long-description>&lt;p&gt;Besides the code or closure to be executed, you can also pass additional arguments that will overwrite the default values of their respective arguments defined in the code&lt;/p&gt;</long-description>
          <tag line="359" name="example" description="$sandbox = new PHPSandbox\PHPSandbox; $sandbox(function(){ echo 'Hello world!'; });"/>
          <tag line="359" name="param" description="The closure, callable or string of code to execute" type="\Closure|callable|string" variable="$code">
            <type by_reference="false">\Closure</type>
            <type by_reference="false">callable</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="359" name="return" description="The output of the executed sandboxed code" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="369">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="375" package="Default">
        <name>get_name</name>
        <full_name>get_name</full_name>
        <docblock line="372">
          <description>Get name of PHPSandbox variable</description>
          <long-description></long-description>
          <tag line="372" name="return" description="The name of the PHPSandbox variable" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="393" package="Default">
        <name>set_option</name>
        <full_name>set_option</full_name>
        <docblock line="378">
          <description>Set PHPSandbox option</description>
          <long-description>&lt;p&gt;You can pass an $option name to set to $value, an array of $option names to set to $value, or an associative array of $option names and their values to set.&lt;/p&gt;</long-description>
          <tag line="378" name="example" description="$sandbox-&gt;set_option(array('allow_functions' =&gt; true));"/>
          <tag line="378" name="example" description="$sandbox-&gt;set_option(array('allow_functions', 'allow_classes'), true);"/>
          <tag line="378" name="example" description="$sandbox-&gt;set_option('allow_functions', true);"/>
          <tag line="378" name="param" description="String or array of strings or associative array of keys of option names to set $value to" type="string|array" variable="$option">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="378" name="param" description="Boolean, integer or null $value to set $option to (optional)" type="bool|int|null" variable="$value">
            <type by_reference="false">bool</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="378" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="393">
          <name>$option</name>
          <default></default>
          <type/>
        </argument>
        <argument line="393">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="502" package="Default">
        <name>set_options</name>
        <full_name>set_options</full_name>
        <docblock line="489">
          <description>Set PHPSandbox options by array</description>
          <long-description>&lt;p&gt;You can pass an array of option names to set to $value, or an associative array of option names and their values to set.&lt;/p&gt;</long-description>
          <tag line="489" name="example" description="$sandbox-&gt;set_option(array('allow_functions' =&gt; true));"/>
          <tag line="489" name="example" description="$sandbox-&gt;set_option(array('allow_functions', 'allow_classes'), true);"/>
          <tag line="489" name="param" description="Array of strings or associative array of keys of option names to set $value to" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="489" name="param" description="Boolean, integer or null $value to set $option to (optional)" type="bool|int|null" variable="$value">
            <type by_reference="false">bool</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="489" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="502">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="502">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="518" package="Default">
        <name>get_option</name>
        <full_name>get_option</full_name>
        <docblock line="508">
          <description>Get PHPSandbox option</description>
          <long-description>&lt;p&gt;You pass a string $option name to get its associated value&lt;/p&gt;</long-description>
          <tag line="508" name="example" description="$sandbox-&gt;get_option('allow_functions');"/>
          <tag line="508" name="param" description="String of $option name to get" type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="508" name="return" description="Returns the value of the requested option" type="boolean|int|null">
            <type by_reference="false">boolean</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="518">
          <name>$option</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="614" package="Default">
        <name>get_prepended_code</name>
        <full_name>get_prepended_code</full_name>
        <docblock line="611">
          <description>Get PHPSandbox prepended code</description>
          <long-description></long-description>
          <tag line="611" name="return" description="Returns a string of the prepended code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="620" package="Default">
        <name>get_appended_code</name>
        <full_name>get_appended_code</full_name>
        <docblock line="617">
          <description>Get PHPSandbox appended code</description>
          <long-description></long-description>
          <tag line="617" name="return" description="Returns a string of the appended code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="626" package="Default">
        <name>get_preparsed_code</name>
        <full_name>get_preparsed_code</full_name>
        <docblock line="623">
          <description>Get PHPSandbox preparsed code</description>
          <long-description></long-description>
          <tag line="623" name="return" description="Returns a string of the preparsed code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="632" package="Default">
        <name>get_parsed_ast</name>
        <full_name>get_parsed_ast</full_name>
        <docblock line="629">
          <description>Get PHPSandbox parsed AST array</description>
          <long-description></long-description>
          <tag line="629" name="return" description="Returns an array of the parsed AST code" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="638" package="Default">
        <name>get_prepared_code</name>
        <full_name>get_prepared_code</full_name>
        <docblock line="635">
          <description>Get PHPSandbox prepared code</description>
          <long-description></long-description>
          <tag line="635" name="return" description="Returns a string of the prepared code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="644" package="Default">
        <name>get_prepared_ast</name>
        <full_name>get_prepared_ast</full_name>
        <docblock line="641">
          <description>Get PHPSandbox parsed AST array</description>
          <long-description></long-description>
          <tag line="641" name="return" description="Returns an array of the parsed AST code" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="650" package="Default">
        <name>get_generated_code</name>
        <full_name>get_generated_code</full_name>
        <docblock line="647">
          <description>Get PHPSandbox generated code</description>
          <long-description></long-description>
          <tag line="647" name="return" description="Returns a string of the generated code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="656" package="Default">
        <name>get_generated_closure</name>
        <full_name>get_generated_closure</full_name>
        <docblock line="653">
          <description>Get PHPSandbox generated closure</description>
          <long-description></long-description>
          <tag line="653" name="return" description="Returns the generated closure" type="\Closure">
            <type by_reference="false">\Closure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="663" package="Default">
        <name>get_closure</name>
        <full_name>get_closure</full_name>
        <docblock line="659">
          <description>Get PHPSandbox generated closure</description>
          <long-description></long-description>
          <tag line="659" name="alias" description="get_generated_closure()"/>
          <tag line="659" name="return" description="Returns the generated closure" type="\Closure">
            <type by_reference="false">\Closure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="672" package="Default">
        <name>_get_defined_functions</name>
        <full_name>_get_defined_functions</full_name>
        <docblock line="666">
          <description>Get PHPSandbox redefined functions in place of get_defined_functions().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="666" name="param" description="Array result from get_defined_functions() is passed here" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="666" name="return" description="Returns the redefined functions array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="672">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="705" package="Default">
        <name>_get_defined_vars</name>
        <full_name>_get_defined_vars</full_name>
        <docblock line="699">
          <description>Get PHPSandbox redefined variables in place of get_defined_vars().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="699" name="param" description="Array result from get_defined_vars() is passed here" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="699" name="return" description="Returns the redefined variables array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="705">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="717" package="Default">
        <name>_get_superglobal</name>
        <full_name>_get_superglobal</full_name>
        <docblock line="711">
          <description>Get PHPSandbox redefined superglobal.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="711" name="param" description="Requested superglobal name (e.g. _GET, _POST, etc.)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="711" name="return" description="Returns the redefined superglobal" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="717">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="757" package="Default">
        <name>_get_magic_const</name>
        <full_name>_get_magic_const</full_name>
        <docblock line="751">
          <description>Get PHPSandbox redefined magic constant.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="751" name="param" description="Requested magic constant name (e.g. __FILE__, __LINE__, etc.)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="751" name="return" description="Returns the redefined magic constant" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="757">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="770" package="Default">
        <name>_get_defined_constants</name>
        <full_name>_get_defined_constants</full_name>
        <docblock line="764">
          <description>Get PHPSandbox redefined constants in place of get_defined_constants().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="764" name="param" description="Array result from get_defined_constants() is passed here" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="764" name="return" description="Returns the redefined constants" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="770">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="801" package="Default">
        <name>_get_declared_classes</name>
        <full_name>_get_declared_classes</full_name>
        <docblock line="795">
          <description>Get PHPSandbox redefined classes in place of get_declared_classes().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="795" name="param" description="Array result from get_declared_classes() is passed here" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="795" name="return" description="Returns the redefined classes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="801">
          <name>$classes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="827" package="Default">
        <name>_get_declared_interfaces</name>
        <full_name>_get_declared_interfaces</full_name>
        <docblock line="821">
          <description>Get PHPSandbox redefined interfaces in place of get_declared_interfaces().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="821" name="param" description="Array result from get_declared_interfaces() is passed here" type="array" variable="$interfaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="821" name="return" description="Returns the redefined interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="827">
          <name>$interfaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="853" package="Default">
        <name>_get_declared_traits</name>
        <full_name>_get_declared_traits</full_name>
        <docblock line="847">
          <description>Get PHPSandbox redefined traits in place of get_declared_traits().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="847" name="param" description="Array result from get_declared_traits() is passed here" type="array" variable="$traits">
            <type by_reference="false">array</type>
          </tag>
          <tag line="847" name="return" description="Returns the redefined traits" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="853">
          <name>$traits</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="879" package="Default">
        <name>call_func</name>
        <full_name>call_func</full_name>
        <docblock line="873">
          <description>Get PHPSandbox redefined function.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="873" name="throws" description="Will throw exception if invalid function requested" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="873" name="return" description="Returns the redefined function result" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="907" package="Default">
        <name>define</name>
        <full_name>define</full_name>
        <docblock line="893">
          <description>Define PHPSandbox definitions, such as functions, constants, classes, etc.</description>
          <long-description>&lt;p&gt;You can pass an associative array of definitions types and an associative array of their corresponding values, or pass a string of the $type, $name and $value&lt;/p&gt;</long-description>
          <tag line="893" name="example" description="$sandbox-&gt;define(array('functions' =&gt; array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="893" name="example" description="$sandbox-&gt;define('functions', 'test', function(){ echo 'test'; });"/>
          <tag line="893" name="param" description="Associative array or string of definition type to define" type="array|string" variable="$type">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="893" name="param" description="Associative array or string of definition name to define" type="array|string|null" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="893" name="param" description="Value of definition to define" type="mixed|null" variable="$value">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="893" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="907">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="907">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="907">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="953" package="Default">
        <name>undefine</name>
        <full_name>undefine</full_name>
        <docblock line="940">
          <description>Undefine PHPSandbox definitions, such as functions, constants, classes, etc.</description>
          <long-description>&lt;p&gt;You can pass an associative array of definitions types and an array of key names to undefine, or pass a string of the $type and $name to undefine&lt;/p&gt;</long-description>
          <tag line="940" name="example" description="$sandbox-&gt;undefine(array('functions' =&gt; array('test'));"/>
          <tag line="940" name="example" description="$sandbox-&gt;undefine('functions', 'test');"/>
          <tag line="940" name="param" description="Associative array or string of definition type to undefine" type="array|string" variable="$type">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="940" name="param" description="Associative array or string of definition name to undefine" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="940" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="953">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="953">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1005" package="Default">
        <name>define_func</name>
        <full_name>define_func</full_name>
        <docblock line="990">
          <description>Define PHPSandbox function</description>
          <long-description>&lt;p&gt;You can pass an associative array of functions to define, or the function $name and $function closure or callable to define&lt;/p&gt;</long-description>
          <tag line="990" name="example" description="$sandbox-&gt;define_func(array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="990" name="example" description="$sandbox-&gt;define_func('test', function(){ echo 'test'; });"/>
          <tag line="990" name="param" description="Associative array or string of function $name to define" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="990" name="param" description="Callable to define $function to" type="callable" variable="$function">
            <type by_reference="false">callable</type>
          </tag>
          <tag line="990" name="throws" description="Throws exception if unnamed or uncallable $function is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="990" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1005">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1005">
          <name>$function</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1030" package="Default">
        <name>define_funcs</name>
        <full_name>define_funcs</full_name>
        <docblock line="1020">
          <description>Define PHPSandbox functions by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of functions to define&lt;/p&gt;</long-description>
          <tag line="1020" name="example" description="$sandbox-&gt;define_func(array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="1020" name="param" description="Associative array of $functions to define" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1020" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1030">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1042" package="Default">
        <name>has_defined_funcs</name>
        <full_name>has_defined_funcs</full_name>
        <docblock line="1036">
          <description>Query whether PHPSandbox instance has defined functions</description>
          <long-description></long-description>
          <tag line="1036" name="example" description="$sandbox-&gt;has_defined_funcs(); //returns number of defined functions, or zero if none defined"/>
          <tag line="1036" name="return" description="Returns the number of functions this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1053" package="Default">
        <name>is_defined_func</name>
        <full_name>is_defined_func</full_name>
        <docblock line="1045">
          <description>Check if PHPSandbox instance has $name function defined</description>
          <long-description></long-description>
          <tag line="1045" name="example" description="$sandbox-&gt;is_defined_func('test');"/>
          <tag line="1045" name="param" description="String of function $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1045" name="return" description="Returns true if PHPSandbox instance has defined function, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1053">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1067" package="Default">
        <name>undefine_func</name>
        <full_name>undefine_func</full_name>
        <docblock line="1057">
          <description>Undefine PHPSandbox function</description>
          <long-description></long-description>
          <tag line="1057" name="example" description="$sandbox-&gt;undefine_func(array('test', 'test2'));"/>
          <tag line="1057" name="example" description="$sandbox-&gt;undefine_func('test');"/>
          <tag line="1057" name="param" description="Associative array of function names or string of function name to undefine" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="1057" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1067">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1087" package="Default">
        <name>undefine_funcs</name>
        <full_name>undefine_funcs</full_name>
        <docblock line="1077">
          <description>Undefine PHPSandbox functions by array</description>
          <long-description></long-description>
          <tag line="1077" name="example" description="$sandbox-&gt;undefine_funcs(array('test', 'test2'));"/>
          <tag line="1077" name="example" description="$sandbox-&gt;undefine_funcs(); //WILL UNDEFINE ALL FUNCTIONS!"/>
          <tag line="1077" name="param" description="Associative array of function names to undefine. Passing an empty array or no argument will result in undefining all functions" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1077" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1087">
          <name>$functions</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1112" package="Default">
        <name>define_var</name>
        <full_name>define_var</full_name>
        <docblock line="1097">
          <description>Define PHPSandbox variable</description>
          <long-description>&lt;p&gt;You can pass an associative array of variables to define, or the variable $name and $value to define&lt;/p&gt;</long-description>
          <tag line="1097" name="example" description="$sandbox-&gt;define_var(array('test' =&gt; 1));"/>
          <tag line="1097" name="example" description="$sandbox-&gt;define_var('test', 1);"/>
          <tag line="1097" name="param" description="Associative array or string of variable $name to define" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="1097" name="param" description="Value to define variable to" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1097" name="throws" description="Throws exception if unnamed variable is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1097" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1112">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1112">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1132" package="Default">
        <name>define_vars</name>
        <full_name>define_vars</full_name>
        <docblock line="1122">
          <description>Define PHPSandbox variables by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of variables to define&lt;/p&gt;</long-description>
          <tag line="1122" name="example" description="$sandbox-&gt;define_var(array('test' =&gt; 1));"/>
          <tag line="1122" name="param" description="Associative array of $variables to define" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1122" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1132">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1144" package="Default">
        <name>has_defined_vars</name>
        <full_name>has_defined_vars</full_name>
        <docblock line="1138">
          <description>Query whether PHPSandbox instance has defined variables</description>
          <long-description></long-description>
          <tag line="1138" name="example" description="$sandbox-&gt;has_defined_vars(); //returns number of defined variables, or zero if none defined"/>
          <tag line="1138" name="return" description="Returns the number of variables this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1155" package="Default">
        <name>is_defined_var</name>
        <full_name>is_defined_var</full_name>
        <docblock line="1147">
          <description>Check if PHPSandbox instance has $name variable defined</description>
          <long-description></long-description>
          <tag line="1147" name="example" description="$sandbox-&gt;is_defined_var('test');"/>
          <tag line="1147" name="param" description="String of variable $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1147" name="return" description="Returns true if PHPSandbox instance has defined variable, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1155">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1168" package="Default">
        <name>undefine_var</name>
        <full_name>undefine_var</full_name>
        <docblock line="1158">
          <description>Undefine PHPSandbox variable</description>
          <long-description></long-description>
          <tag line="1158" name="example" description="$sandbox-&gt;undefine_var(array('test', 'test2'));"/>
          <tag line="1158" name="example" description="$sandbox-&gt;undefine_var('test');"/>
          <tag line="1158" name="param" description="Associative array of variable names or string of variable name to undefine" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="1158" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1168">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1187" package="Default">
        <name>undefine_vars</name>
        <full_name>undefine_vars</full_name>
        <docblock line="1177">
          <description>Undefine PHPSandbox variables by array</description>
          <long-description></long-description>
          <tag line="1177" name="example" description="$sandbox-&gt;undefine_vars(array('test', 'test2'));"/>
          <tag line="1177" name="example" description="$sandbox-&gt;undefine_vars(); //WILL UNDEFINE ALL VARIABLES!"/>
          <tag line="1177" name="param" description="Associative array of variable names to undefine. Passing an empty array or no argument will result in undefining all variables" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1177" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1187">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1212" package="Default">
        <name>define_superglobal</name>
        <full_name>define_superglobal</full_name>
        <docblock line="1197">
          <description>Define PHPSandbox superglobal</description>
          <long-description>&lt;p&gt;You can pass an associative array of superglobals to define, or the superglobal $name and $value to define&lt;/p&gt;</long-description>
          <tag line="1197" name="example" description="$sandbox-&gt;define_superglobal(array('_GET' =&gt; array('page' =&gt; 1)));"/>
          <tag line="1197" name="example" description="$sandbox-&gt;define_superglobal('_GET',  array('page' =&gt; 1));"/>
          <tag line="1197" name="param" description="Associative array or string of superglobal $name to define" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="1197" name="param" description="Value to define superglobal to" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1197" name="throws" description="Throws exception if unnamed superglobal is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1197" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1212">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1212">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1241" package="Default">
        <name>define_superglobals</name>
        <full_name>define_superglobals</full_name>
        <docblock line="1231">
          <description>Define PHPSandbox superglobals by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of superglobals to define&lt;/p&gt;</long-description>
          <tag line="1231" name="example" description="$sandbox-&gt;define_superglobal(array('_GET' =&gt; array('page' =&gt; 1)));"/>
          <tag line="1231" name="param" description="Associative array of $superglobals to define" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1231" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1241">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1257" package="Default">
        <name>has_defined_superglobals</name>
        <full_name>has_defined_superglobals</full_name>
        <docblock line="1247">
          <description>Query whether PHPSandbox instance has defined superglobals, or if superglobal $name has defined keys</description>
          <long-description></long-description>
          <tag line="1247" name="example" description="$sandbox-&gt;has_defined_superglobals(); //returns number of defined superglobals, or zero if none defined"/>
          <tag line="1247" name="example" description="$sandbox-&gt;has_defined_superglobals('_GET'); //returns number of defined superglobal _GET keys, or zero if none defined"/>
          <tag line="1247" name="param" description="String of superglobal $name to check for keys" type="string|null" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="1247" name="return" description="Returns the number of superglobals or superglobal keys this instance has defined, or false if invalid superglobal name specified" type="int|bool">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1257">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1272" package="Default">
        <name>is_defined_superglobal</name>
        <full_name>is_defined_superglobal</full_name>
        <docblock line="1261">
          <description>Check if PHPSandbox instance has $name superglobal defined, or if superglobal $name key is defined</description>
          <long-description></long-description>
          <tag line="1261" name="example" description="$sandbox-&gt;is_defined_superglobal('_GET');"/>
          <tag line="1261" name="example" description="$sandbox-&gt;is_defined_superglobal('_GET', 'page');"/>
          <tag line="1261" name="param" description="String of superglobal $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1261" name="param" description="String of key to to query in superglobal" type="string|null" variable="$key">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="1261" name="return" description="Returns true if PHPSandbox instance has defined superglobal, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1272">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1272">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1289" package="Default">
        <name>undefine_superglobal</name>
        <full_name>undefine_superglobal</full_name>
        <docblock line="1276">
          <description>Undefine PHPSandbox superglobal or superglobal key</description>
          <long-description></long-description>
          <tag line="1276" name="example" description="$sandbox-&gt;undefine_superglobal(array('_GET', '_POST'));"/>
          <tag line="1276" name="example" description="$sandbox-&gt;undefine_superglobal('_GET');"/>
          <tag line="1276" name="example" description="$sandbox-&gt;undefine_superglobal('_GET', 'page');"/>
          <tag line="1276" name="param" description="Associative array of superglobal names or string of superglobal name to undefine" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="1276" name="param" description="String of superglobal key to undefine" type="string|null" variable="$key">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="1276" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1289">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1289">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1313" package="Default">
        <name>undefine_superglobals</name>
        <full_name>undefine_superglobals</full_name>
        <docblock line="1303">
          <description>Undefine PHPSandbox superglobals by array</description>
          <long-description></long-description>
          <tag line="1303" name="example" description="$sandbox-&gt;undefine_superglobals(array('_GET', '_POST'));"/>
          <tag line="1303" name="example" description="$sandbox-&gt;undefine_superglobals(array('_GET' =&gt; 'page', '_POST' =&gt; 'page'));"/>
          <tag line="1303" name="param" description="Associative array of superglobal names and keys or array of superglobal names to undefine" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1303" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1313">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1325" package="Default">
        <name>define_const</name>
        <full_name>define_const</full_name>
        <argument line="1325">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1325">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1336" package="Default">
        <name>define_consts</name>
        <full_name>define_consts</full_name>
        <argument line="1336">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1343" package="Default">
        <name>has_defined_consts</name>
        <full_name>has_defined_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1347" package="Default">
        <name>is_defined_const</name>
        <full_name>is_defined_const</full_name>
        <argument line="1347">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1351" package="Default">
        <name>undefine_const</name>
        <full_name>undefine_const</full_name>
        <argument line="1351">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1361" package="Default">
        <name>undefine_consts</name>
        <full_name>undefine_consts</full_name>
        <argument line="1361">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1372" package="Default">
        <name>define_magic_const</name>
        <full_name>define_magic_const</full_name>
        <argument line="1372">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1372">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1384" package="Default">
        <name>define_magic_consts</name>
        <full_name>define_magic_consts</full_name>
        <argument line="1384">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1391" package="Default">
        <name>has_defined_magic_consts</name>
        <full_name>has_defined_magic_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1395" package="Default">
        <name>is_defined_magic_const</name>
        <full_name>is_defined_magic_const</full_name>
        <argument line="1395">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1400" package="Default">
        <name>undefine_magic_const</name>
        <full_name>undefine_magic_const</full_name>
        <argument line="1400">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1411" package="Default">
        <name>undefine_magic_consts</name>
        <full_name>undefine_magic_consts</full_name>
        <argument line="1411">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1422" package="Default">
        <name>define_namespace</name>
        <full_name>define_namespace</full_name>
        <argument line="1422">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1433" package="Default">
        <name>define_namespaces</name>
        <full_name>define_namespaces</full_name>
        <argument line="1433">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1440" package="Default">
        <name>has_defined_namespaces</name>
        <full_name>has_defined_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1444" package="Default">
        <name>is_defined_namespace</name>
        <full_name>is_defined_namespace</full_name>
        <argument line="1444">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1448" package="Default">
        <name>undefine_namespace</name>
        <full_name>undefine_namespace</full_name>
        <argument line="1448">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1458" package="Default">
        <name>undefine_namespaces</name>
        <full_name>undefine_namespaces</full_name>
        <argument line="1458">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1469" package="Default">
        <name>define_alias</name>
        <full_name>define_alias</full_name>
        <argument line="1469">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1469">
          <name>$alias</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1480" package="Default">
        <name>define_aliases</name>
        <full_name>define_aliases</full_name>
        <argument line="1480">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1487" package="Default">
        <name>has_defined_aliases</name>
        <full_name>has_defined_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1491" package="Default">
        <name>is_defined_alias</name>
        <full_name>is_defined_alias</full_name>
        <argument line="1491">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1495" package="Default">
        <name>undefine_alias</name>
        <full_name>undefine_alias</full_name>
        <argument line="1495">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1505" package="Default">
        <name>undefine_aliases</name>
        <full_name>undefine_aliases</full_name>
        <argument line="1505">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1516" package="Default">
        <name>define_use</name>
        <full_name>define_use</full_name>
        <argument line="1516">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1516">
          <name>$alias</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1520" package="Default">
        <name>define_uses</name>
        <full_name>define_uses</full_name>
        <argument line="1520">
          <name>$uses</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1524" package="Default">
        <name>has_defined_uses</name>
        <full_name>has_defined_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1528" package="Default">
        <name>is_defined_use</name>
        <full_name>is_defined_use</full_name>
        <argument line="1528">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1532" package="Default">
        <name>undefine_use</name>
        <full_name>undefine_use</full_name>
        <argument line="1532">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1536" package="Default">
        <name>undefine_uses</name>
        <full_name>undefine_uses</full_name>
        <argument line="1536">
          <name>$uses</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1540" package="Default">
        <name>normalize_func</name>
        <full_name>normalize_func</full_name>
        <argument line="1540">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1544" package="Default">
        <name>normalize_superglobal</name>
        <full_name>normalize_superglobal</full_name>
        <argument line="1544">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1548" package="Default">
        <name>normalize_magic_const</name>
        <full_name>normalize_magic_const</full_name>
        <argument line="1548">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1552" package="Default">
        <name>normalize_namespace</name>
        <full_name>normalize_namespace</full_name>
        <argument line="1552">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1556" package="Default">
        <name>normalize_alias</name>
        <full_name>normalize_alias</full_name>
        <argument line="1556">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1560" package="Default">
        <name>normalize_use</name>
        <full_name>normalize_use</full_name>
        <argument line="1560">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1564" package="Default">
        <name>normalize_class</name>
        <full_name>normalize_class</full_name>
        <argument line="1564">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1568" package="Default">
        <name>normalize_interface</name>
        <full_name>normalize_interface</full_name>
        <argument line="1568">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1572" package="Default">
        <name>normalize_trait</name>
        <full_name>normalize_trait</full_name>
        <argument line="1572">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1576" package="Default">
        <name>normalize_keyword</name>
        <full_name>normalize_keyword</full_name>
        <argument line="1576">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1607" package="Default">
        <name>normalize_primitive</name>
        <full_name>normalize_primitive</full_name>
        <argument line="1607">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1621" package="Default">
        <name>normalize_type</name>
        <full_name>normalize_type</full_name>
        <argument line="1621">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1625" package="Default">
        <name>whitelist</name>
        <full_name>whitelist</full_name>
        <argument line="1625">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1625">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1650" package="Default">
        <name>blacklist</name>
        <full_name>blacklist</full_name>
        <argument line="1650">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1650">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1675" package="Default">
        <name>dewhitelist</name>
        <full_name>dewhitelist</full_name>
        <argument line="1675">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1675">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1694" package="Default">
        <name>deblacklist</name>
        <full_name>deblacklist</full_name>
        <argument line="1694">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1694">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1713" package="Default">
        <name>has_whitelist</name>
        <full_name>has_whitelist</full_name>
        <argument line="1713">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1717" package="Default">
        <name>has_blacklist</name>
        <full_name>has_blacklist</full_name>
        <argument line="1717">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1721" package="Default">
        <name>is_whitelisted</name>
        <full_name>is_whitelisted</full_name>
        <argument line="1721">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1721">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1725" package="Default">
        <name>is_blacklisted</name>
        <full_name>is_blacklisted</full_name>
        <argument line="1725">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1725">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1729" package="Default">
        <name>has_whitelist_funcs</name>
        <full_name>has_whitelist_funcs</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1733" package="Default">
        <name>has_blacklist_funcs</name>
        <full_name>has_blacklist_funcs</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1737" package="Default">
        <name>is_whitelisted_func</name>
        <full_name>is_whitelisted_func</full_name>
        <argument line="1737">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1742" package="Default">
        <name>is_blacklisted_func</name>
        <full_name>is_blacklisted_func</full_name>
        <argument line="1742">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1747" package="Default">
        <name>has_whitelist_vars</name>
        <full_name>has_whitelist_vars</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1751" package="Default">
        <name>has_blacklist_vars</name>
        <full_name>has_blacklist_vars</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1755" package="Default">
        <name>is_whitelisted_var</name>
        <full_name>is_whitelisted_var</full_name>
        <argument line="1755">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1759" package="Default">
        <name>is_blacklisted_var</name>
        <full_name>is_blacklisted_var</full_name>
        <argument line="1759">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1763" package="Default">
        <name>has_whitelist_globals</name>
        <full_name>has_whitelist_globals</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1767" package="Default">
        <name>has_blacklist_globals</name>
        <full_name>has_blacklist_globals</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1771" package="Default">
        <name>is_whitelisted_global</name>
        <full_name>is_whitelisted_global</full_name>
        <argument line="1771">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1775" package="Default">
        <name>is_blacklisted_global</name>
        <full_name>is_blacklisted_global</full_name>
        <argument line="1775">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1779" package="Default">
        <name>has_whitelist_superglobals</name>
        <full_name>has_whitelist_superglobals</full_name>
        <argument line="1779">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1784" package="Default">
        <name>has_blacklist_superglobals</name>
        <full_name>has_blacklist_superglobals</full_name>
        <argument line="1784">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1789" package="Default">
        <name>is_whitelisted_superglobal</name>
        <full_name>is_whitelisted_superglobal</full_name>
        <argument line="1789">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1789">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1794" package="Default">
        <name>is_blacklisted_superglobal</name>
        <full_name>is_blacklisted_superglobal</full_name>
        <argument line="1794">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1794">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1799" package="Default">
        <name>has_whitelist_consts</name>
        <full_name>has_whitelist_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1803" package="Default">
        <name>has_blacklist_consts</name>
        <full_name>has_blacklist_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1807" package="Default">
        <name>is_whitelisted_const</name>
        <full_name>is_whitelisted_const</full_name>
        <argument line="1807">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1811" package="Default">
        <name>is_blacklisted_const</name>
        <full_name>is_blacklisted_const</full_name>
        <argument line="1811">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1815" package="Default">
        <name>has_whitelist_magic_consts</name>
        <full_name>has_whitelist_magic_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1819" package="Default">
        <name>has_blacklist_magic_consts</name>
        <full_name>has_blacklist_magic_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1823" package="Default">
        <name>is_whitelisted_magic_const</name>
        <full_name>is_whitelisted_magic_const</full_name>
        <argument line="1823">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1828" package="Default">
        <name>is_blacklisted_magic_const</name>
        <full_name>is_blacklisted_magic_const</full_name>
        <argument line="1828">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1833" package="Default">
        <name>has_whitelist_namespaces</name>
        <full_name>has_whitelist_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1837" package="Default">
        <name>has_blacklist_namespaces</name>
        <full_name>has_blacklist_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1841" package="Default">
        <name>is_whitelisted_namespace</name>
        <full_name>is_whitelisted_namespace</full_name>
        <argument line="1841">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1846" package="Default">
        <name>is_blacklisted_namespace</name>
        <full_name>is_blacklisted_namespace</full_name>
        <argument line="1846">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1851" package="Default">
        <name>has_whitelist_aliases</name>
        <full_name>has_whitelist_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1855" package="Default">
        <name>has_blacklist_aliases</name>
        <full_name>has_blacklist_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1859" package="Default">
        <name>is_whitelisted_alias</name>
        <full_name>is_whitelisted_alias</full_name>
        <argument line="1859">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1864" package="Default">
        <name>is_blacklisted_alias</name>
        <full_name>is_blacklisted_alias</full_name>
        <argument line="1864">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1869" package="Default">
        <name>has_whitelist_uses</name>
        <full_name>has_whitelist_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1873" package="Default">
        <name>has_blacklist_uses</name>
        <full_name>has_blacklist_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1877" package="Default">
        <name>is_whitelisted_use</name>
        <full_name>is_whitelisted_use</full_name>
        <argument line="1877">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1881" package="Default">
        <name>is_blacklisted_use</name>
        <full_name>is_blacklisted_use</full_name>
        <argument line="1881">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1885" package="Default">
        <name>has_whitelist_classes</name>
        <full_name>has_whitelist_classes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1889" package="Default">
        <name>has_blacklist_classes</name>
        <full_name>has_blacklist_classes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1893" package="Default">
        <name>is_whitelisted_class</name>
        <full_name>is_whitelisted_class</full_name>
        <argument line="1893">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1898" package="Default">
        <name>is_blacklisted_class</name>
        <full_name>is_blacklisted_class</full_name>
        <argument line="1898">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1903" package="Default">
        <name>has_whitelist_interfaces</name>
        <full_name>has_whitelist_interfaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1907" package="Default">
        <name>has_blacklist_interfaces</name>
        <full_name>has_blacklist_interfaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1911" package="Default">
        <name>is_whitelisted_interface</name>
        <full_name>is_whitelisted_interface</full_name>
        <argument line="1911">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1916" package="Default">
        <name>is_blacklisted_interface</name>
        <full_name>is_blacklisted_interface</full_name>
        <argument line="1916">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1921" package="Default">
        <name>has_whitelist_traits</name>
        <full_name>has_whitelist_traits</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1925" package="Default">
        <name>has_blacklist_traits</name>
        <full_name>has_blacklist_traits</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1929" package="Default">
        <name>is_whitelisted_trait</name>
        <full_name>is_whitelisted_trait</full_name>
        <argument line="1929">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1934" package="Default">
        <name>is_blacklisted_trait</name>
        <full_name>is_blacklisted_trait</full_name>
        <argument line="1934">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1939" package="Default">
        <name>has_whitelist_keywords</name>
        <full_name>has_whitelist_keywords</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1943" package="Default">
        <name>has_blacklist_keywords</name>
        <full_name>has_blacklist_keywords</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1947" package="Default">
        <name>is_whitelisted_keyword</name>
        <full_name>is_whitelisted_keyword</full_name>
        <argument line="1947">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1952" package="Default">
        <name>is_blacklisted_keyword</name>
        <full_name>is_blacklisted_keyword</full_name>
        <argument line="1952">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1957" package="Default">
        <name>has_whitelist_operators</name>
        <full_name>has_whitelist_operators</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1961" package="Default">
        <name>has_blacklist_operators</name>
        <full_name>has_blacklist_operators</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1965" package="Default">
        <name>is_whitelisted_operator</name>
        <full_name>is_whitelisted_operator</full_name>
        <argument line="1965">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1969" package="Default">
        <name>is_blacklisted_operator</name>
        <full_name>is_blacklisted_operator</full_name>
        <argument line="1969">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1973" package="Default">
        <name>has_whitelist_primitives</name>
        <full_name>has_whitelist_primitives</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1977" package="Default">
        <name>has_blacklist_primitives</name>
        <full_name>has_blacklist_primitives</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1981" package="Default">
        <name>is_whitelisted_primitive</name>
        <full_name>is_whitelisted_primitive</full_name>
        <argument line="1981">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1986" package="Default">
        <name>is_blacklisted_primitive</name>
        <full_name>is_blacklisted_primitive</full_name>
        <argument line="1986">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1991" package="Default">
        <name>has_whitelist_types</name>
        <full_name>has_whitelist_types</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1995" package="Default">
        <name>has_blacklist_types</name>
        <full_name>has_blacklist_types</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1999" package="Default">
        <name>is_whitelisted_type</name>
        <full_name>is_whitelisted_type</full_name>
        <argument line="1999">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2004" package="Default">
        <name>is_blacklisted_type</name>
        <full_name>is_blacklisted_type</full_name>
        <argument line="2004">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2009" package="Default">
        <name>whitelist_func</name>
        <full_name>whitelist_func</full_name>
        <argument line="2009">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2014" package="Default">
        <name>blacklist_func</name>
        <full_name>blacklist_func</full_name>
        <argument line="2014">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2019" package="Default">
        <name>dewhitelist_func</name>
        <full_name>dewhitelist_func</full_name>
        <argument line="2019">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2024" package="Default">
        <name>deblacklist_func</name>
        <full_name>deblacklist_func</full_name>
        <argument line="2024">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2029" package="Default">
        <name>whitelist_var</name>
        <full_name>whitelist_var</full_name>
        <argument line="2029">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2033" package="Default">
        <name>blacklist_var</name>
        <full_name>blacklist_var</full_name>
        <argument line="2033">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2037" package="Default">
        <name>dewhitelist_var</name>
        <full_name>dewhitelist_var</full_name>
        <argument line="2037">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2041" package="Default">
        <name>deblacklist_var</name>
        <full_name>deblacklist_var</full_name>
        <argument line="2041">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2045" package="Default">
        <name>whitelist_global</name>
        <full_name>whitelist_global</full_name>
        <argument line="2045">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2049" package="Default">
        <name>blacklist_global</name>
        <full_name>blacklist_global</full_name>
        <argument line="2049">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2053" package="Default">
        <name>dewhitelist_global</name>
        <full_name>dewhitelist_global</full_name>
        <argument line="2053">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2057" package="Default">
        <name>deblacklist_global</name>
        <full_name>deblacklist_global</full_name>
        <argument line="2057">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2061" package="Default">
        <name>whitelist_superglobal</name>
        <full_name>whitelist_superglobal</full_name>
        <argument line="2061">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2061">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2096" package="Default">
        <name>blacklist_superglobal</name>
        <full_name>blacklist_superglobal</full_name>
        <argument line="2096">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2096">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2131" package="Default">
        <name>dewhitelist_superglobal</name>
        <full_name>dewhitelist_superglobal</full_name>
        <argument line="2131">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2131">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2161" package="Default">
        <name>deblacklist_superglobal</name>
        <full_name>deblacklist_superglobal</full_name>
        <argument line="2161">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2161">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2191" package="Default">
        <name>whitelist_const</name>
        <full_name>whitelist_const</full_name>
        <argument line="2191">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2195" package="Default">
        <name>blacklist_const</name>
        <full_name>blacklist_const</full_name>
        <argument line="2195">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2199" package="Default">
        <name>dewhitelist_const</name>
        <full_name>dewhitelist_const</full_name>
        <argument line="2199">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2203" package="Default">
        <name>deblacklist_const</name>
        <full_name>deblacklist_const</full_name>
        <argument line="2203">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2207" package="Default">
        <name>whitelist_magic_const</name>
        <full_name>whitelist_magic_const</full_name>
        <argument line="2207">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2212" package="Default">
        <name>blacklist_magic_const</name>
        <full_name>blacklist_magic_const</full_name>
        <argument line="2212">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2217" package="Default">
        <name>dewhitelist_magic_const</name>
        <full_name>dewhitelist_magic_const</full_name>
        <argument line="2217">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2222" package="Default">
        <name>deblacklist_magic_const</name>
        <full_name>deblacklist_magic_const</full_name>
        <argument line="2222">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2227" package="Default">
        <name>whitelist_namespace</name>
        <full_name>whitelist_namespace</full_name>
        <argument line="2227">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2232" package="Default">
        <name>blacklist_namespace</name>
        <full_name>blacklist_namespace</full_name>
        <argument line="2232">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2237" package="Default">
        <name>dewhitelist_namespace</name>
        <full_name>dewhitelist_namespace</full_name>
        <argument line="2237">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2242" package="Default">
        <name>deblacklist_namespace</name>
        <full_name>deblacklist_namespace</full_name>
        <argument line="2242">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2247" package="Default">
        <name>whitelist_alias</name>
        <full_name>whitelist_alias</full_name>
        <argument line="2247">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2252" package="Default">
        <name>blacklist_alias</name>
        <full_name>blacklist_alias</full_name>
        <argument line="2252">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2257" package="Default">
        <name>dewhitelist_alias</name>
        <full_name>dewhitelist_alias</full_name>
        <argument line="2257">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2262" package="Default">
        <name>deblacklist_alias</name>
        <full_name>deblacklist_alias</full_name>
        <argument line="2262">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2267" package="Default">
        <name>whitelist_use</name>
        <full_name>whitelist_use</full_name>
        <argument line="2267">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2271" package="Default">
        <name>blacklist_use</name>
        <full_name>blacklist_use</full_name>
        <argument line="2271">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2275" package="Default">
        <name>dewhitelist_use</name>
        <full_name>dewhitelist_use</full_name>
        <argument line="2275">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2279" package="Default">
        <name>deblacklist_use</name>
        <full_name>deblacklist_use</full_name>
        <argument line="2279">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2283" package="Default">
        <name>whitelist_class</name>
        <full_name>whitelist_class</full_name>
        <argument line="2283">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2288" package="Default">
        <name>blacklist_class</name>
        <full_name>blacklist_class</full_name>
        <argument line="2288">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2293" package="Default">
        <name>dewhitelist_class</name>
        <full_name>dewhitelist_class</full_name>
        <argument line="2293">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2298" package="Default">
        <name>deblacklist_class</name>
        <full_name>deblacklist_class</full_name>
        <argument line="2298">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2303" package="Default">
        <name>whitelist_interface</name>
        <full_name>whitelist_interface</full_name>
        <argument line="2303">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2308" package="Default">
        <name>blacklist_interface</name>
        <full_name>blacklist_interface</full_name>
        <argument line="2308">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2313" package="Default">
        <name>dewhitelist_interface</name>
        <full_name>dewhitelist_interface</full_name>
        <argument line="2313">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2318" package="Default">
        <name>deblacklist_interface</name>
        <full_name>deblacklist_interface</full_name>
        <argument line="2318">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2323" package="Default">
        <name>whitelist_trait</name>
        <full_name>whitelist_trait</full_name>
        <argument line="2323">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2328" package="Default">
        <name>blacklist_trait</name>
        <full_name>blacklist_trait</full_name>
        <argument line="2328">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2333" package="Default">
        <name>dewhitelist_trait</name>
        <full_name>dewhitelist_trait</full_name>
        <argument line="2333">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2338" package="Default">
        <name>deblacklist_trait</name>
        <full_name>deblacklist_trait</full_name>
        <argument line="2338">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2343" package="Default">
        <name>whitelist_keyword</name>
        <full_name>whitelist_keyword</full_name>
        <argument line="2343">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2348" package="Default">
        <name>blacklist_keyword</name>
        <full_name>blacklist_keyword</full_name>
        <argument line="2348">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2353" package="Default">
        <name>dewhitelist_keyword</name>
        <full_name>dewhitelist_keyword</full_name>
        <argument line="2353">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2358" package="Default">
        <name>deblacklist_keyword</name>
        <full_name>deblacklist_keyword</full_name>
        <argument line="2358">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2363" package="Default">
        <name>whitelist_operator</name>
        <full_name>whitelist_operator</full_name>
        <argument line="2363">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2367" package="Default">
        <name>blacklist_operator</name>
        <full_name>blacklist_operator</full_name>
        <argument line="2367">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2371" package="Default">
        <name>dewhitelist_operator</name>
        <full_name>dewhitelist_operator</full_name>
        <argument line="2371">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2375" package="Default">
        <name>deblacklist_operator</name>
        <full_name>deblacklist_operator</full_name>
        <argument line="2375">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2379" package="Default">
        <name>whitelist_primitive</name>
        <full_name>whitelist_primitive</full_name>
        <argument line="2379">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2384" package="Default">
        <name>blacklist_primitive</name>
        <full_name>blacklist_primitive</full_name>
        <argument line="2384">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2389" package="Default">
        <name>dewhitelist_primitive</name>
        <full_name>dewhitelist_primitive</full_name>
        <argument line="2389">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2394" package="Default">
        <name>deblacklist_primitive</name>
        <full_name>deblacklist_primitive</full_name>
        <argument line="2394">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2399" package="Default">
        <name>whitelist_type</name>
        <full_name>whitelist_type</full_name>
        <argument line="2399">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2404" package="Default">
        <name>blacklist_type</name>
        <full_name>blacklist_type</full_name>
        <argument line="2404">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2409" package="Default">
        <name>dewhitelist_type</name>
        <full_name>dewhitelist_type</full_name>
        <argument line="2409">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2414" package="Default">
        <name>deblacklist_type</name>
        <full_name>deblacklist_type</full_name>
        <argument line="2414">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2419" package="Default">
        <name>check_func</name>
        <full_name>check_func</full_name>
        <argument line="2419">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2440" package="Default">
        <name>check_var</name>
        <full_name>check_var</full_name>
        <argument line="2440">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2460" package="Default">
        <name>check_global</name>
        <full_name>check_global</full_name>
        <argument line="2460">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2478" package="Default">
        <name>check_superglobal</name>
        <full_name>check_superglobal</full_name>
        <argument line="2478">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2499" package="Default">
        <name>check_const</name>
        <full_name>check_const</full_name>
        <argument line="2499">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2523" package="Default">
        <name>check_magic_const</name>
        <full_name>check_magic_const</full_name>
        <argument line="2523">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2544" package="Default">
        <name>check_namespace</name>
        <full_name>check_namespace</full_name>
        <argument line="2544">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2563" package="Default">
        <name>check_alias</name>
        <full_name>check_alias</full_name>
        <argument line="2563">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2582" package="Default">
        <name>check_use</name>
        <full_name>check_use</full_name>
        <argument line="2582">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2586" package="Default">
        <name>check_class</name>
        <full_name>check_class</full_name>
        <argument line="2586">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2605" package="Default">
        <name>check_interface</name>
        <full_name>check_interface</full_name>
        <argument line="2605">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2624" package="Default">
        <name>check_trait</name>
        <full_name>check_trait</full_name>
        <argument line="2624">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2643" package="Default">
        <name>check_keyword</name>
        <full_name>check_keyword</full_name>
        <argument line="2643">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2660" package="Default">
        <name>check_operator</name>
        <full_name>check_operator</full_name>
        <argument line="2660">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2676" package="Default">
        <name>check_primitive</name>
        <full_name>check_primitive</full_name>
        <argument line="2676">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2693" package="Default">
        <name>check_type</name>
        <full_name>check_type</full_name>
        <argument line="2693">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2712" package="Default">
        <name>prepare_vars</name>
        <full_name>prepare_vars</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2734" package="Default">
        <name>prepare_consts</name>
        <full_name>prepare_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2756" package="Default">
        <name>prepare_namespaces</name>
        <full_name>prepare_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2768" package="Default">
        <name>prepare_aliases</name>
        <full_name>prepare_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2780" package="Default">
        <name>prepare_uses</name>
        <full_name>prepare_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2784" package="Default">
        <name>disassemble</name>
        <full_name>disassemble</full_name>
        <argument line="2784">
          <name>$closure</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2801" package="Default">
        <name>auto_whitelist</name>
        <full_name>auto_whitelist</full_name>
        <argument line="2801">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2801">
          <name>$appended</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2817" package="Default">
        <name>auto_define</name>
        <full_name>auto_define</full_name>
        <docblock line="2814">
          <description></description>
          <long-description></long-description>
          <tag line="2814" name="param" description="" type="\FunctionParser\FunctionParser" variable="$disassembled_closure">
            <type by_reference="false">\FunctionParser\FunctionParser</type>
          </tag>
        </docblock>
        <argument line="2817">
          <name>$disassembled_closure</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2827" package="Default">
        <name>prepend</name>
        <full_name>prepend</full_name>
        <argument line="2827">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2839" package="Default">
        <name>append</name>
        <full_name>append</full_name>
        <argument line="2839">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2851" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2856" package="Default">
        <name>clear_prepend</name>
        <full_name>clear_prepend</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2860" package="Default">
        <name>clear_append</name>
        <full_name>clear_append</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2864" package="Default">
        <name>prepare</name>
        <full_name>prepare</full_name>
        <argument line="2864">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2913" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file PHPSandbox.php</error>
      <error line="63" code="50018">No DocBlock was found for property $definitions</error>
      <error line="73" code="50018">No DocBlock was found for property $whitelist</error>
      <error line="91" code="50018">No DocBlock was found for property $blacklist</error>
      <error line="294" code="50014">Name of argument $superglobals does not match with the DocBlock's name $globals in __construct()</error>
      <error line="294" code="50014">Name of argument $magic_constants does not match with the DocBlock's name $superglobals in __construct()</error>
      <notice line="294" code="50013">Parameter $globals could not be found in __construct()</notice>
      <error line="1325" code="50010">No DocBlock was found for method define_const()</error>
      <error line="1336" code="50010">No DocBlock was found for method define_consts()</error>
      <error line="1343" code="50010">No DocBlock was found for method has_defined_consts()</error>
      <error line="1347" code="50010">No DocBlock was found for method is_defined_const()</error>
      <error line="1351" code="50010">No DocBlock was found for method undefine_const()</error>
      <error line="1361" code="50010">No DocBlock was found for method undefine_consts()</error>
      <error line="1372" code="50010">No DocBlock was found for method define_magic_const()</error>
      <error line="1384" code="50010">No DocBlock was found for method define_magic_consts()</error>
      <error line="1391" code="50010">No DocBlock was found for method has_defined_magic_consts()</error>
      <error line="1395" code="50010">No DocBlock was found for method is_defined_magic_const()</error>
      <error line="1400" code="50010">No DocBlock was found for method undefine_magic_const()</error>
      <error line="1411" code="50010">No DocBlock was found for method undefine_magic_consts()</error>
      <error line="1422" code="50010">No DocBlock was found for method define_namespace()</error>
      <error line="1433" code="50010">No DocBlock was found for method define_namespaces()</error>
      <error line="1440" code="50010">No DocBlock was found for method has_defined_namespaces()</error>
      <error line="1444" code="50010">No DocBlock was found for method is_defined_namespace()</error>
      <error line="1448" code="50010">No DocBlock was found for method undefine_namespace()</error>
      <error line="1458" code="50010">No DocBlock was found for method undefine_namespaces()</error>
      <error line="1469" code="50010">No DocBlock was found for method define_alias()</error>
      <error line="1480" code="50010">No DocBlock was found for method define_aliases()</error>
      <error line="1487" code="50010">No DocBlock was found for method has_defined_aliases()</error>
      <error line="1491" code="50010">No DocBlock was found for method is_defined_alias()</error>
      <error line="1495" code="50010">No DocBlock was found for method undefine_alias()</error>
      <error line="1505" code="50010">No DocBlock was found for method undefine_aliases()</error>
      <error line="1516" code="50010">No DocBlock was found for method define_use()</error>
      <error line="1520" code="50010">No DocBlock was found for method define_uses()</error>
      <error line="1524" code="50010">No DocBlock was found for method has_defined_uses()</error>
      <error line="1528" code="50010">No DocBlock was found for method is_defined_use()</error>
      <error line="1532" code="50010">No DocBlock was found for method undefine_use()</error>
      <error line="1536" code="50010">No DocBlock was found for method undefine_uses()</error>
      <error line="1540" code="50010">No DocBlock was found for method normalize_func()</error>
      <error line="1544" code="50010">No DocBlock was found for method normalize_superglobal()</error>
      <error line="1548" code="50010">No DocBlock was found for method normalize_magic_const()</error>
      <error line="1552" code="50010">No DocBlock was found for method normalize_namespace()</error>
      <error line="1556" code="50010">No DocBlock was found for method normalize_alias()</error>
      <error line="1560" code="50010">No DocBlock was found for method normalize_use()</error>
      <error line="1564" code="50010">No DocBlock was found for method normalize_class()</error>
      <error line="1568" code="50010">No DocBlock was found for method normalize_interface()</error>
      <error line="1572" code="50010">No DocBlock was found for method normalize_trait()</error>
      <error line="1576" code="50010">No DocBlock was found for method normalize_keyword()</error>
      <error line="1607" code="50010">No DocBlock was found for method normalize_primitive()</error>
      <error line="1621" code="50010">No DocBlock was found for method normalize_type()</error>
      <error line="1625" code="50010">No DocBlock was found for method whitelist()</error>
      <error line="1650" code="50010">No DocBlock was found for method blacklist()</error>
      <error line="1675" code="50010">No DocBlock was found for method dewhitelist()</error>
      <error line="1694" code="50010">No DocBlock was found for method deblacklist()</error>
      <error line="1713" code="50010">No DocBlock was found for method has_whitelist()</error>
      <error line="1717" code="50010">No DocBlock was found for method has_blacklist()</error>
      <error line="1721" code="50010">No DocBlock was found for method is_whitelisted()</error>
      <error line="1725" code="50010">No DocBlock was found for method is_blacklisted()</error>
      <error line="1729" code="50010">No DocBlock was found for method has_whitelist_funcs()</error>
      <error line="1733" code="50010">No DocBlock was found for method has_blacklist_funcs()</error>
      <error line="1737" code="50010">No DocBlock was found for method is_whitelisted_func()</error>
      <error line="1742" code="50010">No DocBlock was found for method is_blacklisted_func()</error>
      <error line="1747" code="50010">No DocBlock was found for method has_whitelist_vars()</error>
      <error line="1751" code="50010">No DocBlock was found for method has_blacklist_vars()</error>
      <error line="1755" code="50010">No DocBlock was found for method is_whitelisted_var()</error>
      <error line="1759" code="50010">No DocBlock was found for method is_blacklisted_var()</error>
      <error line="1763" code="50010">No DocBlock was found for method has_whitelist_globals()</error>
      <error line="1767" code="50010">No DocBlock was found for method has_blacklist_globals()</error>
      <error line="1771" code="50010">No DocBlock was found for method is_whitelisted_global()</error>
      <error line="1775" code="50010">No DocBlock was found for method is_blacklisted_global()</error>
      <error line="1779" code="50010">No DocBlock was found for method has_whitelist_superglobals()</error>
      <error line="1784" code="50010">No DocBlock was found for method has_blacklist_superglobals()</error>
      <error line="1789" code="50010">No DocBlock was found for method is_whitelisted_superglobal()</error>
      <error line="1794" code="50010">No DocBlock was found for method is_blacklisted_superglobal()</error>
      <error line="1799" code="50010">No DocBlock was found for method has_whitelist_consts()</error>
      <error line="1803" code="50010">No DocBlock was found for method has_blacklist_consts()</error>
      <error line="1807" code="50010">No DocBlock was found for method is_whitelisted_const()</error>
      <error line="1811" code="50010">No DocBlock was found for method is_blacklisted_const()</error>
      <error line="1815" code="50010">No DocBlock was found for method has_whitelist_magic_consts()</error>
      <error line="1819" code="50010">No DocBlock was found for method has_blacklist_magic_consts()</error>
      <error line="1823" code="50010">No DocBlock was found for method is_whitelisted_magic_const()</error>
      <error line="1828" code="50010">No DocBlock was found for method is_blacklisted_magic_const()</error>
      <error line="1833" code="50010">No DocBlock was found for method has_whitelist_namespaces()</error>
      <error line="1837" code="50010">No DocBlock was found for method has_blacklist_namespaces()</error>
      <error line="1841" code="50010">No DocBlock was found for method is_whitelisted_namespace()</error>
      <error line="1846" code="50010">No DocBlock was found for method is_blacklisted_namespace()</error>
      <error line="1851" code="50010">No DocBlock was found for method has_whitelist_aliases()</error>
      <error line="1855" code="50010">No DocBlock was found for method has_blacklist_aliases()</error>
      <error line="1859" code="50010">No DocBlock was found for method is_whitelisted_alias()</error>
      <error line="1864" code="50010">No DocBlock was found for method is_blacklisted_alias()</error>
      <error line="1869" code="50010">No DocBlock was found for method has_whitelist_uses()</error>
      <error line="1873" code="50010">No DocBlock was found for method has_blacklist_uses()</error>
      <error line="1877" code="50010">No DocBlock was found for method is_whitelisted_use()</error>
      <error line="1881" code="50010">No DocBlock was found for method is_blacklisted_use()</error>
      <error line="1885" code="50010">No DocBlock was found for method has_whitelist_classes()</error>
      <error line="1889" code="50010">No DocBlock was found for method has_blacklist_classes()</error>
      <error line="1893" code="50010">No DocBlock was found for method is_whitelisted_class()</error>
      <error line="1898" code="50010">No DocBlock was found for method is_blacklisted_class()</error>
      <error line="1903" code="50010">No DocBlock was found for method has_whitelist_interfaces()</error>
      <error line="1907" code="50010">No DocBlock was found for method has_blacklist_interfaces()</error>
      <error line="1911" code="50010">No DocBlock was found for method is_whitelisted_interface()</error>
      <error line="1916" code="50010">No DocBlock was found for method is_blacklisted_interface()</error>
      <error line="1921" code="50010">No DocBlock was found for method has_whitelist_traits()</error>
      <error line="1925" code="50010">No DocBlock was found for method has_blacklist_traits()</error>
      <error line="1929" code="50010">No DocBlock was found for method is_whitelisted_trait()</error>
      <error line="1934" code="50010">No DocBlock was found for method is_blacklisted_trait()</error>
      <error line="1939" code="50010">No DocBlock was found for method has_whitelist_keywords()</error>
      <error line="1943" code="50010">No DocBlock was found for method has_blacklist_keywords()</error>
      <error line="1947" code="50010">No DocBlock was found for method is_whitelisted_keyword()</error>
      <error line="1952" code="50010">No DocBlock was found for method is_blacklisted_keyword()</error>
      <error line="1957" code="50010">No DocBlock was found for method has_whitelist_operators()</error>
      <error line="1961" code="50010">No DocBlock was found for method has_blacklist_operators()</error>
      <error line="1965" code="50010">No DocBlock was found for method is_whitelisted_operator()</error>
      <error line="1969" code="50010">No DocBlock was found for method is_blacklisted_operator()</error>
      <error line="1973" code="50010">No DocBlock was found for method has_whitelist_primitives()</error>
      <error line="1977" code="50010">No DocBlock was found for method has_blacklist_primitives()</error>
      <error line="1981" code="50010">No DocBlock was found for method is_whitelisted_primitive()</error>
      <error line="1986" code="50010">No DocBlock was found for method is_blacklisted_primitive()</error>
      <error line="1991" code="50010">No DocBlock was found for method has_whitelist_types()</error>
      <error line="1995" code="50010">No DocBlock was found for method has_blacklist_types()</error>
      <error line="1999" code="50010">No DocBlock was found for method is_whitelisted_type()</error>
      <error line="2004" code="50010">No DocBlock was found for method is_blacklisted_type()</error>
      <error line="2009" code="50010">No DocBlock was found for method whitelist_func()</error>
      <error line="2014" code="50010">No DocBlock was found for method blacklist_func()</error>
      <error line="2019" code="50010">No DocBlock was found for method dewhitelist_func()</error>
      <error line="2024" code="50010">No DocBlock was found for method deblacklist_func()</error>
      <error line="2029" code="50010">No DocBlock was found for method whitelist_var()</error>
      <error line="2033" code="50010">No DocBlock was found for method blacklist_var()</error>
      <error line="2037" code="50010">No DocBlock was found for method dewhitelist_var()</error>
      <error line="2041" code="50010">No DocBlock was found for method deblacklist_var()</error>
      <error line="2045" code="50010">No DocBlock was found for method whitelist_global()</error>
      <error line="2049" code="50010">No DocBlock was found for method blacklist_global()</error>
      <error line="2053" code="50010">No DocBlock was found for method dewhitelist_global()</error>
      <error line="2057" code="50010">No DocBlock was found for method deblacklist_global()</error>
      <error line="2061" code="50010">No DocBlock was found for method whitelist_superglobal()</error>
      <error line="2096" code="50010">No DocBlock was found for method blacklist_superglobal()</error>
      <error line="2131" code="50010">No DocBlock was found for method dewhitelist_superglobal()</error>
      <error line="2161" code="50010">No DocBlock was found for method deblacklist_superglobal()</error>
      <error line="2191" code="50010">No DocBlock was found for method whitelist_const()</error>
      <error line="2195" code="50010">No DocBlock was found for method blacklist_const()</error>
      <error line="2199" code="50010">No DocBlock was found for method dewhitelist_const()</error>
      <error line="2203" code="50010">No DocBlock was found for method deblacklist_const()</error>
      <error line="2207" code="50010">No DocBlock was found for method whitelist_magic_const()</error>
      <error line="2212" code="50010">No DocBlock was found for method blacklist_magic_const()</error>
      <error line="2217" code="50010">No DocBlock was found for method dewhitelist_magic_const()</error>
      <error line="2222" code="50010">No DocBlock was found for method deblacklist_magic_const()</error>
      <error line="2227" code="50010">No DocBlock was found for method whitelist_namespace()</error>
      <error line="2232" code="50010">No DocBlock was found for method blacklist_namespace()</error>
      <error line="2237" code="50010">No DocBlock was found for method dewhitelist_namespace()</error>
      <error line="2242" code="50010">No DocBlock was found for method deblacklist_namespace()</error>
      <error line="2247" code="50010">No DocBlock was found for method whitelist_alias()</error>
      <error line="2252" code="50010">No DocBlock was found for method blacklist_alias()</error>
      <error line="2257" code="50010">No DocBlock was found for method dewhitelist_alias()</error>
      <error line="2262" code="50010">No DocBlock was found for method deblacklist_alias()</error>
      <error line="2267" code="50010">No DocBlock was found for method whitelist_use()</error>
      <error line="2271" code="50010">No DocBlock was found for method blacklist_use()</error>
      <error line="2275" code="50010">No DocBlock was found for method dewhitelist_use()</error>
      <error line="2279" code="50010">No DocBlock was found for method deblacklist_use()</error>
      <error line="2283" code="50010">No DocBlock was found for method whitelist_class()</error>
      <error line="2288" code="50010">No DocBlock was found for method blacklist_class()</error>
      <error line="2293" code="50010">No DocBlock was found for method dewhitelist_class()</error>
      <error line="2298" code="50010">No DocBlock was found for method deblacklist_class()</error>
      <error line="2303" code="50010">No DocBlock was found for method whitelist_interface()</error>
      <error line="2308" code="50010">No DocBlock was found for method blacklist_interface()</error>
      <error line="2313" code="50010">No DocBlock was found for method dewhitelist_interface()</error>
      <error line="2318" code="50010">No DocBlock was found for method deblacklist_interface()</error>
      <error line="2323" code="50010">No DocBlock was found for method whitelist_trait()</error>
      <error line="2328" code="50010">No DocBlock was found for method blacklist_trait()</error>
      <error line="2333" code="50010">No DocBlock was found for method dewhitelist_trait()</error>
      <error line="2338" code="50010">No DocBlock was found for method deblacklist_trait()</error>
      <error line="2343" code="50010">No DocBlock was found for method whitelist_keyword()</error>
      <error line="2348" code="50010">No DocBlock was found for method blacklist_keyword()</error>
      <error line="2353" code="50010">No DocBlock was found for method dewhitelist_keyword()</error>
      <error line="2358" code="50010">No DocBlock was found for method deblacklist_keyword()</error>
      <error line="2363" code="50010">No DocBlock was found for method whitelist_operator()</error>
      <error line="2367" code="50010">No DocBlock was found for method blacklist_operator()</error>
      <error line="2371" code="50010">No DocBlock was found for method dewhitelist_operator()</error>
      <error line="2375" code="50010">No DocBlock was found for method deblacklist_operator()</error>
      <error line="2379" code="50010">No DocBlock was found for method whitelist_primitive()</error>
      <error line="2384" code="50010">No DocBlock was found for method blacklist_primitive()</error>
      <error line="2389" code="50010">No DocBlock was found for method dewhitelist_primitive()</error>
      <error line="2394" code="50010">No DocBlock was found for method deblacklist_primitive()</error>
      <error line="2399" code="50010">No DocBlock was found for method whitelist_type()</error>
      <error line="2404" code="50010">No DocBlock was found for method blacklist_type()</error>
      <error line="2409" code="50010">No DocBlock was found for method dewhitelist_type()</error>
      <error line="2414" code="50010">No DocBlock was found for method deblacklist_type()</error>
      <error line="2419" code="50010">No DocBlock was found for method check_func()</error>
      <error line="2440" code="50010">No DocBlock was found for method check_var()</error>
      <error line="2460" code="50010">No DocBlock was found for method check_global()</error>
      <error line="2478" code="50010">No DocBlock was found for method check_superglobal()</error>
      <error line="2499" code="50010">No DocBlock was found for method check_const()</error>
      <error line="2523" code="50010">No DocBlock was found for method check_magic_const()</error>
      <error line="2544" code="50010">No DocBlock was found for method check_namespace()</error>
      <error line="2563" code="50010">No DocBlock was found for method check_alias()</error>
      <error line="2582" code="50010">No DocBlock was found for method check_use()</error>
      <error line="2586" code="50010">No DocBlock was found for method check_class()</error>
      <error line="2605" code="50010">No DocBlock was found for method check_interface()</error>
      <error line="2624" code="50010">No DocBlock was found for method check_trait()</error>
      <error line="2643" code="50010">No DocBlock was found for method check_keyword()</error>
      <error line="2660" code="50010">No DocBlock was found for method check_operator()</error>
      <error line="2676" code="50010">No DocBlock was found for method check_primitive()</error>
      <error line="2693" code="50010">No DocBlock was found for method check_type()</error>
      <error line="2712" code="50010">No DocBlock was found for method prepare_vars()</error>
      <error line="2734" code="50010">No DocBlock was found for method prepare_consts()</error>
      <error line="2756" code="50010">No DocBlock was found for method prepare_namespaces()</error>
      <error line="2768" code="50010">No DocBlock was found for method prepare_aliases()</error>
      <error line="2780" code="50010">No DocBlock was found for method prepare_uses()</error>
      <error line="2784" code="50010">No DocBlock was found for method disassemble()</error>
      <error line="2801" code="50010">No DocBlock was found for method auto_whitelist()</error>
      <error line="2814" code="50012">No short description for method auto_define()</error>
      <error line="2827" code="50010">No DocBlock was found for method prepend()</error>
      <error line="2839" code="50010">No DocBlock was found for method append()</error>
      <error line="2851" code="50010">No DocBlock was found for method clear()</error>
      <error line="2856" code="50010">No DocBlock was found for method clear_prepend()</error>
      <error line="2860" code="50010">No DocBlock was found for method clear_append()</error>
      <error line="2864" code="50010">No DocBlock was found for method prepare()</error>
      <error line="2913" code="50010">No DocBlock was found for method execute()</error>
    </parse_markers>
  </file>
  <file path="SandboxWhitelistVisitor.php" hash="9b4e5043cd911febf4c4163b43895c90" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="4" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>SandboxWhitelistVisitor</name>
      <full_name>\PHPSandbox\SandboxWhitelistVisitor</full_name>
      <property final="false" static="false" visibility="protected" line="8" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default/>
        <docblock line="5">
          <description/>
          <long-description/>
          <tag line="5" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="10" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="10">
          <name>$sandbox</name>
          <default/>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="14" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <argument line="14">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file SandboxWhitelistVisitor.php</error>
      <error line="4" code="50000">No DocBlock was found for \PHPSandbox\SandboxWhitelistVisitor</error>
      <critical line="5" code="50019">No short description for property $sandbox</critical>
      <error line="10" code="50010">No DocBlock was found for method __construct()</error>
      <error line="14" code="50010">No DocBlock was found for method leaveNode()</error>
    </parse_markers>
  </file>
  <file path="ValidatorVisitor.php" hash="680ee842258eebc38173483e6db4be17" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="4" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>ValidatorVisitor</name>
      <full_name>\PHPSandbox\ValidatorVisitor</full_name>
      <property final="false" static="false" visibility="protected" line="8" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default/>
        <docblock line="5">
          <description/>
          <long-description/>
          <tag line="5" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="10" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="10">
          <name>$sandbox</name>
          <default/>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="14" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <argument line="14">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="220" package="Default">
        <name>is_magic_const</name>
        <full_name>is_magic_const</full_name>
        <argument line="220">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="242" package="Default">
        <name>is_keyword</name>
        <full_name>is_keyword</full_name>
        <argument line="242">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="302" package="Default">
        <name>is_operator</name>
        <full_name>is_operator</full_name>
        <argument line="302">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="400" package="Default">
        <name>is_primitive</name>
        <full_name>is_primitive</full_name>
        <argument line="400">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ValidatorVisitor.php</error>
      <error line="4" code="50000">No DocBlock was found for \PHPSandbox\ValidatorVisitor</error>
      <critical line="5" code="50019">No short description for property $sandbox</critical>
      <error line="10" code="50010">No DocBlock was found for method __construct()</error>
      <error line="14" code="50010">No DocBlock was found for method leaveNode()</error>
      <error line="220" code="50010">No DocBlock was found for method is_magic_const()</error>
      <error line="242" code="50010">No DocBlock was found for method is_keyword()</error>
      <error line="302" code="50010">No DocBlock was found for method is_operator()</error>
      <error line="400" code="50010">No DocBlock was found for method is_primitive()</error>
    </parse_markers>
  </file>
  <file path="WhitelistVisitor.php" hash="55a73410a5264be921e392b30b7d5428" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="4" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>WhitelistVisitor</name>
      <full_name>\PHPSandbox\WhitelistVisitor</full_name>
      <property final="false" static="false" visibility="protected" line="8" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default/>
        <docblock line="5">
          <description/>
          <long-description/>
          <tag line="5" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="10" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="10">
          <name>$sandbox</name>
          <default/>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="14" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <argument line="14">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file WhitelistVisitor.php</error>
      <error line="4" code="50000">No DocBlock was found for \PHPSandbox\WhitelistVisitor</error>
      <critical line="5" code="50019">No short description for property $sandbox</critical>
      <error line="10" code="50010">No DocBlock was found for method __construct()</error>
      <error line="14" code="50010">No DocBlock was found for method leaveNode()</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <namespace name="PHPSandbox" full_name="PHPSandbox"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
