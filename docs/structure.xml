<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="Error.php" hash="dd3a03cf5bd934982d5068ad36a9cb68" package="PHPSandbox">
    <docblock line="2">
      <description>Error class declaration</description>
      <long-description></long-description>
      <tag line="2" name="package" description="PHPSandbox"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPSandbox" line="16" package="Default">
      <extends>\Exception</extends>
      <name>Error</name>
      <full_name>\PHPSandbox\Error</full_name>
      <docblock line="6">
        <description>Error class for PHP Sandboxes.</description>
        <long-description>&lt;p&gt;This class extends Exception to allow for catching PHPSandbox-specific exceptions.&lt;/p&gt;</long-description>
        <tag line="6" name="namespace" description="PHPSandbox"/>
        <tag line="6" name="author" description="Elijah Horton &lt;fieryprophet@yahoo.com&gt;"/>
        <tag line="6" name="version" description="1.0"/>
      </docblock>
    </class>
  </file>
  <file path="PHPSandbox.php" hash="01b1b78d5bb1564cfc64edff9096f039" package="PHPSandbox">
    <docblock line="2">
      <description>PHPSandbox class declaration</description>
      <long-description></long-description>
      <tag line="2" name="package" description="PHPSandbox"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPSandbox" line="18" package="Default">
      <extends/>
      <name>PHPSandbox</name>
      <full_name>\PHPSandbox\PHPSandbox</full_name>
      <docblock line="7">
        <description>PHPSandbox class for PHP Sandboxes.</description>
        <long-description>&lt;p&gt;This class encapsulates the entire functionality of a PHPSandbox so that an end user
only has to create a PHPSandbox instance, configure its options, and run their code&lt;/p&gt;</long-description>
        <tag line="7" name="namespace" description="PHPSandbox"/>
        <tag line="7" name="author" description="Elijah Horton &lt;fieryprophet@yahoo.com&gt;"/>
        <tag line="7" name="version" description="1.0"/>
      </docblock>
      <constant namespace="PHPSandbox" line="26" package="Default">
        <name>IMPORT_ALL</name>
        <full_name>IMPORT_ALL</full_name>
        <value>0</value>
        <docblock line="23">
          <description></description>
          <long-description></long-description>
          <tag line="23" name="var" description="A bit flag for the import() method, signifies to import all data from a template" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="PHPSandbox" line="30" package="Default">
        <name>IMPORT_OPTIONS</name>
        <full_name>IMPORT_OPTIONS</full_name>
        <value>1</value>
        <docblock line="27">
          <description></description>
          <long-description></long-description>
          <tag line="27" name="var" description="A bit flag for the import() method, signifies to import only options from a template" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="PHPSandbox" line="34" package="Default">
        <name>IMPORT_DEFINITIONS</name>
        <full_name>IMPORT_DEFINITIONS</full_name>
        <value>2</value>
        <docblock line="31">
          <description></description>
          <long-description></long-description>
          <tag line="31" name="var" description="A bit flag for the import() method, signifies to import only definitions from a template" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="PHPSandbox" line="38" package="Default">
        <name>IMPORT_WHITELIST</name>
        <full_name>IMPORT_WHITELIST</full_name>
        <value>4</value>
        <docblock line="35">
          <description></description>
          <long-description></long-description>
          <tag line="35" name="var" description="A bit flag for the import() method, signifies to import only whitelists from a template" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="PHPSandbox" line="42" package="Default">
        <name>IMPORT_BLACKLIST</name>
        <full_name>IMPORT_BLACKLIST</full_name>
        <value>8</value>
        <docblock line="39">
          <description></description>
          <long-description></long-description>
          <tag line="39" name="var" description="A bit flag for the import() method, signifies to import only blacklists from a template" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="PHPSandbox" line="46" package="Default">
        <name>IMPORT_TRUSTED_CODE</name>
        <full_name>IMPORT_TRUSTED_CODE</full_name>
        <value>16</value>
        <docblock line="43">
          <description></description>
          <long-description></long-description>
          <tag line="43" name="var" description="A bit flag for the import() method, signifies to import only trusted code from a template" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <constant namespace="PHPSandbox" line="50" package="Default">
        <name>IMPORT_CODE</name>
        <full_name>IMPORT_CODE</full_name>
        <value>32</value>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag line="47" name="var" description="A bit flag for the import() method, signifies to import only sandboxed code from a template" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </constant>
      <property final="false" static="true" visibility="protected" line="22" namespace="PHPSandbox" package="Default">
        <name>$function_prefix</name>
        <default>'__PHPSandbox_'</default>
        <docblock line="19">
          <description></description>
          <long-description></long-description>
          <tag line="19" name="var" description="The prefix given to the obfuscated sandbox variable passed to the generated code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="54" namespace="PHPSandbox" package="Default">
        <name>$superglobals</name>
        <default>array('_GET', '_POST', '_COOKIE', '_FILES', '_ENV', '_REQUEST', '_SERVER', '_SESSION', 'GLOBALS')</default>
        <docblock line="51">
          <description></description>
          <long-description></long-description>
          <tag line="51" name="var" description="A static array of superglobal names used for redefining superglobal values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="68" namespace="PHPSandbox" package="Default">
        <name>$magic_constants</name>
        <default>array('__LINE__', '__FILE__', '__DIR__', '__FUNCTION__', '__CLASS__', '__TRAIT__', '__METHOD__', '__NAMESPACE__')</default>
        <docblock line="65">
          <description></description>
          <long-description></long-description>
          <tag line="65" name="var" description="A static array of magic constant names used for redefining magic constant values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="81" namespace="PHPSandbox" package="Default">
        <name>$defined_funcs</name>
        <default>array('get_defined_functions', 'get_defined_vars', 'get_defined_constants', 'get_declared_classes', 'get_declared_interfaces', 'get_declared_traits')</default>
        <docblock line="78">
          <description></description>
          <long-description></long-description>
          <tag line="78" name="var" description="A static array of defined_* and declared_* functions names used for redefining defined_* and declared_* values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="92" namespace="PHPSandbox" package="Default">
        <name>$arg_funcs</name>
        <default>array('func_get_args', 'func_get_arg', 'func_num_args')</default>
        <docblock line="89">
          <description></description>
          <long-description></long-description>
          <tag line="89" name="var" description="A static array of func_get_args, func_get_arg, and func_num_args used for redefining those functions" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="100" namespace="PHPSandbox" package="Default">
        <name>$name</name>
        <default>''</default>
        <docblock line="97">
          <description></description>
          <long-description></long-description>
          <tag line="97" name="var" description="The randomly generated name of the PHPSandbox variable passed to the generated closure" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="104" namespace="PHPSandbox" package="Default">
        <name>$definitions</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array(), 'classes' =&gt; array(), 'interfaces' =&gt; array(), 'traits' =&gt; array())</default>
        <docblock line="101">
          <description></description>
          <long-description></long-description>
          <tag line="101" name="var" description="Array of defined functions, superglobals, etc. If an array type contains elements, then it overwrites its external counterpart" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="119" namespace="PHPSandbox" package="Default">
        <name>$whitelist</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'globals' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array(), 'classes' =&gt; array(), 'interfaces' =&gt; array(), 'traits' =&gt; array(), 'keywords' =&gt; array(), 'operators' =&gt; array(), 'primitives' =&gt; array(), 'types' =&gt; array())</default>
        <docblock line="116">
          <description></description>
          <long-description></long-description>
          <tag line="116" name="var" description="Array of whitelisted functions, classes, etc. If an array type contains elements, then it overrides its blacklist counterpart" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="139" namespace="PHPSandbox" package="Default">
        <name>$blacklist</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'globals' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array(), 'classes' =&gt; array(), 'interfaces' =&gt; array(), 'traits' =&gt; array(), 'keywords' =&gt; array('declare' =&gt; true, 'include' =&gt; true, 'eval' =&gt; true, 'exit' =&gt; true, 'halt' =&gt; true), 'operators' =&gt; array(), 'primitives' =&gt; array(), 'types' =&gt; array())</default>
        <docblock line="136">
          <description></description>
          <long-description></long-description>
          <tag line="136" name="var" description="Array of blacklisted functions, classes, etc. Any whitelisted array types override their counterpart in this array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="167" namespace="PHPSandbox" package="Default">
        <name>$error_level</name>
        <default>null</default>
        <docblock line="163">
          <description></description>
          <long-description></long-description>
          <tag line="163" name="var" description="The error_reporting level to set the PHPSandbox scope to when executing the generated closure, if set to null it will use parent scope error level." type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="163" name="default" description="null"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="172" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_trusted_code</name>
        <default>true</default>
        <docblock line="168">
          <description></description>
          <long-description></long-description>
          <tag line="168" name="var" description="Should PHPSandbox automagically whitelist prepended and appended code?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="168" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="177" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_functions</name>
        <default>true</default>
        <docblock line="173">
          <description></description>
          <long-description></long-description>
          <tag line="173" name="var" description="Should PHPSandbox automagically whitelist functions created in sandboxed code if $allow_functions is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="173" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="182" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_constants</name>
        <default>true</default>
        <docblock line="178">
          <description></description>
          <long-description></long-description>
          <tag line="178" name="var" description="Should PHPSandbox automagically whitelist constants created in sandboxed code if $allow_constants is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="178" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="187" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_globals</name>
        <default>true</default>
        <docblock line="183">
          <description></description>
          <long-description></long-description>
          <tag line="183" name="var" description="Should PHPSandbox automagically whitelist global variables created in sandboxed code if $allow_globals is true? (Used to whitelist them in the variables list)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="183" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="192" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_classes</name>
        <default>true</default>
        <docblock line="188">
          <description></description>
          <long-description></long-description>
          <tag line="188" name="var" description="Should PHPSandbox automagically whitelist classes created in sandboxed code if $allow_classes is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="188" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="197" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_interfaces</name>
        <default>true</default>
        <docblock line="193">
          <description></description>
          <long-description></long-description>
          <tag line="193" name="var" description="Should PHPSandbox automagically whitelist interfaces created in sandboxed code if $allow_interfaces is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="193" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="202" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_traits</name>
        <default>true</default>
        <docblock line="198">
          <description></description>
          <long-description></long-description>
          <tag line="198" name="var" description="Should PHPSandbox automagically whitelist traits created in sandboxed code if $allow_traits is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="198" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="207" namespace="PHPSandbox" package="Default">
        <name>$auto_define_vars</name>
        <default>true</default>
        <docblock line="203">
          <description></description>
          <long-description></long-description>
          <tag line="203" name="var" description="Should PHPSandbox automagically define variables passed to prepended, appended and prepared code closures?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="203" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="212" namespace="PHPSandbox" package="Default">
        <name>$overwrite_defined_funcs</name>
        <default>true</default>
        <docblock line="208">
          <description></description>
          <long-description></long-description>
          <tag line="208" name="var" description="Should PHPSandbox overwrite get_defined_functions, get_defined_vars, get_defined_constants, get_declared_classes, get_declared_interfaces and get_declared_traits?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="208" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="217" namespace="PHPSandbox" package="Default">
        <name>$overwrite_func_get_args</name>
        <default>true</default>
        <docblock line="213">
          <description></description>
          <long-description></long-description>
          <tag line="213" name="var" description="Should PHPSandbox overwrite func_get_args, func_get_arg and func_num_args?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="213" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="222" namespace="PHPSandbox" package="Default">
        <name>$overwrite_superglobals</name>
        <default>true</default>
        <docblock line="218">
          <description></description>
          <long-description></long-description>
          <tag line="218" name="var" description="Should PHPSandbox overwrite $_GET, $_POST, $_COOKIE, $_FILES, $_ENV, $_REQUEST, $_SERVER, $_SESSION and $GLOBALS superglobals? If so, unless alternate superglobal values have been defined they will return as empty arrays." type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="218" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="227" namespace="PHPSandbox" package="Default">
        <name>$allow_functions</name>
        <default>false</default>
        <docblock line="223">
          <description></description>
          <long-description></long-description>
          <tag line="223" name="var" description="Should PHPSandbox allow sandboxed code to declare functions?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="223" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="232" namespace="PHPSandbox" package="Default">
        <name>$allow_closures</name>
        <default>false</default>
        <docblock line="228">
          <description></description>
          <long-description></long-description>
          <tag line="228" name="var" description="Should PHPSandbox allow sandboxed code to declare closures?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="228" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="237" namespace="PHPSandbox" package="Default">
        <name>$allow_variables</name>
        <default>true</default>
        <docblock line="233">
          <description></description>
          <long-description></long-description>
          <tag line="233" name="var" description="Should PHPSandbox allow sandboxed code to create variables?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="233" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="242" namespace="PHPSandbox" package="Default">
        <name>$allow_static_variables</name>
        <default>true</default>
        <docblock line="238">
          <description></description>
          <long-description></long-description>
          <tag line="238" name="var" description="Should PHPSandbox allow sandboxed code to create static variables?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="238" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="247" namespace="PHPSandbox" package="Default">
        <name>$allow_objects</name>
        <default>true</default>
        <docblock line="243">
          <description></description>
          <long-description></long-description>
          <tag line="243" name="var" description="Should PHPSandbox allow sandboxed code to create objects of allow classes (e.g. new keyword)?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="243" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="252" namespace="PHPSandbox" package="Default">
        <name>$allow_constants</name>
        <default>false</default>
        <docblock line="248">
          <description></description>
          <long-description></long-description>
          <tag line="248" name="var" description="Should PHPSandbox allow sandboxed code to define constants?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="248" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="257" namespace="PHPSandbox" package="Default">
        <name>$allow_globals</name>
        <default>false</default>
        <docblock line="253">
          <description></description>
          <long-description></long-description>
          <tag line="253" name="var" description="Should PHPSandbox allow sandboxed code to use global keyword to access variables in the global scope?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="253" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="262" namespace="PHPSandbox" package="Default">
        <name>$allow_namespaces</name>
        <default>false</default>
        <docblock line="258">
          <description></description>
          <long-description></long-description>
          <tag line="258" name="var" description="Should PHPSandbox allow sandboxed code to declare namespaces (utilizing the define_namespace function?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="258" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="267" namespace="PHPSandbox" package="Default">
        <name>$allow_aliases</name>
        <default>false</default>
        <docblock line="263">
          <description></description>
          <long-description></long-description>
          <tag line="263" name="var" description="Should PHPSandbox allow sandboxed code to use namespaces and declare namespace aliases (utilizing the define_alias function?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="263" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="272" namespace="PHPSandbox" package="Default">
        <name>$allow_classes</name>
        <default>false</default>
        <docblock line="268">
          <description></description>
          <long-description></long-description>
          <tag line="268" name="var" description="Should PHPSandbox allow sandboxed code to declare classes?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="268" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="277" namespace="PHPSandbox" package="Default">
        <name>$allow_interfaces</name>
        <default>false</default>
        <docblock line="273">
          <description></description>
          <long-description></long-description>
          <tag line="273" name="var" description="Should PHPSandbox allow sandboxed code to declare interfaces?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="273" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="282" namespace="PHPSandbox" package="Default">
        <name>$allow_traits</name>
        <default>false</default>
        <docblock line="278">
          <description></description>
          <long-description></long-description>
          <tag line="278" name="var" description="Should PHPSandbox allow sandboxed code to declare traits?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="278" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="287" namespace="PHPSandbox" package="Default">
        <name>$allow_escaping</name>
        <default>false</default>
        <docblock line="283">
          <description></description>
          <long-description></long-description>
          <tag line="283" name="var" description="Should PHPSandbox allow sandboxed code to escape to HTML?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="283" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="292" namespace="PHPSandbox" package="Default">
        <name>$allow_casting</name>
        <default>false</default>
        <docblock line="288">
          <description></description>
          <long-description></long-description>
          <tag line="288" name="var" description="Should PHPSandbox allow sandboxed code to cast types? (This will still be subject to allowed classes)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="288" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="297" namespace="PHPSandbox" package="Default">
        <name>$allow_error_suppressing</name>
        <default>false</default>
        <docblock line="293">
          <description></description>
          <long-description></long-description>
          <tag line="293" name="var" description="Should PHPSandbox allow sandboxed code to suppress errors (e.g. the @ operator?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="293" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="302" namespace="PHPSandbox" package="Default">
        <name>$allow_references</name>
        <default>true</default>
        <docblock line="298">
          <description></description>
          <long-description></long-description>
          <tag line="298" name="var" description="Should PHPSandbox allow sandboxed code to assign references?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="298" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="307" namespace="PHPSandbox" package="Default">
        <name>$allow_backticks</name>
        <default>false</default>
        <docblock line="303">
          <description></description>
          <long-description></long-description>
          <tag line="303" name="var" description="Should PHPSandbox allow sandboxed code to use backtick execution? (e.g. $var = \`ping google.com\`; This will also be disabled if shell_exec is not whitelisted or if it is blacklisted, and will be converted to a defined shell_exec function call if one is defined)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="303" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="312" namespace="PHPSandbox" package="Default">
        <name>$allow_halting</name>
        <default>false</default>
        <docblock line="308">
          <description></description>
          <long-description></long-description>
          <tag line="308" name="var" description="Should PHPSandbox allow sandboxed code to halt the PHP compiler?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="308" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="317" namespace="PHPSandbox" package="Default">
        <name>$prepended_code</name>
        <default>''</default>
        <docblock line="314">
          <description></description>
          <long-description></long-description>
          <tag line="314" name="var" description="String of prepended code, will be automagically whitelisted for functions, variables, globals, constants, classes, interfaces and traits if $auto_whitelist_trusted_code is true" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="321" namespace="PHPSandbox" package="Default">
        <name>$appended_code</name>
        <default>''</default>
        <docblock line="318">
          <description></description>
          <long-description></long-description>
          <tag line="318" name="var" description="String of appended code, will be automagically whitelisted for functions, variables, globals, constants, classes, interfaces and traits if $auto_whitelist_trusted_code is true" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="326" namespace="PHPSandbox" package="Default">
        <name>$prepare_time</name>
        <default>null</default>
        <docblock line="323">
          <description></description>
          <long-description></long-description>
          <tag line="323" name="var" description="Float of the number of microseconds it took to prepare the sandbox" type="float|null">
            <type by_reference="false">float</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="330" namespace="PHPSandbox" package="Default">
        <name>$execution_time</name>
        <default>null</default>
        <docblock line="327">
          <description></description>
          <long-description></long-description>
          <tag line="327" name="var" description="Float of the number of microseconds it took to execute the sandbox" type="float|null">
            <type by_reference="false">float</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="334" namespace="PHPSandbox" package="Default">
        <name>$preparsed_code</name>
        <default>''</default>
        <docblock line="331">
          <description></description>
          <long-description></long-description>
          <tag line="331" name="var" description="String of preparsed code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="338" namespace="PHPSandbox" package="Default">
        <name>$parsed_ast</name>
        <default>array()</default>
        <docblock line="335">
          <description></description>
          <long-description></long-description>
          <tag line="335" name="var" description="Array of parsed code broken down into AST tokens, for debugging and serialization purposes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="342" namespace="PHPSandbox" package="Default">
        <name>$prepared_code</name>
        <default>''</default>
        <docblock line="339">
          <description></description>
          <long-description></long-description>
          <tag line="339" name="var" description="String of prepared code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="346" namespace="PHPSandbox" package="Default">
        <name>$prepared_ast</name>
        <default>array()</default>
        <docblock line="343">
          <description></description>
          <long-description></long-description>
          <tag line="343" name="var" description="Array of prepared code broken down into AST tokens, for debugging and serialization purposes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="350" namespace="PHPSandbox" package="Default">
        <name>$generated_code</name>
        <default>''</default>
        <docblock line="347">
          <description></description>
          <long-description></long-description>
          <tag line="347" name="var" description="String of generated code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="354" namespace="PHPSandbox" package="Default">
        <name>$generated_closure</name>
        <default>null</default>
        <docblock line="351">
          <description></description>
          <long-description></long-description>
          <tag line="351" name="var" description="Closure generated by PHPSandbox execution, stored for future executions without the need to reparse and validate the code" type="\Closure|null">
            <type by_reference="false">\Closure</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="374" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="355">
          <description>PHPSandbox class constructor</description>
          <long-description></long-description>
          <tag line="355" name="example" description="$sandbox = new PHPSandbox\PHPSandbox;&#13;&#10;You can pass optional arrays of predefined functions, variables, etc. to the sandbox through the constructor"/>
          <tag line="355" name="param" description="Optional array of options to set for the sandbox" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of functions to define for the sandbox" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of variables to define for the sandbox" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of constants to define for the sandbox" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of namespaces to define for the sandbox" type="array" variable="$namespaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of aliases to define for the sandbox" type="array" variable="$aliases">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of superglobals to define for the sandbox" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of magic constants to define for the sandbox" type="array" variable="$magic_constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of classes to define for the sandbox" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of interfaces to define for the sandbox" type="array" variable="$interfaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="param" description="Optional array of traits to define for the sandbox" type="array" variable="$traits">
            <type by_reference="false">array</type>
          </tag>
          <tag line="355" name="return" description="The returned PHPSandbox variable" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="374">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="375">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="376">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="377">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="378">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="379">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="380">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="381">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="382">
          <name>$classes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="383">
          <name>$interfaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="384">
          <name>$traits</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPSandbox" line="419" package="Default">
        <name>create</name>
        <full_name>create</full_name>
        <docblock line="399">
          <description>PHPSandbox static factory method</description>
          <long-description>&lt;p&gt;You can pass optional arrays of predefined functions, variables, etc. to the sandbox through the constructor&lt;/p&gt;</long-description>
          <tag line="399" name="example" description="$sandbox = PHPSandbox\PHPSandbox::create();"/>
          <tag line="399" name="param" description="Optional array of options to set for the sandbox" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of functions to define for the sandbox" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of variables to define for the sandbox" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of constants to define for the sandbox" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of namespaces to define for the sandbox" type="array" variable="$namespaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of aliases to define for the sandbox" type="array" variable="$aliases">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of superglobals to define for the sandbox" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of magic constants to define for the sandbox" type="array" variable="$magic_constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of classes to define for the sandbox" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of interfaces to define for the sandbox" type="array" variable="$interfaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="param" description="Optional array of traits to define for the sandbox" type="array" variable="$traits">
            <type by_reference="false">array</type>
          </tag>
          <tag line="399" name="return" description="The returned PHPSandbox variable" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
        <argument line="419">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="420">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="421">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="422">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="423">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="424">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="425">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="426">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="427">
          <name>$classes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="428">
          <name>$interfaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="429">
          <name>$traits</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="442" package="Default">
        <name>__invoke</name>
        <full_name>__invoke</full_name>
        <docblock line="432">
          <description>PHPSandbox __invoke magic method</description>
          <long-description>&lt;p&gt;Besides the code or closure to be executed, you can also pass additional arguments that will overwrite the default values of their respective arguments defined in the code&lt;/p&gt;</long-description>
          <tag line="432" name="example" description="$sandbox = new PHPSandbox\PHPSandbox; $sandbox(function(){ echo 'Hello world!'; });"/>
          <tag line="432" name="param" description="The closure, callable or string of code to execute" type="\Closure|callable|string" variable="$code">
            <type by_reference="false">\Closure</type>
            <type by_reference="false">callable</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="432" name="return" description="The output of the executed sandboxed code" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="442">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="451" package="Default">
        <name>__sleep</name>
        <full_name>__sleep</full_name>
        <docblock line="445">
          <description>PHPSandbox __sleep magic method</description>
          <long-description></long-description>
          <tag line="445" name="example" description="$sandbox = new PHPSandbox\PHPSandbox; serialize($sandbox);"/>
          <tag line="445" name="return" description="An array of property keys to be serialized" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="459" package="Default">
        <name>__wakeup</name>
        <full_name>__wakeup</full_name>
        <docblock line="455">
          <description>PHPSandbox __wakeup magic method</description>
          <long-description></long-description>
          <tag line="455" name="example" description="$sandbox = unserialize($sandbox_string);"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="476" package="Default">
        <name>import</name>
        <full_name>import</full_name>
        <docblock line="464">
          <description>Import JSON template into sandbox</description>
          <long-description></long-description>
          <tag line="464" name="example" description="$sandbox-&gt;import(array('code' =&gt; 'echo &quot;Hello World!&quot;;'));"/>
          <tag line="464" name="example" description="$sandbox-&gt;import(file_get_contents(&quot;template.json&quot;));"/>
          <tag line="464" name="param" description="The JSON array or string template to import" type="array|string" variable="$template">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="464" name="param" description="Binary flags signifying which parts of the JSON template to import" type="int" variable="$import_flag">
            <type by_reference="false">int</type>
          </tag>
          <tag line="464" name="throws" description="Throws exception if JSON template could not be imported" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="464" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="476">
          <name>$template</name>
          <default></default>
          <type/>
        </argument>
        <argument line="476">
          <name>$import_flag</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="585" package="Default">
        <name>importJSON</name>
        <full_name>importJSON</full_name>
        <docblock line="571">
          <description>Import JSON template into sandbox</description>
          <long-description></long-description>
          <tag line="571" name="alias" description="import();"/>
          <tag line="571" name="example" description="$sandbox-&gt;importJSON(array('code' =&gt; 'echo &quot;Hello World!&quot;;'));"/>
          <tag line="571" name="example" description="$sandbox-&gt;importJSON(file_get_contents(&quot;template.json&quot;));"/>
          <tag line="571" name="param" description="The JSON array or string template to import" type="array|string" variable="$template">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="571" name="param" description="Binary flags signifying which parts of the JSON template to import" type="int" variable="$import_flag">
            <type by_reference="false">int</type>
          </tag>
          <tag line="571" name="throws" description="Throws exception if JSON template could not be imported" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="571" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="585">
          <name>$template</name>
          <default></default>
          <type/>
        </argument>
        <argument line="585">
          <name>$import_flag</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="591" package="Default">
        <name>get_name</name>
        <full_name>get_name</full_name>
        <docblock line="588">
          <description>Get name of PHPSandbox variable</description>
          <long-description></long-description>
          <tag line="588" name="return" description="The name of the PHPSandbox variable" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="609" package="Default">
        <name>set_option</name>
        <full_name>set_option</full_name>
        <docblock line="594">
          <description>Set PHPSandbox option</description>
          <long-description>&lt;p&gt;You can pass an $option name to set to $value, an array of $option names to set to $value, or an associative array of $option names and their values to set.&lt;/p&gt;</long-description>
          <tag line="594" name="example" description="$sandbox-&gt;set_option(array('allow_functions' =&gt; true));"/>
          <tag line="594" name="example" description="$sandbox-&gt;set_option(array('allow_functions', 'allow_classes'), true);"/>
          <tag line="594" name="example" description="$sandbox-&gt;set_option('allow_functions', true);"/>
          <tag line="594" name="param" description="String or array of strings or associative array of keys of option names to set $value to" type="string|array" variable="$option">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="594" name="param" description="Boolean, integer or null $value to set $option to (optional)" type="bool|int|null" variable="$value">
            <type by_reference="false">bool</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="594" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="609">
          <name>$option</name>
          <default></default>
          <type/>
        </argument>
        <argument line="609">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="721" package="Default">
        <name>set_options</name>
        <full_name>set_options</full_name>
        <docblock line="708">
          <description>Set PHPSandbox options by array</description>
          <long-description>&lt;p&gt;You can pass an array of option names to set to $value, or an associative array of option names and their values to set.&lt;/p&gt;</long-description>
          <tag line="708" name="example" description="$sandbox-&gt;set_option(array('allow_functions' =&gt; true));"/>
          <tag line="708" name="example" description="$sandbox-&gt;set_option(array('allow_functions', 'allow_classes'), true);"/>
          <tag line="708" name="param" description="Array of strings or associative array of keys of option names to set $value to, or JSON array or string template to import" type="array|string" variable="$options">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="708" name="param" description="Boolean, integer or null $value to set $option to (optional)" type="bool|int|null" variable="$value">
            <type by_reference="false">bool</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="708" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="721">
          <name>$options</name>
          <default></default>
          <type/>
        </argument>
        <argument line="721">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="736" package="Default">
        <name>reset_options</name>
        <full_name>reset_options</full_name>
        <docblock line="730">
          <description>Reset PHPSandbox options to their default values</description>
          <long-description></long-description>
          <tag line="730" name="example" description="$sandbox-&gt;reset_options();"/>
          <tag line="730" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="754" package="Default">
        <name>get_option</name>
        <full_name>get_option</full_name>
        <docblock line="744">
          <description>Get PHPSandbox option</description>
          <long-description>&lt;p&gt;You pass a string $option name to get its associated value&lt;/p&gt;</long-description>
          <tag line="744" name="example" description="$sandbox-&gt;get_option('allow_functions');"/>
          <tag line="744" name="param" description="String of $option name to get" type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="744" name="return" description="Returns the value of the requested option" type="boolean|int|null">
            <type by_reference="false">boolean</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="754">
          <name>$option</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="853" package="Default">
        <name>get_prepended_code</name>
        <full_name>get_prepended_code</full_name>
        <docblock line="850">
          <description>Get PHPSandbox prepended code</description>
          <long-description></long-description>
          <tag line="850" name="return" description="Returns a string of the prepended code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="859" package="Default">
        <name>get_appended_code</name>
        <full_name>get_appended_code</full_name>
        <docblock line="856">
          <description>Get PHPSandbox appended code</description>
          <long-description></long-description>
          <tag line="856" name="return" description="Returns a string of the appended code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="865" package="Default">
        <name>get_preparsed_code</name>
        <full_name>get_preparsed_code</full_name>
        <docblock line="862">
          <description>Get PHPSandbox preparsed code</description>
          <long-description></long-description>
          <tag line="862" name="return" description="Returns a string of the preparsed code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="871" package="Default">
        <name>get_parsed_ast</name>
        <full_name>get_parsed_ast</full_name>
        <docblock line="868">
          <description>Get PHPSandbox parsed AST array</description>
          <long-description></long-description>
          <tag line="868" name="return" description="Returns an array of the parsed AST code" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="877" package="Default">
        <name>get_prepared_code</name>
        <full_name>get_prepared_code</full_name>
        <docblock line="874">
          <description>Get PHPSandbox prepared code</description>
          <long-description></long-description>
          <tag line="874" name="return" description="Returns a string of the prepared code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="883" package="Default">
        <name>get_prepared_ast</name>
        <full_name>get_prepared_ast</full_name>
        <docblock line="880">
          <description>Get PHPSandbox parsed AST array</description>
          <long-description></long-description>
          <tag line="880" name="return" description="Returns an array of the parsed AST code" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="889" package="Default">
        <name>get_generated_code</name>
        <full_name>get_generated_code</full_name>
        <docblock line="886">
          <description>Get PHPSandbox generated code</description>
          <long-description></long-description>
          <tag line="886" name="return" description="Returns a string of the generated code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="895" package="Default">
        <name>get_generated_closure</name>
        <full_name>get_generated_closure</full_name>
        <docblock line="892">
          <description>Get PHPSandbox generated closure</description>
          <long-description></long-description>
          <tag line="892" name="return" description="Returns the generated closure" type="\Closure">
            <type by_reference="false">\Closure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="902" package="Default">
        <name>get_closure</name>
        <full_name>get_closure</full_name>
        <docblock line="898">
          <description>Get PHPSandbox generated closure</description>
          <long-description></long-description>
          <tag line="898" name="alias" description="get_generated_closure()"/>
          <tag line="898" name="return" description="Returns the generated closure" type="\Closure">
            <type by_reference="false">\Closure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="911" package="Default">
        <name>_get_defined_functions</name>
        <full_name>_get_defined_functions</full_name>
        <docblock line="905">
          <description>Get PHPSandbox redefined functions in place of get_defined_functions().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="905" name="param" description="Array result from get_defined_functions() is passed here" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="905" name="return" description="Returns the redefined functions array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="911">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="944" package="Default">
        <name>_get_defined_vars</name>
        <full_name>_get_defined_vars</full_name>
        <docblock line="938">
          <description>Get PHPSandbox redefined variables in place of get_defined_vars().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="938" name="param" description="Array result from get_defined_vars() is passed here" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="938" name="return" description="Returns the redefined variables array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="944">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="956" package="Default">
        <name>_get_superglobal</name>
        <full_name>_get_superglobal</full_name>
        <docblock line="950">
          <description>Get PHPSandbox redefined superglobal.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="950" name="param" description="Requested superglobal name (e.g. _GET, _POST, etc.)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="950" name="return" description="Returns the redefined superglobal" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="956">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1000" package="Default">
        <name>_get_magic_const</name>
        <full_name>_get_magic_const</full_name>
        <docblock line="994">
          <description>Get PHPSandbox redefined magic constant.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="994" name="param" description="Requested magic constant name (e.g. __FILE__, __LINE__, etc.)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="994" name="return" description="Returns the redefined magic constant" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1000">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1017" package="Default">
        <name>_get_defined_constants</name>
        <full_name>_get_defined_constants</full_name>
        <docblock line="1011">
          <description>Get PHPSandbox redefined constants in place of get_defined_constants().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="1011" name="param" description="Array result from get_defined_constants() is passed here" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1011" name="return" description="Returns the redefined constants" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1017">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1048" package="Default">
        <name>_get_declared_classes</name>
        <full_name>_get_declared_classes</full_name>
        <docblock line="1042">
          <description>Get PHPSandbox redefined classes in place of get_declared_classes().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="1042" name="param" description="Array result from get_declared_classes() is passed here" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1042" name="return" description="Returns the redefined classes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1048">
          <name>$classes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1093" package="Default">
        <name>_get_declared_interfaces</name>
        <full_name>_get_declared_interfaces</full_name>
        <docblock line="1087">
          <description>Get PHPSandbox redefined interfaces in place of get_declared_interfaces().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="1087" name="param" description="Array result from get_declared_interfaces() is passed here" type="array" variable="$interfaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1087" name="return" description="Returns the redefined interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1093">
          <name>$interfaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1138" package="Default">
        <name>_get_declared_traits</name>
        <full_name>_get_declared_traits</full_name>
        <docblock line="1132">
          <description>Get PHPSandbox redefined traits in place of get_declared_traits().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="1132" name="param" description="Array result from get_declared_traits() is passed here" type="array" variable="$traits">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1132" name="return" description="Returns the redefined traits" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1138">
          <name>$traits</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1183" package="Default">
        <name>_func_get_args</name>
        <full_name>_func_get_args</full_name>
        <docblock line="1177">
          <description>Get PHPSandbox redefined function arguments array</description>
          <long-description></long-description>
          <tag line="1177" name="param" description="Array result from func_get_args() is passed here" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1177" name="return" description="Returns the redefined arguments array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1183">
          <name>$arguments</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1199" package="Default">
        <name>_func_get_arg</name>
        <full_name>_func_get_arg</full_name>
        <docblock line="1191">
          <description>Get PHPSandbox redefined function argument</description>
          <long-description></long-description>
          <tag line="1191" name="param" description="Array result from func_get_args() is passed here" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1191" name="param" description="Requested func_get_arg index is passed here" type="int" variable="$index">
            <type by_reference="false">int</type>
          </tag>
          <tag line="1191" name="return" description="Returns the redefined argument" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="1199">
          <name>$arguments</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="1199">
          <name>$index</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1211" package="Default">
        <name>_func_num_args</name>
        <full_name>_func_num_args</full_name>
        <docblock line="1205">
          <description>Get PHPSandbox redefined number of function arguments</description>
          <long-description></long-description>
          <tag line="1205" name="param" description="Array result from func_get_args() is passed here" type="array" variable="$arguments">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1205" name="return" description="Returns the redefined number of function arguments" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="1211">
          <name>$arguments</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1226" package="Default">
        <name>call_func</name>
        <full_name>call_func</full_name>
        <docblock line="1220">
          <description>Get PHPSandbox redefined function.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="1220" name="throws" description="Will throw exception if invalid function requested" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1220" name="return" description="Returns the redefined function result" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1258" package="Default">
        <name>define</name>
        <full_name>define</full_name>
        <docblock line="1243">
          <description>Define PHPSandbox definitions, such as functions, constants, namespaces, etc.</description>
          <long-description>&lt;p&gt;You can pass a string of the $type, $name and $value, or pass an associative array of definitions types and
an associative array of their corresponding values&lt;/p&gt;</long-description>
          <tag line="1243" name="example" description="$sandbox-&gt;define('functions', 'test', function(){ echo 'test'; });"/>
          <tag line="1243" name="example" description="$sandbox-&gt;define(array('functions' =&gt; array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="1243" name="param" description="Associative array or string of definition type to define" type="string|array" variable="$type">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1243" name="param" description="Associative array or string of definition name to define" type="string|array|null" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="1243" name="param" description="Value of definition to define" type="mixed|null" variable="$value">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="1243" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1258">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1258">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="1258">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1311" package="Default">
        <name>undefine</name>
        <full_name>undefine</full_name>
        <docblock line="1297">
          <description>Undefine PHPSandbox definitions, such as functions, constants, namespaces, etc.</description>
          <long-description>&lt;p&gt;You can pass a string of the $type and $name to undefine, or pass an associative array of definitions types
and an array of key names to undefine&lt;/p&gt;</long-description>
          <tag line="1297" name="example" description="$sandbox-&gt;undefine('functions', 'test');"/>
          <tag line="1297" name="example" description="$sandbox-&gt;undefine(array('functions' =&gt; array('test'));"/>
          <tag line="1297" name="param" description="Associative array or string of definition type to undefine" type="string|array" variable="$type">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1297" name="param" description="Associative array or string of definition name to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1297" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1311">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1311">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1373" package="Default">
        <name>define_func</name>
        <full_name>define_func</full_name>
        <docblock line="1354">
          <description>Define PHPSandbox function</description>
          <long-description>&lt;p&gt;You can pass the function $name and $function closure or callable to define, or an associative array of
functions to define, which can have callable values or arrays of the function callable and $pass_sandbox flag&lt;/p&gt;</long-description>
          <tag line="1354" name="example" description="$sandbox-&gt;define_func('test', function(){ echo 'test'; });"/>
          <tag line="1354" name="example" description="$sandbox-&gt;define_func(array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="1354" name="example" description="$sandbox-&gt;define_func(array('test' =&gt; array(function(){ echo 'test'; }, true)));"/>
          <tag line="1354" name="param" description="Associative array or string of function $name to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1354" name="param" description="Callable to define $function to" type="callable" variable="$function">
            <type by_reference="false">callable</type>
          </tag>
          <tag line="1354" name="param" description="Pass PHPSandbox instance to defined function when called? Default is false" type="bool" variable="$pass_sandbox">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="1354" name="throws" description="Throws exception if unnamed or uncallable $function is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1354" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1373">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1373">
          <name>$function</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1373">
          <name>$pass_sandbox</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1405" package="Default">
        <name>define_funcs</name>
        <full_name>define_funcs</full_name>
        <docblock line="1395">
          <description>Define PHPSandbox functions by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of functions to define&lt;/p&gt;</long-description>
          <tag line="1395" name="example" description="$sandbox-&gt;define_funcs(array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="1395" name="param" description="Associative array of $functions to define" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1395" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1405">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1417" package="Default">
        <name>has_defined_funcs</name>
        <full_name>has_defined_funcs</full_name>
        <docblock line="1411">
          <description>Query whether PHPSandbox instance has defined functions</description>
          <long-description></long-description>
          <tag line="1411" name="example" description="$sandbox-&gt;has_defined_funcs(); //returns number of defined functions, or zero if none defined"/>
          <tag line="1411" name="return" description="Returns the number of functions this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1428" package="Default">
        <name>is_defined_func</name>
        <full_name>is_defined_func</full_name>
        <docblock line="1420">
          <description>Check if PHPSandbox instance has $name function defined</description>
          <long-description></long-description>
          <tag line="1420" name="example" description="$sandbox-&gt;is_defined_func('test');"/>
          <tag line="1420" name="param" description="String of function $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1420" name="return" description="Returns true if PHPSandbox instance has defined function, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1428">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1444" package="Default">
        <name>undefine_func</name>
        <full_name>undefine_func</full_name>
        <docblock line="1432">
          <description>Undefine PHPSandbox function</description>
          <long-description>&lt;p&gt;You can pass a string of function $name to undefine, or pass an array of function names to undefine&lt;/p&gt;</long-description>
          <tag line="1432" name="example" description="$sandbox-&gt;undefine_func('test');"/>
          <tag line="1432" name="example" description="$sandbox-&gt;undefine_func(array('test', 'test2'));"/>
          <tag line="1432" name="param" description="String of function name or array of function names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1432" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1444">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1466" package="Default">
        <name>undefine_funcs</name>
        <full_name>undefine_funcs</full_name>
        <docblock line="1454">
          <description>Undefine PHPSandbox functions by array</description>
          <long-description>&lt;p&gt;You can pass an array of function names to undefine, or an empty array or null argument to undefine all functions&lt;/p&gt;</long-description>
          <tag line="1454" name="example" description="$sandbox-&gt;undefine_funcs(array('test', 'test2'));"/>
          <tag line="1454" name="example" description="$sandbox-&gt;undefine_funcs(); //WILL UNDEFINE ALL FUNCTIONS!"/>
          <tag line="1454" name="param" description="Array of function names to undefine. Passing an empty array or no argument will result in undefining all functions" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1454" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1466">
          <name>$functions</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1491" package="Default">
        <name>define_var</name>
        <full_name>define_var</full_name>
        <docblock line="1476">
          <description>Define PHPSandbox variable</description>
          <long-description>&lt;p&gt;You can pass the variable $name and $value to define, or an associative array of variables to define&lt;/p&gt;</long-description>
          <tag line="1476" name="example" description="$sandbox-&gt;define_var('test', 1);"/>
          <tag line="1476" name="example" description="$sandbox-&gt;define_var(array('test' =&gt; 1));"/>
          <tag line="1476" name="param" description="String of variable $name or associative array to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1476" name="param" description="Value to define variable to" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1476" name="throws" description="Throws exception if unnamed variable is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1476" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1491">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1491">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1511" package="Default">
        <name>define_vars</name>
        <full_name>define_vars</full_name>
        <docblock line="1501">
          <description>Define PHPSandbox variables by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of variables to define&lt;/p&gt;</long-description>
          <tag line="1501" name="example" description="$sandbox-&gt;define_vars(array('test' =&gt; 1));"/>
          <tag line="1501" name="param" description="Associative array of $variables to define" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1501" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1511">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1523" package="Default">
        <name>has_defined_vars</name>
        <full_name>has_defined_vars</full_name>
        <docblock line="1517">
          <description>Query whether PHPSandbox instance has defined variables</description>
          <long-description></long-description>
          <tag line="1517" name="example" description="$sandbox-&gt;has_defined_vars(); //returns number of defined variables, or zero if none defined"/>
          <tag line="1517" name="return" description="Returns the number of variables this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1534" package="Default">
        <name>is_defined_var</name>
        <full_name>is_defined_var</full_name>
        <docblock line="1526">
          <description>Check if PHPSandbox instance has $name variable defined</description>
          <long-description></long-description>
          <tag line="1526" name="example" description="$sandbox-&gt;is_defined_var('test');"/>
          <tag line="1526" name="param" description="String of variable $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1526" name="return" description="Returns true if PHPSandbox instance has defined variable, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1534">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1549" package="Default">
        <name>undefine_var</name>
        <full_name>undefine_var</full_name>
        <docblock line="1537">
          <description>Undefine PHPSandbox variable</description>
          <long-description>&lt;p&gt;You can pass a string of variable $name to undefine, or an array of variable names to undefine&lt;/p&gt;</long-description>
          <tag line="1537" name="example" description="$sandbox-&gt;undefine_var('test');"/>
          <tag line="1537" name="example" description="$sandbox-&gt;undefine_var(array('test', 'test2'));"/>
          <tag line="1537" name="param" description="String of variable name or an array of variable names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1537" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1549">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1570" package="Default">
        <name>undefine_vars</name>
        <full_name>undefine_vars</full_name>
        <docblock line="1558">
          <description>Undefine PHPSandbox variables by array</description>
          <long-description>&lt;p&gt;You can pass an array of variable names to undefine, or an empty array or null argument to undefine all variables&lt;/p&gt;</long-description>
          <tag line="1558" name="example" description="$sandbox-&gt;undefine_vars(array('test', 'test2'));"/>
          <tag line="1558" name="example" description="$sandbox-&gt;undefine_vars(); //WILL UNDEFINE ALL VARIABLES!"/>
          <tag line="1558" name="param" description="Array of variable names to undefine. Passing an empty array or no argument will result in undefining all variables" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1558" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1570">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1597" package="Default">
        <name>define_superglobal</name>
        <full_name>define_superglobal</full_name>
        <docblock line="1580">
          <description>Define PHPSandbox superglobal</description>
          <long-description>&lt;p&gt;You can pass the superglobal $name and $value to define, or an associative array of superglobals to define, or a third variable to define the $key&lt;/p&gt;</long-description>
          <tag line="1580" name="example" description="$sandbox-&gt;define_superglobal('_GET',  array('page' =&gt; 1));"/>
          <tag line="1580" name="example" description="$sandbox-&gt;define_superglobal(array('_GET' =&gt; array('page' =&gt; 1)));"/>
          <tag line="1580" name="example" description="$sandbox-&gt;define_superglobal('_GET', 'page', 1);"/>
          <tag line="1580" name="param" description="String of superglobal $name or associative array of superglobal names to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1580" name="param" description="Value to define superglobal to, can be callable" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1580" name="throws" description="Throws exception if unnamed superglobal is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1580" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1597">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1597">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1624" package="Default">
        <name>define_superglobals</name>
        <full_name>define_superglobals</full_name>
        <docblock line="1614">
          <description>Define PHPSandbox superglobals by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of superglobals to define&lt;/p&gt;</long-description>
          <tag line="1614" name="example" description="$sandbox-&gt;define_superglobals(array('_GET' =&gt; array('page' =&gt; 1)));"/>
          <tag line="1614" name="param" description="Associative array of $superglobals to define" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1614" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1624">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1640" package="Default">
        <name>has_defined_superglobals</name>
        <full_name>has_defined_superglobals</full_name>
        <docblock line="1630">
          <description>Query whether PHPSandbox instance has defined superglobals, or if superglobal $name has defined keys</description>
          <long-description></long-description>
          <tag line="1630" name="example" description="$sandbox-&gt;has_defined_superglobals(); //returns number of defined superglobals, or zero if none defined"/>
          <tag line="1630" name="example" description="$sandbox-&gt;has_defined_superglobals('_GET'); //returns number of defined superglobal _GET keys, or zero if none defined"/>
          <tag line="1630" name="param" description="String of superglobal $name to check for keys" type="string|null" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="1630" name="return" description="Returns the number of superglobals or superglobal keys this instance has defined, or false if invalid superglobal name specified" type="int|bool">
            <type by_reference="false">int</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1640">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1655" package="Default">
        <name>is_defined_superglobal</name>
        <full_name>is_defined_superglobal</full_name>
        <docblock line="1644">
          <description>Check if PHPSandbox instance has $name superglobal defined, or if superglobal $name key is defined</description>
          <long-description></long-description>
          <tag line="1644" name="example" description="$sandbox-&gt;is_defined_superglobal('_GET');"/>
          <tag line="1644" name="example" description="$sandbox-&gt;is_defined_superglobal('_GET', 'page');"/>
          <tag line="1644" name="param" description="String of superglobal $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1644" name="param" description="String of key to to query in superglobal" type="string|null" variable="$key">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="1644" name="return" description="Returns true if PHPSandbox instance has defined superglobal, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1655">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1655">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1675" package="Default">
        <name>undefine_superglobal</name>
        <full_name>undefine_superglobal</full_name>
        <docblock line="1659">
          <description>Undefine PHPSandbox superglobal or superglobal key</description>
          <long-description>&lt;p&gt;You can pass a string of superglobal $name to undefine, or a superglobal $key to undefine, or an array of
superglobal names to undefine, or an an associative array of superglobal names and keys to undefine&lt;/p&gt;</long-description>
          <tag line="1659" name="example" description="$sandbox-&gt;undefine_superglobal('_GET');"/>
          <tag line="1659" name="example" description="$sandbox-&gt;undefine_superglobal('_GET', 'page');"/>
          <tag line="1659" name="example" description="$sandbox-&gt;undefine_superglobal(array('_GET', '_POST'));"/>
          <tag line="1659" name="param" description="String of superglobal $name, or array of superglobal names, or associative array of superglobal names and keys to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1659" name="param" description="String of superglobal $key to undefine" type="string|null" variable="$key">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="1659" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1675">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1675">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1704" package="Default">
        <name>undefine_superglobals</name>
        <full_name>undefine_superglobals</full_name>
        <docblock line="1689">
          <description>Undefine PHPSandbox superglobals by array</description>
          <long-description>&lt;p&gt;You can pass an array of superglobal names to undefine, or an associative array of superglobals names and key
to undefine, or an empty array or null to undefine all superglobals&lt;/p&gt;</long-description>
          <tag line="1689" name="example" description="$sandbox-&gt;undefine_superglobals(array('_GET', '_POST'));"/>
          <tag line="1689" name="example" description="$sandbox-&gt;undefine_superglobals(array('_GET' =&gt; 'page', '_POST' =&gt; 'page'));"/>
          <tag line="1689" name="example" description="$sandbox-&gt;undefine_superglobals(); //WILL UNDEFINE ALL SUPERGLOBALS!"/>
          <tag line="1689" name="param" description="Associative array of superglobal names and keys or array of superglobal names to undefine" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1689" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1704">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1730" package="Default">
        <name>define_const</name>
        <full_name>define_const</full_name>
        <docblock line="1715">
          <description>Define PHPSandbox constant</description>
          <long-description>&lt;p&gt;You can pass the constant $name and $value to define, or an associative array of constants to define&lt;/p&gt;</long-description>
          <tag line="1715" name="example" description="$sandbox-&gt;define_const('TEST', 1);"/>
          <tag line="1715" name="example" description="$sandbox-&gt;define_const(array('TEST' =&gt; 1));"/>
          <tag line="1715" name="param" description="String of constant $name or associative array to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1715" name="param" description="Value to define constant to" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1715" name="throws" description="Throws exception if unnamed constant is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1715" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1730">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1730">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1750" package="Default">
        <name>define_consts</name>
        <full_name>define_consts</full_name>
        <docblock line="1740">
          <description>Define PHPSandbox constants by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of constants to define&lt;/p&gt;</long-description>
          <tag line="1740" name="example" description="$sandbox-&gt;define_consts(array('test' =&gt; 1));"/>
          <tag line="1740" name="param" description="Associative array of $constants to define" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1740" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1750">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1762" package="Default">
        <name>has_defined_consts</name>
        <full_name>has_defined_consts</full_name>
        <docblock line="1756">
          <description>Query whether PHPSandbox instance has defined constants</description>
          <long-description></long-description>
          <tag line="1756" name="example" description="$sandbox-&gt;has_defined_consts(); //returns number of defined constants, or zero if none defined"/>
          <tag line="1756" name="return" description="Returns the number of constants this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1773" package="Default">
        <name>is_defined_const</name>
        <full_name>is_defined_const</full_name>
        <docblock line="1765">
          <description>Check if PHPSandbox instance has $name constant defined</description>
          <long-description></long-description>
          <tag line="1765" name="example" description="$sandbox-&gt;is_defined_const('test');"/>
          <tag line="1765" name="param" description="String of constant $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1765" name="return" description="Returns true if PHPSandbox instance has defined constant, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1773">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1788" package="Default">
        <name>undefine_const</name>
        <full_name>undefine_const</full_name>
        <docblock line="1776">
          <description>Undefine PHPSandbox constant</description>
          <long-description>&lt;p&gt;You can pass a string of constant $name to undefine, or an array of constant names to undefine&lt;/p&gt;</long-description>
          <tag line="1776" name="example" description="$sandbox-&gt;undefine_const('test');"/>
          <tag line="1776" name="example" description="$sandbox-&gt;undefine_const(array('test', 'test2'));"/>
          <tag line="1776" name="param" description="String of constant name or array of constant names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1776" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1788">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1809" package="Default">
        <name>undefine_consts</name>
        <full_name>undefine_consts</full_name>
        <docblock line="1797">
          <description>Undefine PHPSandbox constants by array</description>
          <long-description>&lt;p&gt;You can pass an array of constant names to undefine, or an empty array or null argument to undefine all constants&lt;/p&gt;</long-description>
          <tag line="1797" name="example" description="$sandbox-&gt;undefine_consts(array('test', 'test2'));"/>
          <tag line="1797" name="example" description="$sandbox-&gt;undefine_consts(); //WILL UNDEFINE ALL CONSTANTS!"/>
          <tag line="1797" name="param" description="Array of constant names to undefine. Passing an empty array or no argument will result in undefining all constants" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1797" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1809">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1834" package="Default">
        <name>define_magic_const</name>
        <full_name>define_magic_const</full_name>
        <docblock line="1819">
          <description>Define PHPSandbox magic constant</description>
          <long-description>&lt;p&gt;You can pass the magic constant $name and $value to define, or an associative array of magic constants to define&lt;/p&gt;</long-description>
          <tag line="1819" name="example" description="$sandbox-&gt;define_magic_const('__LINE__', 1);"/>
          <tag line="1819" name="example" description="$sandbox-&gt;define_magic_const(array('__LINE__' =&gt; 1));"/>
          <tag line="1819" name="param" description="String of magic constant $name or associative array to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1819" name="param" description="Value to define magic constant to, can be callable" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1819" name="throws" description="Throws exception if unnamed magic constant is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1819" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1834">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1834">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1855" package="Default">
        <name>define_magic_consts</name>
        <full_name>define_magic_consts</full_name>
        <docblock line="1845">
          <description>Define PHPSandbox magic constants by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of magic constants to define&lt;/p&gt;</long-description>
          <tag line="1845" name="example" description="$sandbox-&gt;define_magic_consts(array('__LINE__' =&gt; 1));"/>
          <tag line="1845" name="param" description="Associative array of $magic_constants to define" type="array" variable="$magic_constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1845" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1855">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1867" package="Default">
        <name>has_defined_magic_consts</name>
        <full_name>has_defined_magic_consts</full_name>
        <docblock line="1861">
          <description>Query whether PHPSandbox instance has defined magic constants</description>
          <long-description></long-description>
          <tag line="1861" name="example" description="$sandbox-&gt;has_defined_magic_consts(); //returns number of defined magic constants, or zero if none defined"/>
          <tag line="1861" name="return" description="Returns the number of magic constants this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1878" package="Default">
        <name>is_defined_magic_const</name>
        <full_name>is_defined_magic_const</full_name>
        <docblock line="1870">
          <description>Check if PHPSandbox instance has $name magic constant defined</description>
          <long-description></long-description>
          <tag line="1870" name="example" description="$sandbox-&gt;is_defined_magic_const('__LINE__');"/>
          <tag line="1870" name="param" description="String of magic constant $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1870" name="return" description="Returns true if PHPSandbox instance has defined magic constant, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1878">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1894" package="Default">
        <name>undefine_magic_const</name>
        <full_name>undefine_magic_const</full_name>
        <docblock line="1882">
          <description>Undefine PHPSandbox magic constant</description>
          <long-description>&lt;p&gt;You can pass an a string of magic constant $name to undefine, or array of magic constant names to undefine&lt;/p&gt;</long-description>
          <tag line="1882" name="example" description="$sandbox-&gt;undefine_magic_const('__LINE__');"/>
          <tag line="1882" name="example" description="$sandbox-&gt;undefine_magic_const(array('__LINE__', '__FILE__'));"/>
          <tag line="1882" name="param" description="String of magic constant name, or array of magic constant names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1882" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1894">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1916" package="Default">
        <name>undefine_magic_consts</name>
        <full_name>undefine_magic_consts</full_name>
        <docblock line="1904">
          <description>Undefine PHPSandbox magic constants by array</description>
          <long-description>&lt;p&gt;You can pass an array of magic constant names to undefine, or an empty array or null argument to undefine all magic constants&lt;/p&gt;</long-description>
          <tag line="1904" name="example" description="$sandbox-&gt;undefine_magic_consts(array('__LINE__', '__FILE__'));"/>
          <tag line="1904" name="example" description="$sandbox-&gt;undefine_magic_consts(); //WILL UNDEFINE ALL MAGIC CONSTANTS!"/>
          <tag line="1904" name="param" description="Array of magic constant names to undefine. Passing an empty array or no argument will result in undefining all magic constants" type="array" variable="$magic_constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1904" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1916">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1940" package="Default">
        <name>define_namespace</name>
        <full_name>define_namespace</full_name>
        <docblock line="1926">
          <description>Define PHPSandbox namespace</description>
          <long-description>&lt;p&gt;You can pass the namespace $name and $value to define, or an array of namespaces to define&lt;/p&gt;</long-description>
          <tag line="1926" name="example" description="$sandbox-&gt;define_namespace('Foo');"/>
          <tag line="1926" name="example" description="$sandbox-&gt;define_namespace(array('Foo', 'Bar'));"/>
          <tag line="1926" name="param" description="String of namespace $name, or an array of namespace names to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1926" name="throws" description="Throws exception if unnamed namespace is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="1926" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1940">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1961" package="Default">
        <name>define_namespaces</name>
        <full_name>define_namespaces</full_name>
        <docblock line="1951">
          <description>Define PHPSandbox namespaces by array</description>
          <long-description>&lt;p&gt;You can pass an array of namespaces to define&lt;/p&gt;</long-description>
          <tag line="1951" name="example" description="$sandbox-&gt;define_namespaces(array('Foo', 'Bar'));"/>
          <tag line="1951" name="param" description="Array of $namespaces to define" type="array" variable="$namespaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1951" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1961">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1973" package="Default">
        <name>has_defined_namespaces</name>
        <full_name>has_defined_namespaces</full_name>
        <docblock line="1967">
          <description>Query whether PHPSandbox instance has defined namespaces</description>
          <long-description></long-description>
          <tag line="1967" name="example" description="$sandbox-&gt;has_defined_namespaces(); //returns number of defined namespaces, or zero if none defined"/>
          <tag line="1967" name="return" description="Returns the number of namespaces this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1984" package="Default">
        <name>is_defined_namespace</name>
        <full_name>is_defined_namespace</full_name>
        <docblock line="1976">
          <description>Check if PHPSandbox instance has $name namespace defined</description>
          <long-description></long-description>
          <tag line="1976" name="example" description="$sandbox-&gt;is_defined_namespace('Foo');"/>
          <tag line="1976" name="param" description="String of namespace $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1976" name="return" description="Returns true if PHPSandbox instance has defined namespace, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="1984">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2000" package="Default">
        <name>undefine_namespace</name>
        <full_name>undefine_namespace</full_name>
        <docblock line="1988">
          <description>Undefine PHPSandbox namespace</description>
          <long-description>&lt;p&gt;You can pass a string of namespace $name to undefine, or an array of namespace names to undefine&lt;/p&gt;</long-description>
          <tag line="1988" name="example" description="$sandbox-&gt;undefine_namespace('Foo');"/>
          <tag line="1988" name="example" description="$sandbox-&gt;undefine_namespace(array('Foo', 'Bar'));"/>
          <tag line="1988" name="param" description="String of namespace $name, or an array of namespace names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="1988" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2000">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2022" package="Default">
        <name>undefine_namespaces</name>
        <full_name>undefine_namespaces</full_name>
        <docblock line="2010">
          <description>Undefine PHPSandbox namespaces by array</description>
          <long-description>&lt;p&gt;You can pass an array of namespace names to undefine, or an empty array or null argument to undefine all namespaces&lt;/p&gt;</long-description>
          <tag line="2010" name="example" description="$sandbox-&gt;undefine_namespaces(array('Foo', 'Bar'));"/>
          <tag line="2010" name="example" description="$sandbox-&gt;undefine_namespaces(); //WILL UNDEFINE ALL NAMESPACES!"/>
          <tag line="2010" name="param" description="Array of namespace names to undefine. Passing an empty array or no argument will result in undefining all namespaces" type="array" variable="$namespaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2010" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2022">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2051" package="Default">
        <name>define_alias</name>
        <full_name>define_alias</full_name>
        <docblock line="2032">
          <description>Define PHPSandbox alias</description>
          <long-description>&lt;p&gt;You can pass the namespace $name and $alias to use, an array of namespaces to use, or an associative array of namespaces to use and their aliases&lt;/p&gt;</long-description>
          <tag line="2032" name="example" description="$sandbox-&gt;define_alias('Foo');  //use Foo;"/>
          <tag line="2032" name="example" description="$sandbox-&gt;define_alias('Foo', 'Bar');  //use Foo as Bar;"/>
          <tag line="2032" name="example" description="$sandbox-&gt;define_alias(array('Foo', 'Bar')); //use Foo; use Bar;"/>
          <tag line="2032" name="example" description="$sandbox-&gt;define_alias(array('Foo' =&gt; 'Bar')); //use Foo as Bar;"/>
          <tag line="2032" name="param" description="String of namespace $name to use, or  or an array of namespaces to use, or an associative array of namespaces and their aliases to use" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2032" name="param" description="String of $alias to use" type="string|null" variable="$alias">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="2032" name="throws" description="Throws exception if unnamed namespace is used" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2032" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2051">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2051">
          <name>$alias</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2076" package="Default">
        <name>define_aliases</name>
        <full_name>define_aliases</full_name>
        <docblock line="2062">
          <description>Define PHPSandbox aliases by array</description>
          <long-description>&lt;p&gt;You can pass an array of namespaces to use, or an associative array of namespaces to use and their aliases&lt;/p&gt;</long-description>
          <tag line="2062" name="example" description="$sandbox-&gt;define_aliases(array('Foo', 'Bar')); //use Foo; use Bar;"/>
          <tag line="2062" name="example" description="$sandbox-&gt;define_aliases(array('Foo' =&gt; 'Bar')); //use Foo as Bar;"/>
          <tag line="2062" name="param" description="Array of namespaces to use, or an associative array of namespaces and their aliases to use" type="array" variable="$aliases">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2062" name="throws" description="Throws exception if unnamed namespace is used" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2062" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2076">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2088" package="Default">
        <name>has_defined_aliases</name>
        <full_name>has_defined_aliases</full_name>
        <docblock line="2082">
          <description>Query whether PHPSandbox instance has defined aliases</description>
          <long-description></long-description>
          <tag line="2082" name="example" description="$sandbox-&gt;has_defined_aliases(); //returns number of defined aliases, or zero if none defined"/>
          <tag line="2082" name="return" description="Returns the number of aliases this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2099" package="Default">
        <name>is_defined_alias</name>
        <full_name>is_defined_alias</full_name>
        <docblock line="2091">
          <description>Check if PHPSandbox instance has $name alias defined</description>
          <long-description></long-description>
          <tag line="2091" name="example" description="$sandbox-&gt;is_defined_alias('Foo');"/>
          <tag line="2091" name="param" description="String of alias $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2091" name="return" description="Returns true if PHPSandbox instance has defined aliases, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="2099">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2115" package="Default">
        <name>undefine_alias</name>
        <full_name>undefine_alias</full_name>
        <docblock line="2103">
          <description>Undefine PHPSandbox alias</description>
          <long-description>&lt;p&gt;You can pass a string of alias $name to undefine, or an array of alias names to undefine&lt;/p&gt;</long-description>
          <tag line="2103" name="example" description="$sandbox-&gt;undefine_alias('Foo');"/>
          <tag line="2103" name="example" description="$sandbox-&gt;undefine_alias(array('Foo', 'Bar'));"/>
          <tag line="2103" name="param" description="String of alias name, or array of alias names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2103" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2115">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2137" package="Default">
        <name>undefine_aliases</name>
        <full_name>undefine_aliases</full_name>
        <docblock line="2125">
          <description>Undefine PHPSandbox aliases by array</description>
          <long-description>&lt;p&gt;You can pass an array of alias names to undefine, or an empty array or null argument to undefine all aliases&lt;/p&gt;</long-description>
          <tag line="2125" name="example" description="$sandbox-&gt;undefine_aliases(array('Foo', 'Bar'));"/>
          <tag line="2125" name="example" description="$sandbox-&gt;undefine_aliases(); //WILL UNDEFINE ALL ALIASES!"/>
          <tag line="2125" name="param" description="Array of alias names to undefine. Passing an empty array or no argument will result in undefining all aliases" type="array" variable="$aliases">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2125" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2137">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2168" package="Default">
        <name>define_use</name>
        <full_name>define_use</full_name>
        <docblock line="2147">
          <description>Define PHPSandbox use (or alias)</description>
          <long-description></long-description>
          <tag line="2147" name="alias" description="define_alias();&#13;&#10;You can pass the namespace $name and $alias to use, an array of namespaces to use, or an associative array of namespaces to use and their aliases"/>
          <tag line="2147" name="example" description="$sandbox-&gt;define_use('Foo');  //use Foo;"/>
          <tag line="2147" name="example" description="$sandbox-&gt;define_use('Foo', 'Bar');  //use Foo as Bar;"/>
          <tag line="2147" name="example" description="$sandbox-&gt;define_use(array('Foo', 'Bar')); //use Foo; use Bar;"/>
          <tag line="2147" name="example" description="$sandbox-&gt;define_use(array('Foo' =&gt; 'Bar')); //use Foo as Bar;"/>
          <tag line="2147" name="param" description="String of namespace $name to use, or  or an array of namespaces to use, or an associative array of namespaces and their aliases to use" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2147" name="param" description="String of $alias to use" type="string|null" variable="$alias">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="2147" name="throws" description="Throws exception if unnamed namespace is used" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2147" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2168">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2168">
          <name>$alias</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2187" package="Default">
        <name>define_uses</name>
        <full_name>define_uses</full_name>
        <docblock line="2171">
          <description>Define PHPSandbox uses (or aliases) by array</description>
          <long-description></long-description>
          <tag line="2171" name="alias" description="define_aliases();&#13;&#10;You can pass an array of namespaces to use, or an associative array of namespaces to use and their aliases"/>
          <tag line="2171" name="example" description="$sandbox-&gt;define_uses(array('Foo', 'Bar')); //use Foo; use Bar;"/>
          <tag line="2171" name="example" description="$sandbox-&gt;define_uses(array('Foo' =&gt; 'Bar')); //use Foo as Bar;"/>
          <tag line="2171" name="param" description="Array of namespaces to use, or an associative array of namespaces and their aliases to use" type="array" variable="$uses">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2171" name="throws" description="Throws exception if unnamed namespace is used" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2171" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2187">
          <name>$uses</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2198" package="Default">
        <name>has_defined_uses</name>
        <full_name>has_defined_uses</full_name>
        <docblock line="2190">
          <description>Query whether PHPSandbox instance has defined uses (or aliases)</description>
          <long-description></long-description>
          <tag line="2190" name="alias" description="has_defined_aliases();"/>
          <tag line="2190" name="example" description="$sandbox-&gt;has_defined_uses(); //returns number of defined uses (or aliases) or zero if none defined"/>
          <tag line="2190" name="return" description="Returns the number of uses (or aliases) this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2211" package="Default">
        <name>is_defined_use</name>
        <full_name>is_defined_use</full_name>
        <docblock line="2201">
          <description>Check if PHPSandbox instance has $name uses (or alias) defined</description>
          <long-description></long-description>
          <tag line="2201" name="alias" description="is_defined_alias();"/>
          <tag line="2201" name="example" description="$sandbox-&gt;is_defined_use('Foo');"/>
          <tag line="2201" name="param" description="String of use (or alias) $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2201" name="return" description="Returns true if PHPSandbox instance has defined uses (or aliases) and false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="2211">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2226" package="Default">
        <name>undefine_use</name>
        <full_name>undefine_use</full_name>
        <docblock line="2214">
          <description>Undefine PHPSandbox use (or alias)</description>
          <long-description>&lt;p&gt;You can pass a string of use (or alias) $name to undefine, or an array of use (or alias) names to undefine&lt;/p&gt;</long-description>
          <tag line="2214" name="example" description="$sandbox-&gt;undefine_use('Foo');"/>
          <tag line="2214" name="example" description="$sandbox-&gt;undefine_use(array('Foo', 'Bar'));"/>
          <tag line="2214" name="param" description="String of use (or alias) name, or array of use (or alias) names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2214" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2226">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2243" package="Default">
        <name>undefine_uses</name>
        <full_name>undefine_uses</full_name>
        <docblock line="2229">
          <description>Undefine PHPSandbox uses (or aliases) by array</description>
          <long-description></long-description>
          <tag line="2229" name="alias" description="undefine_aliases();&#13;&#10;You can pass an array of use (or alias) names to undefine, or an empty array or null argument to undefine all uses (or aliases)"/>
          <tag line="2229" name="example" description="$sandbox-&gt;undefine_uses(array('Foo', 'Bar'));"/>
          <tag line="2229" name="example" description="$sandbox-&gt;undefine_uses(); //WILL UNDEFINE ALL USES (OR ALIASES!)"/>
          <tag line="2229" name="param" description="Array of use (or alias) names to undefine. Passing an empty array or no argument will result in undefining all uses (or aliases)" type="array" variable="$uses">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2229" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2243">
          <name>$uses</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2261" package="Default">
        <name>define_class</name>
        <full_name>define_class</full_name>
        <docblock line="2246">
          <description>Define PHPSandbox class</description>
          <long-description>&lt;p&gt;You can pass the class $name and $value to define, or an associative array of classes to define&lt;/p&gt;</long-description>
          <tag line="2246" name="example" description="$sandbox-&gt;define_class('Test', 'Test2');"/>
          <tag line="2246" name="example" description="$sandbox-&gt;define_class(array('Test' =&gt; 'Test2'));"/>
          <tag line="2246" name="param" description="String of class $name or associative array to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2246" name="param" description="Value to define class to" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="2246" name="throws" description="Throws exception if unnamed class is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2246" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2261">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2261">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2282" package="Default">
        <name>define_classes</name>
        <full_name>define_classes</full_name>
        <docblock line="2272">
          <description>Define PHPSandbox classes by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of classes to define&lt;/p&gt;</long-description>
          <tag line="2272" name="example" description="$sandbox-&gt;define_classes(array('Test' =&gt; 'Test2'));"/>
          <tag line="2272" name="param" description="Associative array of $classes to define" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2272" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2282">
          <name>$classes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2294" package="Default">
        <name>has_defined_classes</name>
        <full_name>has_defined_classes</full_name>
        <docblock line="2288">
          <description>Query whether PHPSandbox instance has defined classes</description>
          <long-description></long-description>
          <tag line="2288" name="example" description="$sandbox-&gt;has_defined_classes(); //returns number of defined classes, or zero if none defined"/>
          <tag line="2288" name="return" description="Returns the number of classes this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2305" package="Default">
        <name>is_defined_class</name>
        <full_name>is_defined_class</full_name>
        <docblock line="2297">
          <description>Check if PHPSandbox instance has $name class defined</description>
          <long-description></long-description>
          <tag line="2297" name="example" description="$sandbox-&gt;is_defined_class('Test');"/>
          <tag line="2297" name="param" description="String of class $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2297" name="return" description="Returns true if PHPSandbox instance has defined class, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="2305">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2319" package="Default">
        <name>get_defined_class</name>
        <full_name>get_defined_class</full_name>
        <docblock line="2309">
          <description>Get defined class of $name</description>
          <long-description></long-description>
          <tag line="2309" name="example" description="$sandbox-&gt;get_defined_class('Test');"/>
          <tag line="2309" name="param" description="String of class $name to get" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2309" name="throws" description="Throws an exception if an invalid class name is requested" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2309" name="return" description="Returns string of defined class value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="2319">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2338" package="Default">
        <name>undefine_class</name>
        <full_name>undefine_class</full_name>
        <docblock line="2326">
          <description>Undefine PHPSandbox class</description>
          <long-description>&lt;p&gt;You can pass a string of class $name to undefine, or an array of class names to undefine&lt;/p&gt;</long-description>
          <tag line="2326" name="example" description="$sandbox-&gt;undefine_class('Test');"/>
          <tag line="2326" name="example" description="$sandbox-&gt;undefine_class(array('Test', 'Test2'));"/>
          <tag line="2326" name="param" description="String of class name or an array of class names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2326" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2338">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2360" package="Default">
        <name>undefine_classes</name>
        <full_name>undefine_classes</full_name>
        <docblock line="2348">
          <description>Undefine PHPSandbox classes by array</description>
          <long-description>&lt;p&gt;You can pass an array of class names to undefine, or an empty array or null argument to undefine all classes&lt;/p&gt;</long-description>
          <tag line="2348" name="example" description="$sandbox-&gt;undefine_classes(array('Test', 'Test2'));"/>
          <tag line="2348" name="example" description="$sandbox-&gt;undefine_classes(); //WILL UNDEFINE ALL CLASSES!"/>
          <tag line="2348" name="param" description="Array of class names to undefine. Passing an empty array or no argument will result in undefining all classes" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2348" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2360">
          <name>$classes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2385" package="Default">
        <name>define_interface</name>
        <full_name>define_interface</full_name>
        <docblock line="2370">
          <description>Define PHPSandbox interface</description>
          <long-description>&lt;p&gt;You can pass the interface $name and $value to define, or an associative array of interfaces to define&lt;/p&gt;</long-description>
          <tag line="2370" name="example" description="$sandbox-&gt;define_interface('Test', 'Test2');"/>
          <tag line="2370" name="example" description="$sandbox-&gt;define_interface(array('Test' =&gt; 'Test2'));"/>
          <tag line="2370" name="param" description="String of interface $name or associative array to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2370" name="param" description="Value to define interface to" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="2370" name="throws" description="Throws exception if unnamed interface is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2370" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2385">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2385">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2406" package="Default">
        <name>define_interfaces</name>
        <full_name>define_interfaces</full_name>
        <docblock line="2396">
          <description>Define PHPSandbox interfaces by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of interfaces to define&lt;/p&gt;</long-description>
          <tag line="2396" name="example" description="$sandbox-&gt;define_interfaces(array('Test' =&gt; 'Test2'));"/>
          <tag line="2396" name="param" description="Associative array of $interfaces to define" type="array" variable="$interfaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2396" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2406">
          <name>$interfaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2418" package="Default">
        <name>has_defined_interfaces</name>
        <full_name>has_defined_interfaces</full_name>
        <docblock line="2412">
          <description>Query whether PHPSandbox instance has defined interfaces</description>
          <long-description></long-description>
          <tag line="2412" name="example" description="$sandbox-&gt;has_defined_interfaces(); //returns number of defined interfaces, or zero if none defined"/>
          <tag line="2412" name="return" description="Returns the number of interfaces this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2429" package="Default">
        <name>is_defined_interface</name>
        <full_name>is_defined_interface</full_name>
        <docblock line="2421">
          <description>Check if PHPSandbox instance has $name interface defined</description>
          <long-description></long-description>
          <tag line="2421" name="example" description="$sandbox-&gt;is_defined_interface('Test');"/>
          <tag line="2421" name="param" description="String of interface $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2421" name="return" description="Returns true if PHPSandbox instance has defined interface, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="2429">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2443" package="Default">
        <name>get_defined_interface</name>
        <full_name>get_defined_interface</full_name>
        <docblock line="2433">
          <description>Get defined interface of $name</description>
          <long-description></long-description>
          <tag line="2433" name="example" description="$sandbox-&gt;get_defined_interface('Test');"/>
          <tag line="2433" name="param" description="String of interface $name to get" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2433" name="throws" description="Throws an exception if an invalid interface name is requested" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2433" name="return" description="Returns string of defined interface value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="2443">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2462" package="Default">
        <name>undefine_interface</name>
        <full_name>undefine_interface</full_name>
        <docblock line="2450">
          <description>Undefine PHPSandbox interface</description>
          <long-description>&lt;p&gt;You can pass a string of interface $name to undefine, or an array of interface names to undefine&lt;/p&gt;</long-description>
          <tag line="2450" name="example" description="$sandbox-&gt;undefine_interface('Test');"/>
          <tag line="2450" name="example" description="$sandbox-&gt;undefine_interface(array('Test', 'Test2'));"/>
          <tag line="2450" name="param" description="String of interface name or an array of interface names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2450" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2462">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2484" package="Default">
        <name>undefine_interfaces</name>
        <full_name>undefine_interfaces</full_name>
        <docblock line="2472">
          <description>Undefine PHPSandbox interfaces by array</description>
          <long-description>&lt;p&gt;You can pass an array of interface names to undefine, or an empty array or null argument to undefine all interfaces&lt;/p&gt;</long-description>
          <tag line="2472" name="example" description="$sandbox-&gt;undefine_interfaces(array('Test', 'Test2'));"/>
          <tag line="2472" name="example" description="$sandbox-&gt;undefine_interfaces(); //WILL UNDEFINE ALL INTERFACES!"/>
          <tag line="2472" name="param" description="Array of interface names to undefine. Passing an empty array or no argument will result in undefining all interfaces" type="array" variable="$interfaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2472" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2484">
          <name>$interfaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2509" package="Default">
        <name>define_trait</name>
        <full_name>define_trait</full_name>
        <docblock line="2494">
          <description>Define PHPSandbox trait</description>
          <long-description>&lt;p&gt;You can pass the trait $name and $value to define, or an associative array of traits to define&lt;/p&gt;</long-description>
          <tag line="2494" name="example" description="$sandbox-&gt;define_trait('Test', 'Test2');"/>
          <tag line="2494" name="example" description="$sandbox-&gt;define_trait(array('Test' =&gt; 'Test2'));"/>
          <tag line="2494" name="param" description="String of trait $name or associative array to define" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2494" name="param" description="Value to define trait to" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="2494" name="throws" description="Throws exception if unnamed trait is defined" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2494" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2509">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2509">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2530" package="Default">
        <name>define_traits</name>
        <full_name>define_traits</full_name>
        <docblock line="2520">
          <description>Define PHPSandbox traits by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of traits to define&lt;/p&gt;</long-description>
          <tag line="2520" name="example" description="$sandbox-&gt;define_traits(array('Test' =&gt; 'Test2'));"/>
          <tag line="2520" name="param" description="Associative array of $traits to define" type="array" variable="$traits">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2520" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2530">
          <name>$traits</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2542" package="Default">
        <name>has_defined_traits</name>
        <full_name>has_defined_traits</full_name>
        <docblock line="2536">
          <description>Query whether PHPSandbox instance has defined traits</description>
          <long-description></long-description>
          <tag line="2536" name="example" description="$sandbox-&gt;has_defined_traits(); //returns number of defined traits, or zero if none defined"/>
          <tag line="2536" name="return" description="Returns the number of traits this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2553" package="Default">
        <name>is_defined_trait</name>
        <full_name>is_defined_trait</full_name>
        <docblock line="2545">
          <description>Check if PHPSandbox instance has $name trait defined</description>
          <long-description></long-description>
          <tag line="2545" name="example" description="$sandbox-&gt;is_defined_trait('Test');"/>
          <tag line="2545" name="param" description="String of trait $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2545" name="return" description="Returns true if PHPSandbox instance has defined trait, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="2553">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2567" package="Default">
        <name>get_defined_trait</name>
        <full_name>get_defined_trait</full_name>
        <docblock line="2557">
          <description>Get defined trait of $name</description>
          <long-description></long-description>
          <tag line="2557" name="example" description="$sandbox-&gt;get_defined_trait('Test');"/>
          <tag line="2557" name="param" description="String of trait $name to get" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2557" name="throws" description="Throws an exception if an invalid trait name is requested" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="2557" name="return" description="Returns string of defined trait value" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="2567">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2586" package="Default">
        <name>undefine_trait</name>
        <full_name>undefine_trait</full_name>
        <docblock line="2574">
          <description>Undefine PHPSandbox trait</description>
          <long-description>&lt;p&gt;You can pass a string of trait $name to undefine, or an array of trait names to undefine&lt;/p&gt;</long-description>
          <tag line="2574" name="example" description="$sandbox-&gt;undefine_trait('Test');"/>
          <tag line="2574" name="example" description="$sandbox-&gt;undefine_trait(array('Test', 'Test2'));"/>
          <tag line="2574" name="param" description="String of trait name or an array of trait names to undefine" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2574" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2586">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2608" package="Default">
        <name>undefine_traits</name>
        <full_name>undefine_traits</full_name>
        <docblock line="2596">
          <description>Undefine PHPSandbox traits by array</description>
          <long-description>&lt;p&gt;You can pass an array of trait names to undefine, or an empty array or null argument to undefine all traits&lt;/p&gt;</long-description>
          <tag line="2596" name="example" description="$sandbox-&gt;undefine_traits(array('Test', 'Test2'));"/>
          <tag line="2596" name="example" description="$sandbox-&gt;undefine_traits(); //WILL UNDEFINE ALL TRAITS!"/>
          <tag line="2596" name="param" description="Array of trait names to undefine. Passing an empty array or no argument will result in undefining all traits" type="array" variable="$traits">
            <type by_reference="false">array</type>
          </tag>
          <tag line="2596" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2608">
          <name>$traits</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2624" package="Default">
        <name>normalize_func</name>
        <full_name>normalize_func</full_name>
        <docblock line="2618">
          <description>Normalize function name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2618" name="param" description="String of the function $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2618" name="return" description="Returns the normalized function string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2624">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2639" package="Default">
        <name>normalize_superglobal</name>
        <full_name>normalize_superglobal</full_name>
        <docblock line="2633">
          <description>Normalize superglobal name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2633" name="param" description="String of the superglobal $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2633" name="return" description="Returns the normalized superglobal string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2639">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2654" package="Default">
        <name>normalize_magic_const</name>
        <full_name>normalize_magic_const</full_name>
        <docblock line="2648">
          <description>Normalize magic constant name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2648" name="param" description="String of the magic constant $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2648" name="return" description="Returns the normalized magic constant string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2654">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2669" package="Default">
        <name>normalize_namespace</name>
        <full_name>normalize_namespace</full_name>
        <docblock line="2663">
          <description>Normalize namespace name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2663" name="param" description="String of the namespace $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2663" name="return" description="Returns the normalized namespace string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2669">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2684" package="Default">
        <name>normalize_alias</name>
        <full_name>normalize_alias</full_name>
        <docblock line="2678">
          <description>Normalize alias name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2678" name="param" description="String of the alias $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2678" name="return" description="Returns the normalized alias string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2684">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2701" package="Default">
        <name>normalize_use</name>
        <full_name>normalize_use</full_name>
        <docblock line="2693">
          <description>Normalize use (or alias) name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2693" name="alias" description="normalize_alias();"/>
          <tag line="2693" name="param" description="String of the use (or alias) $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2693" name="return" description="Returns the normalized use (or alias) string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2701">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2710" package="Default">
        <name>normalize_class</name>
        <full_name>normalize_class</full_name>
        <docblock line="2704">
          <description>Normalize class name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2704" name="param" description="String of the class $name to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2704" name="return" description="Returns the normalized class string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2710">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2725" package="Default">
        <name>normalize_interface</name>
        <full_name>normalize_interface</full_name>
        <docblock line="2719">
          <description>Normalize interface name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2719" name="param" description="String of the interface $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2719" name="return" description="Returns the normalized interface string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2725">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2740" package="Default">
        <name>normalize_trait</name>
        <full_name>normalize_trait</full_name>
        <docblock line="2734">
          <description>Normalize trait name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2734" name="param" description="String of the trait $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2734" name="return" description="Returns the normalized trait string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2740">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2755" package="Default">
        <name>normalize_keyword</name>
        <full_name>normalize_keyword</full_name>
        <docblock line="2749">
          <description>Normalize keyword name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2749" name="param" description="String of the keyword $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2749" name="return" description="Returns the normalized keyword string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2755">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2799" package="Default">
        <name>normalize_operator</name>
        <full_name>normalize_operator</full_name>
        <docblock line="2793">
          <description>Normalize operator name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2793" name="param" description="String of the operator $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2793" name="return" description="Returns the normalized operator string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2799">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2824" package="Default">
        <name>normalize_primitive</name>
        <full_name>normalize_primitive</full_name>
        <docblock line="2818">
          <description>Normalize primitive name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2818" name="param" description="String of the primitive $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2818" name="return" description="Returns the normalized primitive string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2824">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2845" package="Default">
        <name>normalize_type</name>
        <full_name>normalize_type</full_name>
        <docblock line="2839">
          <description>Normalize type name.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function.&lt;/p&gt;</long-description>
          <tag line="2839" name="param" description="String of the type $name, or array of strings to normalize" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2839" name="return" description="Returns the normalized type string or an array of normalized strings" type="string|array">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="2845">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2869" package="Default">
        <name>whitelist</name>
        <full_name>whitelist</full_name>
        <docblock line="2854">
          <description>Whitelist PHPSandbox definitions, such as functions, constants, classes, etc.</description>
          <long-description>&lt;p&gt;to set&lt;/p&gt;

&lt;p&gt;You can pass an associative array of whitelist types and their names, or a string $type and array of $names, or pass a string of the $type and $name&lt;/p&gt;</long-description>
          <tag line="2854" name="example" description="$sandbox-&gt;whitelist(array('functions' =&gt; array('test')));"/>
          <tag line="2854" name="example" description="$sandbox-&gt;whitelist('functions', array('test'));"/>
          <tag line="2854" name="example" description="$sandbox-&gt;whitelist('functions', 'test');"/>
          <tag line="2854" name="param" description="Associative array or string of whitelist type to set" type="string|array" variable="$type">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2854" name="param" description="Array or string of whitelist name to set" type="string|array|null" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="2854" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2869">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2869">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2908" package="Default">
        <name>blacklist</name>
        <full_name>blacklist</full_name>
        <docblock line="2893">
          <description>Blacklist PHPSandbox definitions, such as functions, constants, classes, etc.</description>
          <long-description>&lt;p&gt;to set&lt;/p&gt;

&lt;p&gt;You can pass an associative array of blacklist types and their names, or a string $type and array of $names, or pass a string of the $type and $name&lt;/p&gt;</long-description>
          <tag line="2893" name="example" description="$sandbox-&gt;blacklist(array('functions' =&gt; array('test')));"/>
          <tag line="2893" name="example" description="$sandbox-&gt;blacklist('functions', array('test'));"/>
          <tag line="2893" name="example" description="$sandbox-&gt;blacklist('functions', 'test');"/>
          <tag line="2893" name="param" description="Associative array or string of blacklist type to set" type="string|array" variable="$type">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2893" name="param" description="Array or string of blacklist name to set" type="string|array|null" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="2893" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2908">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2908">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2947" package="Default">
        <name>dewhitelist</name>
        <full_name>dewhitelist</full_name>
        <docblock line="2932">
          <description>Remove PHPSandbox definitions, such as functions, constants, classes, etc.</description>
          <long-description>&lt;p&gt;from whitelist&lt;/p&gt;

&lt;p&gt;You can pass an associative array of whitelist types and their names, or a string $type and array of $names, or pass a string of the $type and $name to unset&lt;/p&gt;</long-description>
          <tag line="2932" name="example" description="$sandbox-&gt;dewhitelist(array('functions' =&gt; array('test')));"/>
          <tag line="2932" name="example" description="$sandbox-&gt;dewhitelist('functions', array('test'));"/>
          <tag line="2932" name="example" description="$sandbox-&gt;dewhitelist('functions', 'test');"/>
          <tag line="2932" name="param" description="Associative array or string of whitelist type to unset" type="string|array" variable="$type">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2932" name="param" description="Array or string of whitelist name to unset" type="string|array|null" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="2932" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2947">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2947">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2980" package="Default">
        <name>deblacklist</name>
        <full_name>deblacklist</full_name>
        <docblock line="2965">
          <description>Remove PHPSandbox definitions, such as functions, constants, classes, etc.</description>
          <long-description>&lt;p&gt;from blacklist&lt;/p&gt;

&lt;p&gt;You can pass an associative array of blacklist types and their names, or a string $type and array of $names, or pass a string of the $type and $name to unset&lt;/p&gt;</long-description>
          <tag line="2965" name="example" description="$sandbox-&gt;deblacklist(array('functions' =&gt; array('test')));"/>
          <tag line="2965" name="example" description="$sandbox-&gt;deblacklist('functions', array('test'));"/>
          <tag line="2965" name="example" description="$sandbox-&gt;deblacklist('functions', 'test');"/>
          <tag line="2965" name="param" description="Associative array or string of blacklist type to unset" type="string|array" variable="$type">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="2965" name="param" description="Array or string of blacklist name to unset" type="string|array|null" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="2965" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="2980">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2980">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3006" package="Default">
        <name>has_whitelist</name>
        <full_name>has_whitelist</full_name>
        <docblock line="2998">
          <description>Query whether PHPSandbox instance has whitelist type</description>
          <long-description></long-description>
          <tag line="2998" name="example" description="$sandbox-&gt;has_whitelist('functions'); //returns number of whitelisted functions, or zero if none whitelisted"/>
          <tag line="2998" name="param" description="The whitelist type to query" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="2998" name="return" description="Returns the number of whitelists this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="3006">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3017" package="Default">
        <name>has_blacklist</name>
        <full_name>has_blacklist</full_name>
        <docblock line="3009">
          <description>Query whether PHPSandbox instance has blacklist type.</description>
          <long-description></long-description>
          <tag line="3009" name="example" description="$sandbox-&gt;has_blacklist('functions'); //returns number of blacklisted functions, or zero if none blacklisted"/>
          <tag line="3009" name="param" description="The blacklist type to query" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3009" name="return" description="Returns the number of blacklists this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="3017">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3029" package="Default">
        <name>is_whitelisted</name>
        <full_name>is_whitelisted</full_name>
        <docblock line="3020">
          <description>Check if PHPSandbox instance has whitelist type and name set</description>
          <long-description></long-description>
          <tag line="3020" name="example" description="$sandbox-&gt;is_whitelisted('functions', 'test');"/>
          <tag line="3020" name="param" description="String of whitelist $type to query" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3020" name="param" description="String of whitelist $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3020" name="return" description="Returns true if PHPSandbox instance has whitelisted $type and $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3029">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="3029">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3041" package="Default">
        <name>is_blacklisted</name>
        <full_name>is_blacklisted</full_name>
        <docblock line="3032">
          <description>Check if PHPSandbox instance has blacklist type and name set</description>
          <long-description></long-description>
          <tag line="3032" name="example" description="$sandbox-&gt;is_blacklisted('functions', 'test');"/>
          <tag line="3032" name="param" description="String of blacklist $type to query" type="string" variable="$type">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3032" name="param" description="String of blacklist $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3032" name="return" description="Returns true if PHPSandbox instance has blacklisted $type and $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3041">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="3041">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3050" package="Default">
        <name>has_whitelist_funcs</name>
        <full_name>has_whitelist_funcs</full_name>
        <docblock line="3044">
          <description>Query whether PHPSandbox instance has whitelisted functions.</description>
          <long-description></long-description>
          <tag line="3044" name="example" description="$sandbox-&gt;has_whitelist_funcs(); //returns number of whitelisted functions, or zero if none whitelisted"/>
          <tag line="3044" name="return" description="Returns the number of whitelisted functions this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3059" package="Default">
        <name>has_blacklist_funcs</name>
        <full_name>has_blacklist_funcs</full_name>
        <docblock line="3053">
          <description>Query whether PHPSandbox instance has blacklisted functions.</description>
          <long-description></long-description>
          <tag line="3053" name="example" description="$sandbox-&gt;has_blacklist_funcs(); //returns number of blacklisted functions, or zero if none blacklisted"/>
          <tag line="3053" name="return" description="Returns the number of blacklisted functions this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3070" package="Default">
        <name>is_whitelisted_func</name>
        <full_name>is_whitelisted_func</full_name>
        <docblock line="3062">
          <description>Check if PHPSandbox instance has whitelisted function name set</description>
          <long-description></long-description>
          <tag line="3062" name="example" description="$sandbox-&gt;is_whitelisted_func('test');"/>
          <tag line="3062" name="param" description="String of function $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3062" name="return" description="Returns true if PHPSandbox instance has whitelisted function $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3070">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3082" package="Default">
        <name>is_blacklisted_func</name>
        <full_name>is_blacklisted_func</full_name>
        <docblock line="3074">
          <description>Check if PHPSandbox instance has blacklisted function name set</description>
          <long-description></long-description>
          <tag line="3074" name="example" description="$sandbox-&gt;is_blacklisted_func('test');"/>
          <tag line="3074" name="param" description="String of function $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3074" name="return" description="Returns true if PHPSandbox instance has blacklisted function $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3082">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3092" package="Default">
        <name>has_whitelist_vars</name>
        <full_name>has_whitelist_vars</full_name>
        <docblock line="3086">
          <description>Query whether PHPSandbox instance has whitelisted variables.</description>
          <long-description></long-description>
          <tag line="3086" name="example" description="$sandbox-&gt;has_whitelist_vars(); //returns number of whitelisted variables, or zero if none whitelisted"/>
          <tag line="3086" name="return" description="Returns the number of whitelisted variables this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3101" package="Default">
        <name>has_blacklist_vars</name>
        <full_name>has_blacklist_vars</full_name>
        <docblock line="3095">
          <description>Query whether PHPSandbox instance has blacklisted variables.</description>
          <long-description></long-description>
          <tag line="3095" name="example" description="$sandbox-&gt;has_blacklist_vars(); //returns number of blacklisted variables, or zero if none blacklisted"/>
          <tag line="3095" name="return" description="Returns the number of blacklisted variables this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3112" package="Default">
        <name>is_whitelisted_var</name>
        <full_name>is_whitelisted_var</full_name>
        <docblock line="3104">
          <description>Check if PHPSandbox instance has whitelisted variable name set</description>
          <long-description></long-description>
          <tag line="3104" name="example" description="$sandbox-&gt;is_whitelisted_var('test');"/>
          <tag line="3104" name="param" description="String of variable $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3104" name="return" description="Returns true if PHPSandbox instance has whitelisted variable $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3112">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3123" package="Default">
        <name>is_blacklisted_var</name>
        <full_name>is_blacklisted_var</full_name>
        <docblock line="3115">
          <description>Check if PHPSandbox instance has blacklisted variable name set</description>
          <long-description></long-description>
          <tag line="3115" name="example" description="$sandbox-&gt;is_blacklisted_var('test');"/>
          <tag line="3115" name="param" description="String of variable $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3115" name="return" description="Returns true if PHPSandbox instance has blacklisted variable $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3123">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3132" package="Default">
        <name>has_whitelist_globals</name>
        <full_name>has_whitelist_globals</full_name>
        <docblock line="3126">
          <description>Query whether PHPSandbox instance has whitelisted globals.</description>
          <long-description></long-description>
          <tag line="3126" name="example" description="$sandbox-&gt;has_whitelist_globals(); //returns number of whitelisted globals, or zero if none whitelisted"/>
          <tag line="3126" name="return" description="Returns the number of whitelisted globals this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3141" package="Default">
        <name>has_blacklist_globals</name>
        <full_name>has_blacklist_globals</full_name>
        <docblock line="3135">
          <description>Query whether PHPSandbox instance has blacklisted globals.</description>
          <long-description></long-description>
          <tag line="3135" name="example" description="$sandbox-&gt;has_blacklist_globals(); //returns number of blacklisted globals, or zero if none blacklisted"/>
          <tag line="3135" name="return" description="Returns the number of blacklisted globals this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3152" package="Default">
        <name>is_whitelisted_global</name>
        <full_name>is_whitelisted_global</full_name>
        <docblock line="3144">
          <description>Check if PHPSandbox instance has whitelisted global name set</description>
          <long-description></long-description>
          <tag line="3144" name="example" description="$sandbox-&gt;is_whitelisted_global('test');"/>
          <tag line="3144" name="param" description="String of global $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3144" name="return" description="Returns true if PHPSandbox instance has whitelisted global $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3152">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3163" package="Default">
        <name>is_blacklisted_global</name>
        <full_name>is_blacklisted_global</full_name>
        <docblock line="3155">
          <description>Check if PHPSandbox instance has blacklisted global name set</description>
          <long-description></long-description>
          <tag line="3155" name="example" description="$sandbox-&gt;is_blacklisted_global('test');"/>
          <tag line="3155" name="param" description="String of global $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3155" name="return" description="Returns true if PHPSandbox instance has blacklisted global $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3163">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3176" package="Default">
        <name>has_whitelist_superglobals</name>
        <full_name>has_whitelist_superglobals</full_name>
        <docblock line="3166">
          <description>Query whether PHPSandbox instance has whitelisted superglobals, or superglobal keys</description>
          <long-description></long-description>
          <tag line="3166" name="example" description="$sandbox-&gt;has_whitelist_superglobals(); //returns number of whitelisted superglobals, or zero if none whitelisted"/>
          <tag line="3166" name="example" description="$sandbox-&gt;has_whitelist_superglobals('_GET'); //returns number of whitelisted superglobal keys, or zero if none whitelisted"/>
          <tag line="3166" name="param" description="The whitelist superglobal key to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3166" name="return" description="Returns the number of whitelisted superglobals or superglobal keys this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="3176">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3190" package="Default">
        <name>has_blacklist_superglobals</name>
        <full_name>has_blacklist_superglobals</full_name>
        <docblock line="3180">
          <description>Query whether PHPSandbox instance has blacklisted superglobals, or superglobal keys</description>
          <long-description></long-description>
          <tag line="3180" name="example" description="$sandbox-&gt;has_blacklist_superglobals(); //returns number of blacklisted superglobals, or zero if none blacklisted"/>
          <tag line="3180" name="example" description="$sandbox-&gt;has_blacklist_superglobals('_GET'); //returns number of blacklisted superglobal keys, or zero if none blacklisted"/>
          <tag line="3180" name="param" description="The blacklist superglobal key to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3180" name="return" description="Returns the number of blacklisted superglobals or superglobal keys this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
        <argument line="3190">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3205" package="Default">
        <name>is_whitelisted_superglobal</name>
        <full_name>is_whitelisted_superglobal</full_name>
        <docblock line="3194">
          <description>Check if PHPSandbox instance has whitelisted superglobal or superglobal key set</description>
          <long-description></long-description>
          <tag line="3194" name="example" description="$sandbox-&gt;is_whitelisted_superglobal('_GET');"/>
          <tag line="3194" name="example" description="$sandbox-&gt;is_whitelisted_superglobal('_GET', 'page');"/>
          <tag line="3194" name="param" description="String of whitelisted superglobal $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3194" name="param" description="String of whitelisted superglobal $key to query" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3194" name="return" description="Returns true if PHPSandbox instance has whitelisted superglobal key or superglobal, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3205">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="3205">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3220" package="Default">
        <name>is_blacklisted_superglobal</name>
        <full_name>is_blacklisted_superglobal</full_name>
        <docblock line="3209">
          <description>Check if PHPSandbox instance has blacklisted superglobal or superglobal key set</description>
          <long-description></long-description>
          <tag line="3209" name="example" description="$sandbox-&gt;is_blacklisted_superglobal('_GET');"/>
          <tag line="3209" name="example" description="$sandbox-&gt;is_blacklisted_superglobal('_GET', 'page');"/>
          <tag line="3209" name="param" description="String of blacklisted superglobal $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3209" name="param" description="String of blacklisted superglobal $key to query" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3209" name="return" description="Returns true if PHPSandbox instance has blacklisted superglobal key or superglobal, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3220">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="3220">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3230" package="Default">
        <name>has_whitelist_consts</name>
        <full_name>has_whitelist_consts</full_name>
        <docblock line="3224">
          <description>Query whether PHPSandbox instance has whitelisted constants.</description>
          <long-description></long-description>
          <tag line="3224" name="example" description="$sandbox-&gt;has_whitelist_consts(); //returns number of whitelisted constants, or zero if none whitelisted"/>
          <tag line="3224" name="return" description="Returns the number of whitelisted constants this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3239" package="Default">
        <name>has_blacklist_consts</name>
        <full_name>has_blacklist_consts</full_name>
        <docblock line="3233">
          <description>Query whether PHPSandbox instance has blacklisted constants.</description>
          <long-description></long-description>
          <tag line="3233" name="example" description="$sandbox-&gt;has_blacklist_consts(); //returns number of blacklisted constants, or zero if none blacklisted"/>
          <tag line="3233" name="return" description="Returns the number of blacklisted constants this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3250" package="Default">
        <name>is_whitelisted_const</name>
        <full_name>is_whitelisted_const</full_name>
        <docblock line="3242">
          <description>Check if PHPSandbox instance has whitelisted constant name set</description>
          <long-description></long-description>
          <tag line="3242" name="example" description="$sandbox-&gt;is_whitelisted_const('TEST');"/>
          <tag line="3242" name="param" description="String of constant $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3242" name="return" description="Returns true if PHPSandbox instance has whitelisted constant $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3250">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3261" package="Default">
        <name>is_blacklisted_const</name>
        <full_name>is_blacklisted_const</full_name>
        <docblock line="3253">
          <description>Check if PHPSandbox instance has blacklisted constant name set</description>
          <long-description></long-description>
          <tag line="3253" name="example" description="$sandbox-&gt;is_blacklisted_const('TEST');"/>
          <tag line="3253" name="param" description="String of constant $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3253" name="return" description="Returns true if PHPSandbox instance has blacklisted constant $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3261">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3270" package="Default">
        <name>has_whitelist_magic_consts</name>
        <full_name>has_whitelist_magic_consts</full_name>
        <docblock line="3264">
          <description>Query whether PHPSandbox instance has whitelisted magic constants.</description>
          <long-description></long-description>
          <tag line="3264" name="example" description="$sandbox-&gt;has_whitelist_magic_consts(); //returns number of whitelisted magic constants, or zero if none whitelisted"/>
          <tag line="3264" name="return" description="Returns the number of whitelisted magic constants this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3279" package="Default">
        <name>has_blacklist_magic_consts</name>
        <full_name>has_blacklist_magic_consts</full_name>
        <docblock line="3273">
          <description>Query whether PHPSandbox instance has blacklisted magic constants.</description>
          <long-description></long-description>
          <tag line="3273" name="example" description="$sandbox-&gt;has_blacklist_magic_consts(); //returns number of blacklisted magic constants, or zero if none blacklisted"/>
          <tag line="3273" name="return" description="Returns the number of blacklisted magic constants this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3290" package="Default">
        <name>is_whitelisted_magic_const</name>
        <full_name>is_whitelisted_magic_const</full_name>
        <docblock line="3282">
          <description>Check if PHPSandbox instance has whitelisted magic constant name set</description>
          <long-description></long-description>
          <tag line="3282" name="example" description="$sandbox-&gt;is_whitelisted_magic_const('__LINE__');"/>
          <tag line="3282" name="param" description="String of magic constant $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3282" name="return" description="Returns true if PHPSandbox instance has whitelisted magic constant $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3290">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3302" package="Default">
        <name>is_blacklisted_magic_const</name>
        <full_name>is_blacklisted_magic_const</full_name>
        <docblock line="3294">
          <description>Check if PHPSandbox instance has blacklisted magic constant name set</description>
          <long-description></long-description>
          <tag line="3294" name="example" description="$sandbox-&gt;is_blacklisted_magic_const('__LINE__');"/>
          <tag line="3294" name="param" description="String of magic constant $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3294" name="return" description="Returns true if PHPSandbox instance has blacklisted magic constant $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3302">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3312" package="Default">
        <name>has_whitelist_namespaces</name>
        <full_name>has_whitelist_namespaces</full_name>
        <docblock line="3306">
          <description>Query whether PHPSandbox instance has whitelisted namespaces.</description>
          <long-description></long-description>
          <tag line="3306" name="example" description="$sandbox-&gt;has_whitelist_namespaces(); //returns number of whitelisted namespaces, or zero if none whitelisted"/>
          <tag line="3306" name="return" description="Returns the number of whitelisted namespaces this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3321" package="Default">
        <name>has_blacklist_namespaces</name>
        <full_name>has_blacklist_namespaces</full_name>
        <docblock line="3315">
          <description>Query whether PHPSandbox instance has blacklisted namespaces.</description>
          <long-description></long-description>
          <tag line="3315" name="example" description="$sandbox-&gt;has_blacklist_namespaces(); //returns number of blacklisted namespaces, or zero if none blacklisted"/>
          <tag line="3315" name="return" description="Returns the number of blacklisted namespaces this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3332" package="Default">
        <name>is_whitelisted_namespace</name>
        <full_name>is_whitelisted_namespace</full_name>
        <docblock line="3324">
          <description>Check if PHPSandbox instance has whitelisted namespace name set</description>
          <long-description></long-description>
          <tag line="3324" name="example" description="$sandbox-&gt;is_whitelisted_namespace('Test');"/>
          <tag line="3324" name="param" description="String of namespace $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3324" name="return" description="Returns true if PHPSandbox instance has whitelisted namespace $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3332">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3344" package="Default">
        <name>is_blacklisted_namespace</name>
        <full_name>is_blacklisted_namespace</full_name>
        <docblock line="3336">
          <description>Check if PHPSandbox instance has blacklisted namespace name set</description>
          <long-description></long-description>
          <tag line="3336" name="example" description="$sandbox-&gt;is_blacklisted_namespace('Test');"/>
          <tag line="3336" name="param" description="String of namespace $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3336" name="return" description="Returns true if PHPSandbox instance has blacklisted namespace $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3344">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3354" package="Default">
        <name>has_whitelist_aliases</name>
        <full_name>has_whitelist_aliases</full_name>
        <docblock line="3348">
          <description>Query whether PHPSandbox instance has whitelisted aliases.</description>
          <long-description></long-description>
          <tag line="3348" name="example" description="$sandbox-&gt;has_whitelist_aliases(); //returns number of whitelisted aliases, or zero if none whitelisted"/>
          <tag line="3348" name="return" description="Returns the number of whitelisted aliases this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3363" package="Default">
        <name>has_blacklist_aliases</name>
        <full_name>has_blacklist_aliases</full_name>
        <docblock line="3357">
          <description>Query whether PHPSandbox instance has blacklisted aliases.</description>
          <long-description></long-description>
          <tag line="3357" name="example" description="$sandbox-&gt;has_blacklist_aliases(); //returns number of blacklisted aliases, or zero if none blacklisted"/>
          <tag line="3357" name="return" description="Returns the number of blacklisted aliases this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3374" package="Default">
        <name>is_whitelisted_alias</name>
        <full_name>is_whitelisted_alias</full_name>
        <docblock line="3366">
          <description>Check if PHPSandbox instance has whitelisted alias name set</description>
          <long-description></long-description>
          <tag line="3366" name="example" description="$sandbox-&gt;is_whitelisted_alias('Test');"/>
          <tag line="3366" name="param" description="String of alias $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3366" name="return" description="Returns true if PHPSandbox instance has whitelisted alias $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3374">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3386" package="Default">
        <name>is_blacklisted_alias</name>
        <full_name>is_blacklisted_alias</full_name>
        <docblock line="3378">
          <description>Check if PHPSandbox instance has blacklisted alias name set</description>
          <long-description></long-description>
          <tag line="3378" name="example" description="$sandbox-&gt;is_blacklisted_alias('Test');"/>
          <tag line="3378" name="param" description="String of alias $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3378" name="return" description="Returns true if PHPSandbox instance has blacklisted alias $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3386">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3398" package="Default">
        <name>has_whitelist_uses</name>
        <full_name>has_whitelist_uses</full_name>
        <docblock line="3390">
          <description>Query whether PHPSandbox instance has whitelisted uses (or aliases.)</description>
          <long-description></long-description>
          <tag line="3390" name="alias" description="has_whitelist_aliases();"/>
          <tag line="3390" name="example" description="$sandbox-&gt;has_whitelist_uses(); //returns number of whitelisted uses (or aliases) or zero if none whitelisted"/>
          <tag line="3390" name="return" description="Returns the number of whitelisted uses (or aliases) this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3409" package="Default">
        <name>has_blacklist_uses</name>
        <full_name>has_blacklist_uses</full_name>
        <docblock line="3401">
          <description>Query whether PHPSandbox instance has blacklisted uses (or aliases.)</description>
          <long-description></long-description>
          <tag line="3401" name="alias" description="has_blacklist_aliases();"/>
          <tag line="3401" name="example" description="$sandbox-&gt;has_blacklist_uses(); //returns number of blacklisted uses (or aliases) or zero if none blacklisted"/>
          <tag line="3401" name="return" description="Returns the number of blacklisted uses (or aliases) this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3422" package="Default">
        <name>is_whitelisted_use</name>
        <full_name>is_whitelisted_use</full_name>
        <docblock line="3412">
          <description>Check if PHPSandbox instance has whitelisted use (or alias) name set</description>
          <long-description></long-description>
          <tag line="3412" name="alias" description="is_whitelisted_alias();"/>
          <tag line="3412" name="example" description="$sandbox-&gt;is_whitelisted_use('Test');"/>
          <tag line="3412" name="param" description="String of use (or alias) $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3412" name="return" description="Returns true if PHPSandbox instance has whitelisted use (or alias) $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3422">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3435" package="Default">
        <name>is_blacklisted_use</name>
        <full_name>is_blacklisted_use</full_name>
        <docblock line="3425">
          <description>Check if PHPSandbox instance has blacklisted use (or alias) name set</description>
          <long-description></long-description>
          <tag line="3425" name="alias" description="is_blacklisted_alias();"/>
          <tag line="3425" name="example" description="$sandbox-&gt;is_blacklisted_use('Test');"/>
          <tag line="3425" name="param" description="String of use (or alias) $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3425" name="return" description="Returns true if PHPSandbox instance has blacklisted use (or alias) $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3435">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3444" package="Default">
        <name>has_whitelist_classes</name>
        <full_name>has_whitelist_classes</full_name>
        <docblock line="3438">
          <description>Query whether PHPSandbox instance has whitelisted classes.</description>
          <long-description></long-description>
          <tag line="3438" name="example" description="$sandbox-&gt;has_whitelist_classes(); //returns number of whitelisted classes, or zero if none whitelisted"/>
          <tag line="3438" name="return" description="Returns the number of whitelisted classes this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3453" package="Default">
        <name>has_blacklist_classes</name>
        <full_name>has_blacklist_classes</full_name>
        <docblock line="3447">
          <description>Query whether PHPSandbox instance has blacklisted classes.</description>
          <long-description></long-description>
          <tag line="3447" name="example" description="$sandbox-&gt;has_blacklist_classes(); //returns number of blacklisted classes, or zero if none blacklisted"/>
          <tag line="3447" name="return" description="Returns the number of blacklisted classes this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3464" package="Default">
        <name>is_whitelisted_class</name>
        <full_name>is_whitelisted_class</full_name>
        <docblock line="3456">
          <description>Check if PHPSandbox instance has whitelisted class name set</description>
          <long-description></long-description>
          <tag line="3456" name="example" description="$sandbox-&gt;is_whitelisted_class('Test');"/>
          <tag line="3456" name="param" description="String of class $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3456" name="return" description="Returns true if PHPSandbox instance has whitelisted class $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3464">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3476" package="Default">
        <name>is_blacklisted_class</name>
        <full_name>is_blacklisted_class</full_name>
        <docblock line="3468">
          <description>Check if PHPSandbox instance has blacklisted class name set</description>
          <long-description></long-description>
          <tag line="3468" name="example" description="$sandbox-&gt;is_blacklisted_class('Test');"/>
          <tag line="3468" name="param" description="String of class $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3468" name="return" description="Returns true if PHPSandbox instance has blacklisted class $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3476">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3486" package="Default">
        <name>has_whitelist_interfaces</name>
        <full_name>has_whitelist_interfaces</full_name>
        <docblock line="3480">
          <description>Query whether PHPSandbox instance has whitelisted interfaces.</description>
          <long-description></long-description>
          <tag line="3480" name="example" description="$sandbox-&gt;has_whitelist_interfaces(); //returns number of whitelisted interfaces, or zero if none whitelisted"/>
          <tag line="3480" name="return" description="Returns the number of whitelisted interfaces this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3495" package="Default">
        <name>has_blacklist_interfaces</name>
        <full_name>has_blacklist_interfaces</full_name>
        <docblock line="3489">
          <description>Query whether PHPSandbox instance has blacklisted interfaces.</description>
          <long-description></long-description>
          <tag line="3489" name="example" description="$sandbox-&gt;has_blacklist_interfaces(); //returns number of blacklisted interfaces, or zero if none blacklisted"/>
          <tag line="3489" name="return" description="Returns the number of blacklisted interfaces this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3506" package="Default">
        <name>is_whitelisted_interface</name>
        <full_name>is_whitelisted_interface</full_name>
        <docblock line="3498">
          <description>Check if PHPSandbox instance has whitelisted interface name set</description>
          <long-description></long-description>
          <tag line="3498" name="example" description="$sandbox-&gt;is_whitelisted_interface('Test');"/>
          <tag line="3498" name="param" description="String of interface $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3498" name="return" description="Returns true if PHPSandbox instance has whitelisted interface $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3506">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3518" package="Default">
        <name>is_blacklisted_interface</name>
        <full_name>is_blacklisted_interface</full_name>
        <docblock line="3510">
          <description>Check if PHPSandbox instance has blacklisted interface name set</description>
          <long-description></long-description>
          <tag line="3510" name="example" description="$sandbox-&gt;is_blacklisted_interface('Test');"/>
          <tag line="3510" name="param" description="String of interface $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3510" name="return" description="Returns true if PHPSandbox instance has blacklisted interface $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3518">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3528" package="Default">
        <name>has_whitelist_traits</name>
        <full_name>has_whitelist_traits</full_name>
        <docblock line="3522">
          <description>Query whether PHPSandbox instance has whitelisted traits.</description>
          <long-description></long-description>
          <tag line="3522" name="example" description="$sandbox-&gt;has_whitelist_traits(); //returns number of whitelisted traits, or zero if none whitelisted"/>
          <tag line="3522" name="return" description="Returns the number of whitelisted traits this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3537" package="Default">
        <name>has_blacklist_traits</name>
        <full_name>has_blacklist_traits</full_name>
        <docblock line="3531">
          <description>Query whether PHPSandbox instance has blacklisted traits.</description>
          <long-description></long-description>
          <tag line="3531" name="example" description="$sandbox-&gt;has_blacklist_traits(); //returns number of blacklisted traits, or zero if none blacklisted"/>
          <tag line="3531" name="return" description="Returns the number of blacklisted traits this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3548" package="Default">
        <name>is_whitelisted_trait</name>
        <full_name>is_whitelisted_trait</full_name>
        <docblock line="3540">
          <description>Check if PHPSandbox instance has whitelisted trait name set</description>
          <long-description></long-description>
          <tag line="3540" name="example" description="$sandbox-&gt;is_whitelisted_trait('Test');"/>
          <tag line="3540" name="param" description="String of trait $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3540" name="return" description="Returns true if PHPSandbox instance has whitelisted trait $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3548">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3560" package="Default">
        <name>is_blacklisted_trait</name>
        <full_name>is_blacklisted_trait</full_name>
        <docblock line="3552">
          <description>Check if PHPSandbox instance has blacklisted trait name set</description>
          <long-description></long-description>
          <tag line="3552" name="example" description="$sandbox-&gt;is_blacklisted_trait('Test');"/>
          <tag line="3552" name="param" description="String of trait $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3552" name="return" description="Returns true if PHPSandbox instance has blacklisted trait $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3560">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3570" package="Default">
        <name>has_whitelist_keywords</name>
        <full_name>has_whitelist_keywords</full_name>
        <docblock line="3564">
          <description>Query whether PHPSandbox instance has whitelisted keywords.</description>
          <long-description></long-description>
          <tag line="3564" name="example" description="$sandbox-&gt;has_whitelist_keywords(); //returns number of whitelisted keywords, or zero if none whitelisted"/>
          <tag line="3564" name="return" description="Returns the number of whitelisted keywords this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3579" package="Default">
        <name>has_blacklist_keywords</name>
        <full_name>has_blacklist_keywords</full_name>
        <docblock line="3573">
          <description>Query whether PHPSandbox instance has blacklisted keywords.</description>
          <long-description></long-description>
          <tag line="3573" name="example" description="$sandbox-&gt;has_blacklist_keywords(); //returns number of blacklisted keywords, or zero if none blacklisted"/>
          <tag line="3573" name="return" description="Returns the number of blacklisted keywords this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3590" package="Default">
        <name>is_whitelisted_keyword</name>
        <full_name>is_whitelisted_keyword</full_name>
        <docblock line="3582">
          <description>Check if PHPSandbox instance has whitelisted keyword name set</description>
          <long-description></long-description>
          <tag line="3582" name="example" description="$sandbox-&gt;is_whitelisted_keyword('echo');"/>
          <tag line="3582" name="param" description="String of keyword $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3582" name="return" description="Returns true if PHPSandbox instance has whitelisted keyword $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3590">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3602" package="Default">
        <name>is_blacklisted_keyword</name>
        <full_name>is_blacklisted_keyword</full_name>
        <docblock line="3594">
          <description>Check if PHPSandbox instance has blacklisted keyword name set</description>
          <long-description></long-description>
          <tag line="3594" name="example" description="$sandbox-&gt;is_blacklisted_keyword('echo');"/>
          <tag line="3594" name="param" description="String of keyword $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3594" name="return" description="Returns true if PHPSandbox instance has blacklisted keyword $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3602">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3612" package="Default">
        <name>has_whitelist_operators</name>
        <full_name>has_whitelist_operators</full_name>
        <docblock line="3606">
          <description>Query whether PHPSandbox instance has whitelisted operators.</description>
          <long-description></long-description>
          <tag line="3606" name="example" description="$sandbox-&gt;has_whitelist_operators(); //returns number of whitelisted operators, or zero if none whitelisted"/>
          <tag line="3606" name="return" description="Returns the number of whitelisted operators this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3621" package="Default">
        <name>has_blacklist_operators</name>
        <full_name>has_blacklist_operators</full_name>
        <docblock line="3615">
          <description>Query whether PHPSandbox instance has blacklisted operators.</description>
          <long-description></long-description>
          <tag line="3615" name="example" description="$sandbox-&gt;has_blacklist_operators(); //returns number of blacklisted operators, or zero if none blacklisted"/>
          <tag line="3615" name="return" description="Returns the number of blacklisted operators this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3632" package="Default">
        <name>is_whitelisted_operator</name>
        <full_name>is_whitelisted_operator</full_name>
        <docblock line="3624">
          <description>Check if PHPSandbox instance has whitelisted operator name set</description>
          <long-description></long-description>
          <tag line="3624" name="example" description="$sandbox-&gt;is_whitelisted_operator('+');"/>
          <tag line="3624" name="param" description="String of operator $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3624" name="return" description="Returns true if PHPSandbox instance has whitelisted operator $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3632">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3644" package="Default">
        <name>is_blacklisted_operator</name>
        <full_name>is_blacklisted_operator</full_name>
        <docblock line="3636">
          <description>Check if PHPSandbox instance has blacklisted operator name set</description>
          <long-description></long-description>
          <tag line="3636" name="example" description="$sandbox-&gt;is_blacklisted_operator('+');"/>
          <tag line="3636" name="param" description="String of operator $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3636" name="return" description="Returns true if PHPSandbox instance has blacklisted operator $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3644">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3654" package="Default">
        <name>has_whitelist_primitives</name>
        <full_name>has_whitelist_primitives</full_name>
        <docblock line="3648">
          <description>Query whether PHPSandbox instance has whitelisted primitives.</description>
          <long-description></long-description>
          <tag line="3648" name="example" description="$sandbox-&gt;has_whitelist_primitives(); //returns number of whitelisted primitives, or zero if none whitelisted"/>
          <tag line="3648" name="return" description="Returns the number of whitelisted primitives this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3663" package="Default">
        <name>has_blacklist_primitives</name>
        <full_name>has_blacklist_primitives</full_name>
        <docblock line="3657">
          <description>Query whether PHPSandbox instance has blacklisted primitives.</description>
          <long-description></long-description>
          <tag line="3657" name="example" description="$sandbox-&gt;has_blacklist_primitives(); //returns number of blacklisted primitives, or zero if none blacklisted"/>
          <tag line="3657" name="return" description="Returns the number of blacklisted primitives this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3674" package="Default">
        <name>is_whitelisted_primitive</name>
        <full_name>is_whitelisted_primitive</full_name>
        <docblock line="3666">
          <description>Check if PHPSandbox instance has whitelisted primitive name set</description>
          <long-description></long-description>
          <tag line="3666" name="example" description="$sandbox-&gt;is_whitelisted_primitive('array');"/>
          <tag line="3666" name="param" description="String of primitive $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3666" name="return" description="Returns true if PHPSandbox instance has whitelisted primitive $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3674">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3686" package="Default">
        <name>is_blacklisted_primitive</name>
        <full_name>is_blacklisted_primitive</full_name>
        <docblock line="3678">
          <description>Check if PHPSandbox instance has blacklisted primitive name set</description>
          <long-description></long-description>
          <tag line="3678" name="example" description="$sandbox-&gt;is_blacklisted_primitive('array');"/>
          <tag line="3678" name="param" description="String of primitive $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3678" name="return" description="Returns true if PHPSandbox instance has blacklisted primitive $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3686">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3696" package="Default">
        <name>has_whitelist_types</name>
        <full_name>has_whitelist_types</full_name>
        <docblock line="3690">
          <description>Query whether PHPSandbox instance has whitelisted types.</description>
          <long-description></long-description>
          <tag line="3690" name="example" description="$sandbox-&gt;has_whitelist_types(); //returns number of whitelisted types, or zero if none whitelisted"/>
          <tag line="3690" name="return" description="Returns the number of whitelisted types this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3705" package="Default">
        <name>has_blacklist_types</name>
        <full_name>has_blacklist_types</full_name>
        <docblock line="3699">
          <description>Query whether PHPSandbox instance has blacklisted types.</description>
          <long-description></long-description>
          <tag line="3699" name="example" description="$sandbox-&gt;has_blacklist_types(); //returns number of blacklisted types, or zero if none blacklisted"/>
          <tag line="3699" name="return" description="Returns the number of blacklisted types this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3716" package="Default">
        <name>is_whitelisted_type</name>
        <full_name>is_whitelisted_type</full_name>
        <docblock line="3708">
          <description>Check if PHPSandbox instance has whitelisted type name set</description>
          <long-description></long-description>
          <tag line="3708" name="example" description="$sandbox-&gt;is_whitelisted_type('array');"/>
          <tag line="3708" name="param" description="String of type $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3708" name="return" description="Returns true if PHPSandbox instance has whitelisted type $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3716">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3728" package="Default">
        <name>is_blacklisted_type</name>
        <full_name>is_blacklisted_type</full_name>
        <docblock line="3720">
          <description>Check if PHPSandbox instance has blacklisted type name set</description>
          <long-description></long-description>
          <tag line="3720" name="example" description="$sandbox-&gt;is_blacklisted_type('array');"/>
          <tag line="3720" name="param" description="String of type $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3720" name="return" description="Returns true if PHPSandbox instance has blacklisted type $name, false otherwise" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="3728">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3744" package="Default">
        <name>whitelist_func</name>
        <full_name>whitelist_func</full_name>
        <docblock line="3732">
          <description>Whitelist function</description>
          <long-description>&lt;p&gt;You can pass a string of the function name, or pass an array of function names to whitelist&lt;/p&gt;</long-description>
          <tag line="3732" name="example" description="$sandbox-&gt;whitelist_func('var_dump');"/>
          <tag line="3732" name="example" description="$sandbox-&gt;whitelist_func(array('var_dump', 'print_r'));"/>
          <tag line="3732" name="param" description="String of function name, or array of function names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3732" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3744">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3760" package="Default">
        <name>blacklist_func</name>
        <full_name>blacklist_func</full_name>
        <docblock line="3748">
          <description>Blacklist function</description>
          <long-description>&lt;p&gt;You can pass a string of the function name, or pass an array of function names to blacklist&lt;/p&gt;</long-description>
          <tag line="3748" name="example" description="$sandbox-&gt;blacklist_func('var_dump');"/>
          <tag line="3748" name="example" description="$sandbox-&gt;blacklist_func(array('var_dump', 'print_r'));"/>
          <tag line="3748" name="param" description="String of function name, or array of function names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3748" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3760">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3776" package="Default">
        <name>dewhitelist_func</name>
        <full_name>dewhitelist_func</full_name>
        <docblock line="3764">
          <description>Remove function from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of the function name, or pass an array of function names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="3764" name="example" description="$sandbox-&gt;dewhitelist_func('var_dump');"/>
          <tag line="3764" name="example" description="$sandbox-&gt;dewhitelist_func(array('var_dump', 'print_r'));"/>
          <tag line="3764" name="param" description="String of function name or array of function names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3764" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3776">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3792" package="Default">
        <name>deblacklist_func</name>
        <full_name>deblacklist_func</full_name>
        <docblock line="3780">
          <description>Remove function from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of the function name, or pass an array of function names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="3780" name="example" description="$sandbox-&gt;deblacklist_func('var_dump');"/>
          <tag line="3780" name="example" description="$sandbox-&gt;deblacklist_func(array('var_dump', 'print_r'));"/>
          <tag line="3780" name="param" description="String of function name or array of function names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3780" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3792">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3808" package="Default">
        <name>whitelist_var</name>
        <full_name>whitelist_var</full_name>
        <docblock line="3796">
          <description>Whitelist variable</description>
          <long-description>&lt;p&gt;You can pass a string of variable name, or pass an array of the variable names to whitelist&lt;/p&gt;</long-description>
          <tag line="3796" name="example" description="$sandbox-&gt;whitelist_var('a');"/>
          <tag line="3796" name="example" description="$sandbox-&gt;whitelist_var(array('a', 'b'));"/>
          <tag line="3796" name="param" description="String of variable name or array of variable names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3796" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3808">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3823" package="Default">
        <name>blacklist_var</name>
        <full_name>blacklist_var</full_name>
        <docblock line="3811">
          <description>Blacklist variable</description>
          <long-description>&lt;p&gt;You can pass a string of variable name, or pass an array of the variable names to blacklist&lt;/p&gt;</long-description>
          <tag line="3811" name="example" description="$sandbox-&gt;blacklist_var('a');"/>
          <tag line="3811" name="example" description="$sandbox-&gt;blacklist_var(array('a', 'b'));"/>
          <tag line="3811" name="param" description="String of variable name or array of variable names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3811" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3823">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3838" package="Default">
        <name>dewhitelist_var</name>
        <full_name>dewhitelist_var</full_name>
        <docblock line="3826">
          <description>Remove variable from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of variable name, or pass an array of the variable names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="3826" name="example" description="$sandbox-&gt;dewhitelist_var('a');"/>
          <tag line="3826" name="example" description="$sandbox-&gt;dewhitelist_var(array('a', 'b'));"/>
          <tag line="3826" name="param" description="String of variable name or array of variable names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3826" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3838">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3853" package="Default">
        <name>deblacklist_var</name>
        <full_name>deblacklist_var</full_name>
        <docblock line="3841">
          <description>Remove function from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of variable name, or pass an array of the variable names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="3841" name="example" description="$sandbox-&gt;deblacklist_var('a');"/>
          <tag line="3841" name="example" description="$sandbox-&gt;deblacklist_var(array('a', 'b'));"/>
          <tag line="3841" name="param" description="String of variable name or array of variable names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3841" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3853">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3868" package="Default">
        <name>whitelist_global</name>
        <full_name>whitelist_global</full_name>
        <docblock line="3856">
          <description>Whitelist global</description>
          <long-description>&lt;p&gt;You can pass a string of global name, or pass an array of the global names to whitelist&lt;/p&gt;</long-description>
          <tag line="3856" name="example" description="$sandbox-&gt;whitelist_global('a');"/>
          <tag line="3856" name="example" description="$sandbox-&gt;whitelist_global(array('a', 'b'));"/>
          <tag line="3856" name="param" description="String of global name or array of global names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3856" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3868">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3883" package="Default">
        <name>blacklist_global</name>
        <full_name>blacklist_global</full_name>
        <docblock line="3871">
          <description>Blacklist global</description>
          <long-description>&lt;p&gt;You can pass a string of global name, or pass an array of the global names to blacklist&lt;/p&gt;</long-description>
          <tag line="3871" name="example" description="$sandbox-&gt;blacklist_global('a');"/>
          <tag line="3871" name="example" description="$sandbox-&gt;blacklist_global(array('a', 'b'));"/>
          <tag line="3871" name="param" description="String of global name or array of global names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3871" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3883">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3898" package="Default">
        <name>dewhitelist_global</name>
        <full_name>dewhitelist_global</full_name>
        <docblock line="3886">
          <description>Remove global from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of global name, or pass an array of the global names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="3886" name="example" description="$sandbox-&gt;dewhitelist_global('a');"/>
          <tag line="3886" name="example" description="$sandbox-&gt;dewhitelist_global(array('a', 'b'));"/>
          <tag line="3886" name="param" description="String of global name or array of global names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3886" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3898">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3913" package="Default">
        <name>deblacklist_global</name>
        <full_name>deblacklist_global</full_name>
        <docblock line="3901">
          <description>Remove global from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of global name, or pass an array of the global names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="3901" name="example" description="$sandbox-&gt;deblacklist_global('a');"/>
          <tag line="3901" name="example" description="$sandbox-&gt;deblacklist_global(array('a', 'b'));"/>
          <tag line="3901" name="param" description="String of global name or array of global names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3901" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3913">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3934" package="Default">
        <name>whitelist_superglobal</name>
        <full_name>whitelist_superglobal</full_name>
        <docblock line="3916">
          <description>Whitelist superglobal or superglobal key</description>
          <long-description>&lt;p&gt;You can pass a string of the superglobal name, or a string of the superglobal name and a string of the key,
or pass an array of superglobal names, or an associative array of superglobal names and their keys to whitelist&lt;/p&gt;</long-description>
          <tag line="3916" name="example" description="$sandbox-&gt;whitelist_superglobal('_GET');"/>
          <tag line="3916" name="example" description="$sandbox-&gt;whitelist_superglobal('_GET', 'page');"/>
          <tag line="3916" name="example" description="$sandbox-&gt;whitelist_superglobal(array('_GET', '_POST'));"/>
          <tag line="3916" name="example" description="$sandbox-&gt;whitelist_superglobal(array('_GET' =&gt; 'page'));"/>
          <tag line="3916" name="param" description="String of superglobal name, or an array of superglobal names, or an associative array of superglobal names and their keys to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3916" name="param" description="String of superglobal key to whitelist" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3916" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3934">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="3934">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="3992" package="Default">
        <name>blacklist_superglobal</name>
        <full_name>blacklist_superglobal</full_name>
        <docblock line="3974">
          <description>Blacklist superglobal or superglobal key
*
You can pass a string of the superglobal name, or a string of the superglobal name and a string of the key,
or pass an array of superglobal names, or an associative array of superglobal names and their keys to blacklist</description>
          <long-description></long-description>
          <tag line="3974" name="example" description="$sandbox-&gt;blacklist_superglobal('_GET');"/>
          <tag line="3974" name="example" description="$sandbox-&gt;blacklist_superglobal('_GET', 'page');"/>
          <tag line="3974" name="example" description="$sandbox-&gt;blacklist_superglobal(array('_GET', '_POST'));"/>
          <tag line="3974" name="example" description="$sandbox-&gt;blacklist_superglobal(array('_GET' =&gt; 'page'));"/>
          <tag line="3974" name="param" description="String of superglobal name, or an array of superglobal names, or an associative array of superglobal names and their keys to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="3974" name="param" description="String of superglobal key to blacklist" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="3974" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="3992">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="3992">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4050" package="Default">
        <name>dewhitelist_superglobal</name>
        <full_name>dewhitelist_superglobal</full_name>
        <docblock line="4032">
          <description>Remove superglobal or superglobal key from whitelist
*
You can pass a string of the superglobal name, or a string of the superglobal name and a string of the key,
or pass an array of superglobal names, or an associative array of superglobal names and their keys to remove from whitelist</description>
          <long-description></long-description>
          <tag line="4032" name="example" description="$sandbox-&gt;dewhitelist_superglobal('_GET');"/>
          <tag line="4032" name="example" description="$sandbox-&gt;dewhitelist_superglobal('_GET', 'page');"/>
          <tag line="4032" name="example" description="$sandbox-&gt;dewhitelist_superglobal(array('_GET', '_POST'));"/>
          <tag line="4032" name="example" description="$sandbox-&gt;dewhitelist_superglobal(array('_GET' =&gt; 'page'));"/>
          <tag line="4032" name="param" description="String of superglobal name, or an array of superglobal names, or an associative array of superglobal names and their keys to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4032" name="param" description="String of superglobal key to remove from whitelist" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4032" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4050">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="4050">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4101" package="Default">
        <name>deblacklist_superglobal</name>
        <full_name>deblacklist_superglobal</full_name>
        <docblock line="4083">
          <description>Remove superglobal or superglobal key from blacklist
*
You can pass a string of the superglobal name, or a string of the superglobal name and a string of the key,
or pass an array of superglobal names, or an associative array of superglobal names and their keys to remove from blacklist</description>
          <long-description></long-description>
          <tag line="4083" name="example" description="$sandbox-&gt;deblacklist_superglobal('_GET');"/>
          <tag line="4083" name="example" description="$sandbox-&gt;deblacklist_superglobal('_GET', 'page');"/>
          <tag line="4083" name="example" description="$sandbox-&gt;deblacklist_superglobal(array('_GET', '_POST'));"/>
          <tag line="4083" name="example" description="$sandbox-&gt;deblacklist_superglobal(array('_GET' =&gt; 'page'));"/>
          <tag line="4083" name="param" description="String of superglobal name, or an array of superglobal names, or an associative array of superglobal names and their keys to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4083" name="param" description="String of superglobal key to remove from blacklist" type="string" variable="$key">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4083" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4101">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="4101">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4146" package="Default">
        <name>whitelist_const</name>
        <full_name>whitelist_const</full_name>
        <docblock line="4134">
          <description>Whitelist constant</description>
          <long-description>&lt;p&gt;You can pass a string of constant name, or pass an array of the constant names to whitelist&lt;/p&gt;</long-description>
          <tag line="4134" name="example" description="$sandbox-&gt;whitelist_const('FOO');"/>
          <tag line="4134" name="example" description="$sandbox-&gt;whitelist_const(array('FOO', 'BAR'));"/>
          <tag line="4134" name="param" description="String of constant name or array of constant names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4134" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4146">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4161" package="Default">
        <name>blacklist_const</name>
        <full_name>blacklist_const</full_name>
        <docblock line="4149">
          <description>Blacklist constant</description>
          <long-description>&lt;p&gt;You can pass a string of constant name, or pass an array of the constant names to blacklist&lt;/p&gt;</long-description>
          <tag line="4149" name="example" description="$sandbox-&gt;blacklist_const('FOO');"/>
          <tag line="4149" name="example" description="$sandbox-&gt;blacklist_const(array('FOO', 'BAR'));"/>
          <tag line="4149" name="param" description="String of constant name or array of constant names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4149" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4161">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4176" package="Default">
        <name>dewhitelist_const</name>
        <full_name>dewhitelist_const</full_name>
        <docblock line="4164">
          <description>Remove constant from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of constant name, or pass an array of the constant names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4164" name="example" description="$sandbox-&gt;dewhitelist_const('FOO');"/>
          <tag line="4164" name="example" description="$sandbox-&gt;dewhitelist_const(array('FOO', 'BAR'));"/>
          <tag line="4164" name="param" description="String of constant name or array of constant names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4164" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4176">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4191" package="Default">
        <name>deblacklist_const</name>
        <full_name>deblacklist_const</full_name>
        <docblock line="4179">
          <description>Remove constant from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of constant name, or pass an array of the constant names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4179" name="example" description="$sandbox-&gt;deblacklist_const('FOO');"/>
          <tag line="4179" name="example" description="$sandbox-&gt;deblacklist_const(array('FOO', 'BAR'));"/>
          <tag line="4179" name="param" description="String of constant name or array of constant names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4179" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4191">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4206" package="Default">
        <name>whitelist_magic_const</name>
        <full_name>whitelist_magic_const</full_name>
        <docblock line="4194">
          <description>Whitelist magic constant</description>
          <long-description>&lt;p&gt;You can pass a string of magic constant name, or pass an array of the magic constant names to whitelist&lt;/p&gt;</long-description>
          <tag line="4194" name="example" description="$sandbox-&gt;whitelist_magic_const('__LINE__');"/>
          <tag line="4194" name="example" description="$sandbox-&gt;whitelist_magic_const(array('__LINE__', '__FILE__'));"/>
          <tag line="4194" name="param" description="String of magic constant name or array of magic constant names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4194" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4206">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4222" package="Default">
        <name>blacklist_magic_const</name>
        <full_name>blacklist_magic_const</full_name>
        <docblock line="4210">
          <description>Blacklist magic constant</description>
          <long-description>&lt;p&gt;You can pass a string of magic constant name, or pass an array of the magic constant names to blacklist&lt;/p&gt;</long-description>
          <tag line="4210" name="example" description="$sandbox-&gt;blacklist_magic_const('__LINE__');"/>
          <tag line="4210" name="example" description="$sandbox-&gt;blacklist_magic_const(array('__LINE__', '__FILE__'));"/>
          <tag line="4210" name="param" description="String of magic constant name or array of magic constant names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4210" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4222">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4238" package="Default">
        <name>dewhitelist_magic_const</name>
        <full_name>dewhitelist_magic_const</full_name>
        <docblock line="4226">
          <description>Remove magic constant from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of magic constant name, or pass an array of the magic constant names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4226" name="example" description="$sandbox-&gt;dewhitelist_magic_const('__LINE__');"/>
          <tag line="4226" name="example" description="$sandbox-&gt;dewhitelist_magic_const(array('__LINE__', '__FILE__'));"/>
          <tag line="4226" name="param" description="String of magic constant name or array of magic constant names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4226" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4238">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4254" package="Default">
        <name>deblacklist_magic_const</name>
        <full_name>deblacklist_magic_const</full_name>
        <docblock line="4242">
          <description>Remove magic constant from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of magic constant name, or pass an array of the magic constant names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4242" name="example" description="$sandbox-&gt;deblacklist_magic_const('__LINE__');"/>
          <tag line="4242" name="example" description="$sandbox-&gt;deblacklist_magic_const(array('__LINE__', '__FILE__'));"/>
          <tag line="4242" name="param" description="String of magic constant name or array of magic constant names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4242" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4254">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4270" package="Default">
        <name>whitelist_namespace</name>
        <full_name>whitelist_namespace</full_name>
        <docblock line="4258">
          <description>Whitelist namespace</description>
          <long-description>&lt;p&gt;You can pass a string of namespace name, or pass an array of the namespace names to whitelist&lt;/p&gt;</long-description>
          <tag line="4258" name="example" description="$sandbox-&gt;whitelist_namespace('Foo');"/>
          <tag line="4258" name="example" description="$sandbox-&gt;whitelist_namespace(array('Foo', 'Bar'));"/>
          <tag line="4258" name="param" description="String of namespace name or array of namespace names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4258" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4270">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4286" package="Default">
        <name>blacklist_namespace</name>
        <full_name>blacklist_namespace</full_name>
        <docblock line="4274">
          <description>Blacklist namespace</description>
          <long-description>&lt;p&gt;You can pass a string of namespace name, or pass an array of the namespace names to blacklist&lt;/p&gt;</long-description>
          <tag line="4274" name="example" description="$sandbox-&gt;blacklist_namespace('Foo');"/>
          <tag line="4274" name="example" description="$sandbox-&gt;blacklist_namespace(array('Foo', 'Bar'));"/>
          <tag line="4274" name="param" description="String of namespace name or array of namespace names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4274" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4286">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4302" package="Default">
        <name>dewhitelist_namespace</name>
        <full_name>dewhitelist_namespace</full_name>
        <docblock line="4290">
          <description>Remove namespace from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of namespace name, or pass an array of the namespace names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4290" name="example" description="$sandbox-&gt;dewhitelist_namespace('Foo');"/>
          <tag line="4290" name="example" description="$sandbox-&gt;dewhitelist_namespace(array('Foo', 'Bar'));"/>
          <tag line="4290" name="param" description="String of namespace name or array of namespace names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4290" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4302">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4318" package="Default">
        <name>deblacklist_namespace</name>
        <full_name>deblacklist_namespace</full_name>
        <docblock line="4306">
          <description>Remove namespace from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of namespace name, or pass an array of the namespace names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4306" name="example" description="$sandbox-&gt;deblacklist_namespace('Foo');"/>
          <tag line="4306" name="example" description="$sandbox-&gt;deblacklist_namespace(array('Foo', 'Bar'));"/>
          <tag line="4306" name="param" description="String of namespace name or array of namespace names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4306" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4318">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4334" package="Default">
        <name>whitelist_alias</name>
        <full_name>whitelist_alias</full_name>
        <docblock line="4322">
          <description>Whitelist alias</description>
          <long-description>&lt;p&gt;You can pass a string of alias name, or pass an array of the alias names to whitelist&lt;/p&gt;</long-description>
          <tag line="4322" name="example" description="$sandbox-&gt;whitelist_alias('Foo');"/>
          <tag line="4322" name="example" description="$sandbox-&gt;whitelist_alias(array('Foo', 'Bar'));"/>
          <tag line="4322" name="param" description="String of alias names  or array of alias names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4322" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4334">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4350" package="Default">
        <name>blacklist_alias</name>
        <full_name>blacklist_alias</full_name>
        <docblock line="4338">
          <description>Blacklist alias</description>
          <long-description>&lt;p&gt;You can pass a string of alias name, or pass an array of the alias names to blacklist&lt;/p&gt;</long-description>
          <tag line="4338" name="example" description="$sandbox-&gt;blacklist_alias('Foo');"/>
          <tag line="4338" name="example" description="$sandbox-&gt;blacklist_alias(array('Foo', 'Bar'));"/>
          <tag line="4338" name="param" description="String of alias name or array of alias names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4338" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4350">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4366" package="Default">
        <name>dewhitelist_alias</name>
        <full_name>dewhitelist_alias</full_name>
        <docblock line="4354">
          <description>Remove alias from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of alias name, or pass an array of the alias names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4354" name="example" description="$sandbox-&gt;dewhitelist_alias('Foo');"/>
          <tag line="4354" name="example" description="$sandbox-&gt;dewhitelist_alias(array('Foo', 'Bar'));"/>
          <tag line="4354" name="param" description="String of alias name or array of alias names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4354" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4366">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4382" package="Default">
        <name>deblacklist_alias</name>
        <full_name>deblacklist_alias</full_name>
        <docblock line="4370">
          <description>Remove alias from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of alias name, or pass an array of the alias names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4370" name="example" description="$sandbox-&gt;deblacklist_alias('Foo');"/>
          <tag line="4370" name="example" description="$sandbox-&gt;deblacklist_alias(array('Foo', 'Bar'));"/>
          <tag line="4370" name="param" description="String of alias name or array of alias names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4370" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4382">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4400" package="Default">
        <name>whitelist_use</name>
        <full_name>whitelist_use</full_name>
        <docblock line="4386">
          <description>Whitelist use (or alias)</description>
          <long-description>&lt;p&gt;You can pass a string of use (or alias) name, or pass an array of the use (or alias) names to whitelist&lt;/p&gt;</long-description>
          <tag line="4386" name="alias" description="whitelist_alias();"/>
          <tag line="4386" name="example" description="$sandbox-&gt;whitelist_use('Foo');"/>
          <tag line="4386" name="example" description="$sandbox-&gt;whitelist_use(array('Foo', 'Bar'));"/>
          <tag line="4386" name="param" description="String of use (or alias) name or array of use (or alias) names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4386" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4400">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4417" package="Default">
        <name>blacklist_use</name>
        <full_name>blacklist_use</full_name>
        <docblock line="4403">
          <description>Blacklist use (or alias)</description>
          <long-description>&lt;p&gt;You can pass a string of use (or alias) name, or pass an array of the use (or alias) names to blacklist&lt;/p&gt;</long-description>
          <tag line="4403" name="alias" description="blacklist_alias();"/>
          <tag line="4403" name="example" description="$sandbox-&gt;blacklist_use('Foo');"/>
          <tag line="4403" name="example" description="$sandbox-&gt;blacklist_use(array('Foo', 'Bar'));"/>
          <tag line="4403" name="param" description="String of use (or alias) name or array of use (or alias) names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4403" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4417">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4434" package="Default">
        <name>dewhitelist_use</name>
        <full_name>dewhitelist_use</full_name>
        <docblock line="4420">
          <description>Remove use (or alias) from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of use (or alias name, or pass an array of the use (or alias) names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4420" name="alias" description="dewhitelist_alias();"/>
          <tag line="4420" name="example" description="$sandbox-&gt;dewhitelist_use('Foo');"/>
          <tag line="4420" name="example" description="$sandbox-&gt;dewhitelist_use(array('Foo', 'Bar'));"/>
          <tag line="4420" name="param" description="String of use (or alias) name or array of use (or alias) names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4420" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4434">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4451" package="Default">
        <name>deblacklist_use</name>
        <full_name>deblacklist_use</full_name>
        <docblock line="4437">
          <description>Remove use (or alias) from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of use (or alias name, or pass an array of the use (or alias) names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4437" name="alias" description="deblacklist_alias();"/>
          <tag line="4437" name="example" description="$sandbox-&gt;deblacklist_use('Foo');"/>
          <tag line="4437" name="example" description="$sandbox-&gt;deblacklist_use(array('Foo', 'Bar'));"/>
          <tag line="4437" name="param" description="String of use (or alias) name or array of use (or alias) names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4437" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4451">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4466" package="Default">
        <name>whitelist_class</name>
        <full_name>whitelist_class</full_name>
        <docblock line="4454">
          <description>Whitelist class</description>
          <long-description>&lt;p&gt;You can pass a string of class name, or pass an array of the class names to whitelist&lt;/p&gt;</long-description>
          <tag line="4454" name="example" description="$sandbox-&gt;whitelist_class('Foo');"/>
          <tag line="4454" name="example" description="$sandbox-&gt;whitelist_class(array('Foo', 'Bar'));"/>
          <tag line="4454" name="param" description="String of class name or array of class names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4454" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4466">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4482" package="Default">
        <name>blacklist_class</name>
        <full_name>blacklist_class</full_name>
        <docblock line="4470">
          <description>Blacklist class</description>
          <long-description>&lt;p&gt;You can pass a string of class name, or pass an array of the class names to blacklist&lt;/p&gt;</long-description>
          <tag line="4470" name="example" description="$sandbox-&gt;blacklist_class('Foo');"/>
          <tag line="4470" name="example" description="$sandbox-&gt;blacklist_class(array('Foo', 'Bar'));"/>
          <tag line="4470" name="param" description="String of class name or array of class names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4470" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4482">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4498" package="Default">
        <name>dewhitelist_class</name>
        <full_name>dewhitelist_class</full_name>
        <docblock line="4486">
          <description>Remove class from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of class name, or pass an array of the class names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4486" name="example" description="$sandbox-&gt;dewhitelist_class('Foo');"/>
          <tag line="4486" name="example" description="$sandbox-&gt;dewhitelist_class(array('Foo', 'Bar'));"/>
          <tag line="4486" name="param" description="String of class name or array of class names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4486" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4498">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4514" package="Default">
        <name>deblacklist_class</name>
        <full_name>deblacklist_class</full_name>
        <docblock line="4502">
          <description>Remove class from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of class name, or pass an array of the class names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4502" name="example" description="$sandbox-&gt;deblacklist_class('Foo');"/>
          <tag line="4502" name="example" description="$sandbox-&gt;deblacklist_class(array('Foo', 'Bar'));"/>
          <tag line="4502" name="param" description="String of class name or array of class names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4502" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4514">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4530" package="Default">
        <name>whitelist_interface</name>
        <full_name>whitelist_interface</full_name>
        <docblock line="4518">
          <description>Whitelist interface</description>
          <long-description>&lt;p&gt;You can pass a string of interface name, or pass an array of the interface names to whitelist&lt;/p&gt;</long-description>
          <tag line="4518" name="example" description="$sandbox-&gt;whitelist_interface('Foo');"/>
          <tag line="4518" name="example" description="$sandbox-&gt;whitelist_interface(array('Foo', 'Bar'));"/>
          <tag line="4518" name="param" description="String of interface name or array of interface names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4518" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4530">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4546" package="Default">
        <name>blacklist_interface</name>
        <full_name>blacklist_interface</full_name>
        <docblock line="4534">
          <description>Blacklist interface</description>
          <long-description>&lt;p&gt;You can pass a string of interface name, or pass an array of the interface names to blacklist&lt;/p&gt;</long-description>
          <tag line="4534" name="example" description="$sandbox-&gt;blacklist_interface('Foo');"/>
          <tag line="4534" name="example" description="$sandbox-&gt;blacklist_interface(array('Foo', 'Bar'));"/>
          <tag line="4534" name="param" description="String of interface name or array of interface names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4534" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4546">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4562" package="Default">
        <name>dewhitelist_interface</name>
        <full_name>dewhitelist_interface</full_name>
        <docblock line="4550">
          <description>Remove interface from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of interface name, or pass an array of the interface names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4550" name="example" description="$sandbox-&gt;dewhitelist_interface('Foo');"/>
          <tag line="4550" name="example" description="$sandbox-&gt;dewhitelist_interface(array('Foo', 'Bar'));"/>
          <tag line="4550" name="param" description="String of interface name or array of interface names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4550" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4562">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4578" package="Default">
        <name>deblacklist_interface</name>
        <full_name>deblacklist_interface</full_name>
        <docblock line="4566">
          <description>Remove interface from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of interface name, or pass an array of the interface names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4566" name="example" description="$sandbox-&gt;deblacklist_interface('Foo');"/>
          <tag line="4566" name="example" description="$sandbox-&gt;deblacklist_interface(array('Foo', 'Bar'));"/>
          <tag line="4566" name="param" description="String of interface name or array of interface names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4566" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4578">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4594" package="Default">
        <name>whitelist_trait</name>
        <full_name>whitelist_trait</full_name>
        <docblock line="4582">
          <description>Whitelist trait</description>
          <long-description>&lt;p&gt;You can pass a string of trait name, or pass an array of the trait names to whitelist&lt;/p&gt;</long-description>
          <tag line="4582" name="example" description="$sandbox-&gt;whitelist_trait('Foo');"/>
          <tag line="4582" name="example" description="$sandbox-&gt;whitelist_trait(array('Foo', 'Bar'));"/>
          <tag line="4582" name="param" description="String of trait name or array of trait names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4582" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4594">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4610" package="Default">
        <name>blacklist_trait</name>
        <full_name>blacklist_trait</full_name>
        <docblock line="4598">
          <description>Blacklist trait</description>
          <long-description>&lt;p&gt;You can pass a string of trait name, or pass an array of the trait names to blacklist&lt;/p&gt;</long-description>
          <tag line="4598" name="example" description="$sandbox-&gt;blacklist_trait('Foo');"/>
          <tag line="4598" name="example" description="$sandbox-&gt;blacklist_trait(array('Foo', 'Bar'));"/>
          <tag line="4598" name="param" description="String of trait name or array of trait names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4598" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4610">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4626" package="Default">
        <name>dewhitelist_trait</name>
        <full_name>dewhitelist_trait</full_name>
        <docblock line="4614">
          <description>Remove trait from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of trait name, or pass an array of the trait names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4614" name="example" description="$sandbox-&gt;dewhitelist_trait('Foo');"/>
          <tag line="4614" name="example" description="$sandbox-&gt;dewhitelist_trait(array('Foo', 'Bar'));"/>
          <tag line="4614" name="param" description="String of trait name or array of trait names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4614" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4626">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4642" package="Default">
        <name>deblacklist_trait</name>
        <full_name>deblacklist_trait</full_name>
        <docblock line="4630">
          <description>Remove trait from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of trait name, or pass an array of the trait names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4630" name="example" description="$sandbox-&gt;deblacklist_trait('Foo');"/>
          <tag line="4630" name="example" description="$sandbox-&gt;deblacklist_trait(array('Foo', 'Bar'));"/>
          <tag line="4630" name="param" description="String of trait name or array of trait names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4630" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4642">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4658" package="Default">
        <name>whitelist_keyword</name>
        <full_name>whitelist_keyword</full_name>
        <docblock line="4646">
          <description>Whitelist keyword</description>
          <long-description>&lt;p&gt;You can pass a string of keyword name, or pass an array of the keyword names to whitelist&lt;/p&gt;</long-description>
          <tag line="4646" name="example" description="$sandbox-&gt;whitelist_keyword('echo');"/>
          <tag line="4646" name="example" description="$sandbox-&gt;whitelist_keyword(array('echo', 'eval'));"/>
          <tag line="4646" name="param" description="String of keyword name or array of keyword names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4646" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4658">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4674" package="Default">
        <name>blacklist_keyword</name>
        <full_name>blacklist_keyword</full_name>
        <docblock line="4662">
          <description>Blacklist keyword</description>
          <long-description>&lt;p&gt;You can pass a string of keyword name, or pass an array of the keyword names to blacklist&lt;/p&gt;</long-description>
          <tag line="4662" name="example" description="$sandbox-&gt;blacklist_keyword('echo');"/>
          <tag line="4662" name="example" description="$sandbox-&gt;blacklist_keyword(array('echo', 'eval'));"/>
          <tag line="4662" name="param" description="String of keyword name or array of keyword names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4662" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4674">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4690" package="Default">
        <name>dewhitelist_keyword</name>
        <full_name>dewhitelist_keyword</full_name>
        <docblock line="4678">
          <description>Remove keyword from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of keyword name, or pass an array of the keyword names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4678" name="example" description="$sandbox-&gt;dewhitelist_keyword('echo');"/>
          <tag line="4678" name="example" description="$sandbox-&gt;dewhitelist_keyword(array('echo', 'eval'));"/>
          <tag line="4678" name="param" description="String of keyword name or array of keyword names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4678" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4690">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4706" package="Default">
        <name>deblacklist_keyword</name>
        <full_name>deblacklist_keyword</full_name>
        <docblock line="4694">
          <description>Remove keyword from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of keyword name, or pass an array of the keyword names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4694" name="example" description="$sandbox-&gt;deblacklist_keyword('echo');"/>
          <tag line="4694" name="example" description="$sandbox-&gt;deblacklist_keyword(array('echo', 'eval'));"/>
          <tag line="4694" name="param" description="String of keyword name or array of keyword names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4694" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4706">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4722" package="Default">
        <name>whitelist_operator</name>
        <full_name>whitelist_operator</full_name>
        <docblock line="4710">
          <description>Whitelist operator</description>
          <long-description>&lt;p&gt;You can pass a string of operator name, or pass an array of the operator names to whitelist&lt;/p&gt;</long-description>
          <tag line="4710" name="example" description="$sandbox-&gt;whitelist_operator('+');"/>
          <tag line="4710" name="example" description="$sandbox-&gt;whitelist_operator(array('+', '-'));"/>
          <tag line="4710" name="param" description="String of operator name or array of operator names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4710" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4722">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4738" package="Default">
        <name>blacklist_operator</name>
        <full_name>blacklist_operator</full_name>
        <docblock line="4726">
          <description>Blacklist operator</description>
          <long-description>&lt;p&gt;You can pass a string of operator name, or pass an array of the operator names to blacklist&lt;/p&gt;</long-description>
          <tag line="4726" name="example" description="$sandbox-&gt;blacklist_operator('+');"/>
          <tag line="4726" name="example" description="$sandbox-&gt;blacklist_operator(array('+', '-'));"/>
          <tag line="4726" name="param" description="String of operator name or array of operator names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4726" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4738">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4754" package="Default">
        <name>dewhitelist_operator</name>
        <full_name>dewhitelist_operator</full_name>
        <docblock line="4742">
          <description>Remove operator from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of operator name, or pass an array of the operator names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4742" name="example" description="$sandbox-&gt;dewhitelist_operator('+');"/>
          <tag line="4742" name="example" description="$sandbox-&gt;dewhitelist_operator(array('+', '-'));"/>
          <tag line="4742" name="param" description="String of operator name or array of operator names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4742" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4754">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4770" package="Default">
        <name>deblacklist_operator</name>
        <full_name>deblacklist_operator</full_name>
        <docblock line="4758">
          <description>Remove operator from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of operator name, or pass an array of the operator names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4758" name="example" description="$sandbox-&gt;deblacklist_operator('+');"/>
          <tag line="4758" name="example" description="$sandbox-&gt;deblacklist_operator(array('+', '-'));"/>
          <tag line="4758" name="param" description="String of operator name or array of operator names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4758" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4770">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4786" package="Default">
        <name>whitelist_primitive</name>
        <full_name>whitelist_primitive</full_name>
        <docblock line="4774">
          <description>Whitelist primitive</description>
          <long-description>&lt;p&gt;You can pass a string of primitive name, or pass an array of the primitive names to whitelist&lt;/p&gt;</long-description>
          <tag line="4774" name="example" description="$sandbox-&gt;whitelist_primitive('int');"/>
          <tag line="4774" name="example" description="$sandbox-&gt;whitelist_primitive(array('int', 'float'));"/>
          <tag line="4774" name="param" description="String of primitive name or array of primitive names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4774" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4786">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4802" package="Default">
        <name>blacklist_primitive</name>
        <full_name>blacklist_primitive</full_name>
        <docblock line="4790">
          <description>Blacklist primitive</description>
          <long-description>&lt;p&gt;You can pass a string of primitive name, or pass an array of the primitive names to blacklist&lt;/p&gt;</long-description>
          <tag line="4790" name="example" description="$sandbox-&gt;blacklist_primitive('int');"/>
          <tag line="4790" name="example" description="$sandbox-&gt;blacklist_primitive(array('int', 'float'));"/>
          <tag line="4790" name="param" description="String of primitive name or array of primitive names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4790" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4802">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4818" package="Default">
        <name>dewhitelist_primitive</name>
        <full_name>dewhitelist_primitive</full_name>
        <docblock line="4806">
          <description>Remove primitive from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of primitive name, or pass an array of the primitive names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4806" name="example" description="$sandbox-&gt;dewhitelist_primitive('int');"/>
          <tag line="4806" name="example" description="$sandbox-&gt;dewhitelist_primitive(array('int', 'float'));"/>
          <tag line="4806" name="param" description="String of primitive name or array of primitive names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4806" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4818">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4834" package="Default">
        <name>deblacklist_primitive</name>
        <full_name>deblacklist_primitive</full_name>
        <docblock line="4822">
          <description>Remove primitive from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of primitive name, or pass an array of the primitive names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4822" name="example" description="$sandbox-&gt;deblacklist_primitive('int');"/>
          <tag line="4822" name="example" description="$sandbox-&gt;deblacklist_primitive(array('int', 'float'));"/>
          <tag line="4822" name="param" description="String of primitive name or array of primitive names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4822" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4834">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4850" package="Default">
        <name>whitelist_type</name>
        <full_name>whitelist_type</full_name>
        <docblock line="4838">
          <description>Whitelist type</description>
          <long-description>&lt;p&gt;You can pass a string of type name, or pass an array of the type names to whitelist&lt;/p&gt;</long-description>
          <tag line="4838" name="example" description="$sandbox-&gt;whitelist_type('PHPSandbox');"/>
          <tag line="4838" name="example" description="$sandbox-&gt;whitelist_type(array('PHPSandbox', 'PHPParser'));"/>
          <tag line="4838" name="param" description="String of type name or array of type names to whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4838" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4850">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4866" package="Default">
        <name>blacklist_type</name>
        <full_name>blacklist_type</full_name>
        <docblock line="4854">
          <description>Blacklist type</description>
          <long-description>&lt;p&gt;You can pass a string of type name, or pass an array of the type names to blacklist&lt;/p&gt;</long-description>
          <tag line="4854" name="example" description="$sandbox-&gt;blacklist_type('PHPSandbox');"/>
          <tag line="4854" name="example" description="$sandbox-&gt;blacklist_type(array('PHPSandbox', 'PHPParser'));"/>
          <tag line="4854" name="param" description="String of type name or array of type names to blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4854" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4866">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4882" package="Default">
        <name>dewhitelist_type</name>
        <full_name>dewhitelist_type</full_name>
        <docblock line="4870">
          <description>Remove type from whitelist</description>
          <long-description>&lt;p&gt;You can pass a string of type name, or pass an array of the type names to remove from whitelist&lt;/p&gt;</long-description>
          <tag line="4870" name="example" description="$sandbox-&gt;dewhitelist_type('PHPSandbox');"/>
          <tag line="4870" name="example" description="$sandbox-&gt;dewhitelist_type(array('PHPSandbox', 'PHPParser'));"/>
          <tag line="4870" name="param" description="String of type name or array of type names to remove from whitelist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4870" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4882">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4898" package="Default">
        <name>deblacklist_type</name>
        <full_name>deblacklist_type</full_name>
        <docblock line="4886">
          <description>Remove type from blacklist</description>
          <long-description>&lt;p&gt;You can pass a string of type name, or pass an array of the type names to remove from blacklist&lt;/p&gt;</long-description>
          <tag line="4886" name="example" description="$sandbox-&gt;deblacklist_type('PHPSandbox');"/>
          <tag line="4886" name="example" description="$sandbox-&gt;deblacklist_type(array('PHPSandbox', 'PHPParser'));"/>
          <tag line="4886" name="param" description="String of type name or array of type names to remove from blacklist" type="string|array" variable="$name">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="4886" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="4898">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4908" package="Default">
        <name>check_func</name>
        <full_name>check_func</full_name>
        <docblock line="4902">
          <description>Check function name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="4902" name="param" description="String of the function name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4902" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="4902" name="return" description="Returns true if function is valid, this is used for testing closures" type="bool">
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="4908">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4936" package="Default">
        <name>check_var</name>
        <full_name>check_var</full_name>
        <docblock line="4932">
          <description>Check variable name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="4932" name="param" description="String of the variable name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4932" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="4936">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4959" package="Default">
        <name>check_global</name>
        <full_name>check_global</full_name>
        <docblock line="4955">
          <description>Check global name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="4955" name="param" description="String of the global name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4955" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="4959">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="4980" package="Default">
        <name>check_superglobal</name>
        <full_name>check_superglobal</full_name>
        <docblock line="4976">
          <description>Check superglobal name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="4976" name="param" description="String of the superglobal name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="4976" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="4980">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5004" package="Default">
        <name>check_const</name>
        <full_name>check_const</full_name>
        <docblock line="5000">
          <description>Check constant name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5000" name="param" description="String of the constant name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5000" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5004">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5035" package="Default">
        <name>check_magic_const</name>
        <full_name>check_magic_const</full_name>
        <docblock line="5031">
          <description>Check magic constant name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5031" name="param" description="String of the magic constant name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5031" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5035">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5059" package="Default">
        <name>check_namespace</name>
        <full_name>check_namespace</full_name>
        <docblock line="5055">
          <description>Check namespace name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5055" name="param" description="String of the namespace name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5055" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5059">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5081" package="Default">
        <name>check_alias</name>
        <full_name>check_alias</full_name>
        <docblock line="5077">
          <description>Check alias name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5077" name="param" description="String of the alias name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5077" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5081">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5106" package="Default">
        <name>check_use</name>
        <full_name>check_use</full_name>
        <docblock line="5099">
          <description>Check use (or alias) name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5099" name="alias" description="check_alias();"/>
          <tag line="5099" name="param" description="String of the use (or alias) name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5099" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5106">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5114" package="Default">
        <name>check_class</name>
        <full_name>check_class</full_name>
        <docblock line="5109">
          <description>Check class name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5109" name="param" description="String of the class name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5109" name="param" description="Flag whether this is an extended class" type="bool" variable="$extends">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="5109" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5114">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="5114">
          <name>$extends</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5139" package="Default">
        <name>check_interface</name>
        <full_name>check_interface</full_name>
        <docblock line="5135">
          <description>Check interface name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5135" name="param" description="String of the interface name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5135" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5139">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5163" package="Default">
        <name>check_trait</name>
        <full_name>check_trait</full_name>
        <docblock line="5159">
          <description>Check trait name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5159" name="param" description="String of the trait name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5159" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5163">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5187" package="Default">
        <name>check_keyword</name>
        <full_name>check_keyword</full_name>
        <docblock line="5183">
          <description>Check keyword name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5183" name="param" description="String of the keyword name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5183" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5187">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5207" package="Default">
        <name>check_operator</name>
        <full_name>check_operator</full_name>
        <docblock line="5203">
          <description>Check operator name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5203" name="param" description="String of the type operator to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5203" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5207">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5227" package="Default">
        <name>check_primitive</name>
        <full_name>check_primitive</full_name>
        <docblock line="5223">
          <description>Check primitive name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5223" name="param" description="String of the primitive name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5223" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5227">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5247" package="Default">
        <name>check_type</name>
        <full_name>check_type</full_name>
        <docblock line="5243">
          <description>Check type name against PHPSandbox validation rules.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="5243" name="param" description="String of the type name to check" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5243" name="throws" description="Throws exception if validation error occurs" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5247">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="5269" package="Default">
        <name>prepare_vars</name>
        <full_name>prepare_vars</full_name>
        <docblock line="5267">
          <description>Prepare defined variables for execution</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="5292" package="Default">
        <name>prepare_consts</name>
        <full_name>prepare_consts</full_name>
        <docblock line="5290">
          <description>Prepare defined constants for execution</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="5315" package="Default">
        <name>prepare_namespaces</name>
        <full_name>prepare_namespaces</full_name>
        <docblock line="5313">
          <description>Prepare defined namespaces for execution</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="5328" package="Default">
        <name>prepare_aliases</name>
        <full_name>prepare_aliases</full_name>
        <docblock line="5326">
          <description>Prepare defined aliases for execution</description>
          <long-description></long-description>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="5342" package="Default">
        <name>prepare_uses</name>
        <full_name>prepare_uses</full_name>
        <docblock line="5339">
          <description>Prepare defined uses (or aliases) for execution</description>
          <long-description></long-description>
          <tag line="5339" name="alias" description="prepare_aliases();"/>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="5353" package="Default">
        <name>disassemble</name>
        <full_name>disassemble</full_name>
        <docblock line="5345">
          <description>Disassemble callable to string</description>
          <long-description></long-description>
          <tag line="5345" name="param" description="The callable to disassemble" type="callable" variable="$closure">
            <type by_reference="false">callable</type>
          </tag>
          <tag line="5345" name="throws" description="Throw exception if callable is passed and FunctionParser library is missing" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="5345" name="return" description="Return the disassembled code string" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="5353">
          <name>$closure</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="5373" package="Default">
        <name>auto_whitelist</name>
        <full_name>auto_whitelist</full_name>
        <docblock line="5366">
          <description>Automatically whitelisted trusted code</description>
          <long-description></long-description>
          <tag line="5366" name="param" description="String of trusted $code to automatically whitelist" type="string" variable="$code">
            <type by_reference="false">string</type>
          </tag>
          <tag line="5366" name="param" description="Flag if this code ir prended or appended (true = appended)" type="bool" variable="$appended">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="5366" name="throws" description="Throw exception if code cannot be parsed for whitelisting" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
        </docblock>
        <argument line="5373">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
        <argument line="5373">
          <name>$appended</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="5388" package="Default">
        <name>auto_define</name>
        <full_name>auto_define</full_name>
        <docblock line="5385">
          <description>Automatically define variables passed to disassembled closure</description>
          <long-description></long-description>
          <tag line="5385" name="param" description="" type="\FunctionParser\FunctionParser" variable="$disassembled_closure">
            <type by_reference="false">\FunctionParser\FunctionParser</type>
          </tag>
        </docblock>
        <argument line="5388">
          <name>$disassembled_closure</name>
          <default></default>
          <type>\FunctionParser\FunctionParser</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5402" package="Default">
        <name>prepend</name>
        <full_name>prepend</full_name>
        <docblock line="5397">
          <description>Prepend trusted code</description>
          <long-description></long-description>
          <tag line="5397" name="param" description="String or callable of trusted $code to prepend to generated code" type="string|callable" variable="$code">
            <type by_reference="false">string</type>
            <type by_reference="false">callable</type>
          </tag>
          <tag line="5397" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="5402">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5418" package="Default">
        <name>append</name>
        <full_name>append</full_name>
        <docblock line="5413">
          <description>Append trusted code</description>
          <long-description></long-description>
          <tag line="5413" name="param" description="String or callable of trusted $code to append to generated code" type="string|callable" variable="$code">
            <type by_reference="false">string</type>
            <type by_reference="false">callable</type>
          </tag>
          <tag line="5413" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="5418">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5433" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
        <docblock line="5429">
          <description>Clear all trusted and sandboxed code</description>
          <long-description></long-description>
          <tag line="5429" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5442" package="Default">
        <name>clear_trusted_code</name>
        <full_name>clear_trusted_code</full_name>
        <docblock line="5438">
          <description>Clear all trusted code</description>
          <long-description></long-description>
          <tag line="5438" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5451" package="Default">
        <name>clear_prepend</name>
        <full_name>clear_prepend</full_name>
        <docblock line="5447">
          <description>Clear all prepended trusted code</description>
          <long-description></long-description>
          <tag line="5447" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5459" package="Default">
        <name>clear_append</name>
        <full_name>clear_append</full_name>
        <docblock line="5455">
          <description>Clear all appended trusted code</description>
          <long-description></long-description>
          <tag line="5455" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5467" package="Default">
        <name>clear_closure</name>
        <full_name>clear_closure</full_name>
        <docblock line="5463">
          <description>Clear generated closure</description>
          <long-description></long-description>
          <tag line="5463" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5483" package="Default">
        <name>get_prepared_time</name>
        <full_name>get_prepared_time</full_name>
        <docblock line="5471">
          <description>Return the amount of time the sandbox spent preparing the sandboxed code</description>
          <long-description>&lt;p&gt;You can pass the number of digits you wish to round the return value&lt;/p&gt;</long-description>
          <tag line="5471" name="example" description="$sandbox-&gt;get_prepared_time();"/>
          <tag line="5471" name="example" description="$sandbox-&gt;get_prepared_time(3);"/>
          <tag line="5471" name="param" description="The number of digits to round the return value" type="int|null" variable="$round">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="5471" name="return" description="The amount of time in microseconds it took to prepare the sandboxed code" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="5483">
          <name>$round</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5498" package="Default">
        <name>get_execution_time</name>
        <full_name>get_execution_time</full_name>
        <docblock line="5486">
          <description>Return the amount of time the sandbox spent executing the sandboxed code</description>
          <long-description>&lt;p&gt;You can pass the number of digits you wish to round the return value&lt;/p&gt;</long-description>
          <tag line="5486" name="example" description="$sandbox-&gt;get_execution_time();"/>
          <tag line="5486" name="example" description="$sandbox-&gt;get_execution_time(3);"/>
          <tag line="5486" name="param" description="The number of digits to round the return value" type="int|null" variable="$round">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="5486" name="return" description="The amount of time in microseconds it took to execute the sandboxed code" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="5498">
          <name>$round</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5513" package="Default">
        <name>get_time</name>
        <full_name>get_time</full_name>
        <docblock line="5501">
          <description>Return the amount of time the sandbox spent preparing and executing the sandboxed code</description>
          <long-description>&lt;p&gt;You can pass the number of digits you wish to round the return value&lt;/p&gt;</long-description>
          <tag line="5501" name="example" description="$sandbox-&gt;get_time();"/>
          <tag line="5501" name="example" description="$sandbox-&gt;get_time(3);"/>
          <tag line="5501" name="param" description="The number of digits to round the return value" type="int|null" variable="$round">
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="5501" name="return" description="The amount of time in microseconds it took to prepare and execute the sandboxed code" type="float">
            <type by_reference="false">float</type>
          </tag>
        </docblock>
        <argument line="5513">
          <name>$round</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5528" package="Default">
        <name>prepare</name>
        <full_name>prepare</full_name>
        <docblock line="5516">
          <description>Prepare passed callable for execution</description>
          <long-description>&lt;p&gt;This function validates your code and automatically whitelists it according to your specified configuration&lt;/p&gt;</long-description>
          <tag line="5516" name="example" description="$sandbox-&gt;prepare(function(){ var_dump('Hello world!'); });"/>
          <tag line="5516" name="param" description="The callable to prepare for execution" type="callable" variable="$code">
            <type by_reference="false">callable</type>
          </tag>
          <tag line="5516" name="throws" description="Throws exception if error occurs in parsing, validation or whitelisting" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="5516" name="return" description="The prepared closure (this can also be accessed via $sandbox-&gt;generated_closure)" type="\Closure">
            <type by_reference="false">\Closure</type>
          </tag>
        </docblock>
        <argument line="5528">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="5593" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
        <docblock line="5579">
          <description>Prepare and execute callable and return output</description>
          <long-description>&lt;p&gt;This function validates your code and automatically whitelists it according to your specified configuration, then executes it.
You can also pass an unlimited number of arguments to override variables configured in the function. If the first argument is
not callable and a valid generated closure exists, then all arguments are passed to the executed code&lt;/p&gt;</long-description>
          <tag line="5579" name="example" description="$sandbox-&gt;execute(function(){ var_dump('Hello world!'); });"/>
          <tag line="5579" name="example" description="$sandbox-&gt;execute(function($test){ var_dump($test); }, 'Hello world!'); //Hello world!"/>
          <tag line="5579" name="throws" description="Throws exception if error occurs in parsing, validation or whitelisting or if generated closure is invalid" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="5579" name="return" description="The output from the executed sandboxed code" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <file path="SandboxWhitelistVisitor.php" hash="9485841f708523445bc65bc0c4d67b02" package="PHPSandbox">
    <docblock line="2">
      <description>SandboxWhitelistVisitor class declaration</description>
      <long-description></long-description>
      <tag line="2" name="package" description="PHPSandbox"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPSandbox" line="18" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>SandboxWhitelistVisitor</name>
      <full_name>\PHPSandbox\SandboxWhitelistVisitor</full_name>
      <docblock line="7">
        <description>SandboxWhitelister class for PHP Sandboxes.</description>
        <long-description>&lt;p&gt;This class takes parsed AST code and checks it against the passed PHPSandbox instance configuration to
autmatically whitelist sandboxed code functions, classes, etc. if the appropriate settings are configured.&lt;/p&gt;</long-description>
        <tag line="7" name="namespace" description="PHPSandbox"/>
        <tag line="7" name="author" description="Elijah Horton &lt;fieryprophet@yahoo.com&gt;"/>
        <tag line="7" name="version" description="1.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="22" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default></default>
        <docblock line="19">
          <description>The PHPSandbox instance to check against</description>
          <long-description></long-description>
          <tag line="19" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="29" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="23">
          <description>SandboxWhitelistVisitor class constructor</description>
          <long-description>&lt;p&gt;This constructor takes a passed PHPSandbox instance to check against for whitelisting sandboxed code.&lt;/p&gt;</long-description>
          <tag line="23" name="param" description="The PHPSandbox instance to check against" type="\PHPSandbox\PHPSandbox" variable="$sandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$sandbox</name>
          <default></default>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="36" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <docblock line="32">
          <description>Examine the current PHPParser_Node node against the PHPSandbox configuration for whitelisting sandboxed code</description>
          <long-description></long-description>
          <tag line="32" name="param" description="The sandboxed $node to examine" type="\PHPParser_Node" variable="$node">
            <type by_reference="false">\PHPParser_Node</type>
          </tag>
        </docblock>
        <argument line="36">
          <name>$node</name>
          <default></default>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="ValidatorVisitor.php" hash="481227b16ddfc3f46aa3e5f6e1476f05" package="PHPSandbox">
    <docblock line="2">
      <description>ValidatorVisitor class declaration</description>
      <long-description></long-description>
      <tag line="2" name="package" description="PHPSandbox"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPSandbox" line="18" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>ValidatorVisitor</name>
      <full_name>\PHPSandbox\ValidatorVisitor</full_name>
      <docblock line="7">
        <description>Validator class for PHP Sandboxes.</description>
        <long-description>&lt;p&gt;This class takes parsed AST code and checks it against the passed PHPSandbox instance
configuration for errors, and throws exceptions if they are found&lt;/p&gt;</long-description>
        <tag line="7" name="namespace" description="PHPSandbox"/>
        <tag line="7" name="author" description="Elijah Horton &lt;fieryprophet@yahoo.com&gt;"/>
        <tag line="7" name="version" description="1.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="22" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default></default>
        <docblock line="19">
          <description>The PHPSandbox instance to check against</description>
          <long-description></long-description>
          <tag line="19" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="29" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="23">
          <description>ValidatorVisitor class constructor</description>
          <long-description>&lt;p&gt;This constructor takes a passed PHPSandbox instance to check against for validating sandboxed code.&lt;/p&gt;</long-description>
          <tag line="23" name="param" description="The PHPSandbox instance to check against" type="\PHPSandbox\PHPSandbox" variable="$sandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$sandbox</name>
          <default></default>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="40" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <docblock line="32">
          <description>Examine the current PHPParser_Node node against the PHPSandbox configuration for validating sandboxed code</description>
          <long-description></long-description>
          <tag line="32" name="param" description="The sandboxed $node to validate" type="\PHPParser_Node" variable="$node">
            <type by_reference="false">\PHPParser_Node</type>
          </tag>
          <tag line="32" name="throws" description="Throws an exception if validation fails" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="32" name="return" description="Return rewritten node, false if node must be removed, or null if no changes to the node are made" type="\PHPParser_Node|bool|null">
            <type by_reference="false">\PHPParser_Node</type>
            <type by_reference="false">bool</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="40">
          <name>$node</name>
          <default></default>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="307" package="Default">
        <name>is_magic_const</name>
        <full_name>is_magic_const</full_name>
        <docblock line="301">
          <description>Test the current PHPParser_Node node to see if it is a magic constant, and return the name if it is and null if it is not</description>
          <long-description></long-description>
          <tag line="301" name="param" description="The sandboxed $node to test" type="\PHPParser_Node" variable="$node">
            <type by_reference="false">\PHPParser_Node</type>
          </tag>
          <tag line="301" name="return" description="Return string name of node, or null if it is not a magic constant" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="307">
          <name>$node</name>
          <default></default>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="334" package="Default">
        <name>is_keyword</name>
        <full_name>is_keyword</full_name>
        <docblock line="328">
          <description>Test the current PHPParser_Node node to see if it is a keyword, and return the name if it is and null if it is not</description>
          <long-description></long-description>
          <tag line="328" name="param" description="The sandboxed $node to test" type="\PHPParser_Node" variable="$node">
            <type by_reference="false">\PHPParser_Node</type>
          </tag>
          <tag line="328" name="return" description="Return string name of node, or null if it is not a keyword" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="334">
          <name>$node</name>
          <default></default>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="399" package="Default">
        <name>is_operator</name>
        <full_name>is_operator</full_name>
        <docblock line="393">
          <description>Test the current PHPParser_Node node to see if it is an operator, and return the name if it is and null if it is not</description>
          <long-description></long-description>
          <tag line="393" name="param" description="The sandboxed $node to test" type="\PHPParser_Node" variable="$node">
            <type by_reference="false">\PHPParser_Node</type>
          </tag>
          <tag line="393" name="return" description="Return string name of node, or null if it is not an operator" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="399">
          <name>$node</name>
          <default></default>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="504" package="Default">
        <name>is_primitive</name>
        <full_name>is_primitive</full_name>
        <docblock line="496">
          <description>Test the current PHPParser_Node node to see if it is a primitive, and return the name if it is and null if it is not</description>
          <long-description></long-description>
          <tag line="496" name="param" description="The sandboxed $node to test" type="\PHPParser_Node" variable="$node">
            <type by_reference="false">\PHPParser_Node</type>
          </tag>
          <tag line="496" name="throws" description="Throws exception if $node attempts to cast when $allow_casting is false in the PHPSandbox configuration" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="496" name="return" description="Return string name of node, or null if it is not a primitive" type="string|null">
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="504">
          <name>$node</name>
          <default></default>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="WhitelistVisitor.php" hash="7c68f98bdfae58e03427e4f57335259f" package="PHPSandbox">
    <docblock line="2">
      <description>WhitelistVisitor class declaration</description>
      <long-description></long-description>
      <tag line="2" name="package" description="PHPSandbox"/>
    </docblock>
    <class final="false" abstract="false" namespace="PHPSandbox" line="18" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>WhitelistVisitor</name>
      <full_name>\PHPSandbox\WhitelistVisitor</full_name>
      <docblock line="7">
        <description>Whitelister class for PHP Sandboxes.</description>
        <long-description>&lt;p&gt;This class takes parsed AST code and checks it against the passed PHPSandbox instance configuration to
autmatically whitelist trusted code functions, classes, etc. if the appropriate settings are configured.&lt;/p&gt;</long-description>
        <tag line="7" name="namespace" description="PHPSandbox"/>
        <tag line="7" name="author" description="Elijah Horton &lt;fieryprophet@yahoo.com&gt;"/>
        <tag line="7" name="version" description="1.0"/>
      </docblock>
      <property final="false" static="false" visibility="protected" line="22" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default></default>
        <docblock line="19">
          <description>The PHPSandbox instance to check against</description>
          <long-description></long-description>
          <tag line="19" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="29" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="23">
          <description>WhitelistVisitor class constructor</description>
          <long-description>&lt;p&gt;This constructor takes a passed PHPSandbox instance to check against for whitelisting trusted code.&lt;/p&gt;</long-description>
          <tag line="23" name="param" description="The PHPSandbox instance to check against" type="\PHPSandbox\PHPSandbox" variable="$sandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
        <argument line="29">
          <name>$sandbox</name>
          <default></default>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="38" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <docblock line="32">
          <description>Examine the current PHPParser_Node node against the PHPSandbox configuration for whitelisting trusted code</description>
          <long-description></long-description>
          <tag line="32" name="param" description="The trusted $node to examine" type="\PHPParser_Node" variable="$node">
            <type by_reference="false">\PHPParser_Node</type>
          </tag>
          <tag line="32" name="return" description="Return false if node must be removed, or null if no changes to the node are made" type="null|bool">
            <type by_reference="false">null</type>
            <type by_reference="false">bool</type>
          </tag>
        </docblock>
        <argument line="38">
          <name>$node</name>
          <default></default>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
  </file>
  <package name="Default" full_name="Default"/>
  <package name="PHPSandbox" full_name="PHPSandbox"/>
  <namespace name="PHPSandbox" full_name="PHPSandbox"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
