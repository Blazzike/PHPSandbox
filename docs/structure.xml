<?xml version="1.0" encoding="utf-8"?>
<project version="2.0.0a12" title="">
  <file path="Error.php" hash="7297796e78160bfeba5fcacc9d650da1" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="4" package="Default">
      <extends>\Exception</extends>
      <name>Error</name>
      <full_name>\PHPSandbox\Error</full_name>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file Error.php</error>
      <error line="4" code="50000">No DocBlock was found for \PHPSandbox\Error</error>
    </parse_markers>
  </file>
  <file path="PHPSandbox.php" hash="f376dbe3aba4327e9bfef0eefeff24ed" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="15" package="Default">
      <extends/>
      <name>PHPSandbox</name>
      <full_name>\PHPSandbox\PHPSandbox</full_name>
      <docblock line="4">
        <description>PHPSandbox class for PHP Sandboxes.</description>
        <long-description>&lt;p&gt;This class encapsulates the entire functionality of a PHPSandbox so that an end user
only has to create a PHPSandbox instance, configure its options, and run their code&lt;/p&gt;</long-description>
        <tag line="4" name="namespace" description="PHPSandbox"/>
        <tag line="4" name="author" description="Elijah Horton &lt;fieryprophet@yahoo.com&gt;"/>
        <tag line="4" name="version" description="1.0"/>
      </docblock>
      <property final="false" static="true" visibility="protected" line="19" namespace="PHPSandbox" package="Default">
        <name>$function_prefix</name>
        <default>'__PHPSandbox_'</default>
        <docblock line="16">
          <description></description>
          <long-description></long-description>
          <tag line="16" name="var" description="The prefix given to the obfuscated sandbox variable passed to the generated code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="23" namespace="PHPSandbox" package="Default">
        <name>$superglobals</name>
        <default>array('_GET', '_POST', '_COOKIE', '_FILES', '_ENV', '_REQUEST', '_SERVER', '_SESSION', 'GLOBALS')</default>
        <docblock line="20">
          <description></description>
          <long-description></long-description>
          <tag line="20" name="var" description="A static array of superglobal names used for redefining superglobal values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="37" namespace="PHPSandbox" package="Default">
        <name>$magic_constants</name>
        <default>array('__LINE__', '__FILE__', '__DIR__', '__FUNCTION__', '__CLASS__', '__TRAIT__', '__METHOD__', '__NAMESPACE__')</default>
        <docblock line="34">
          <description></description>
          <long-description></long-description>
          <tag line="34" name="var" description="A static array of magic constant names used for redefining magic constant values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="true" visibility="public" line="50" namespace="PHPSandbox" package="Default">
        <name>$defined_funcs</name>
        <default>array('get_defined_functions', 'get_defined_vars', 'get_defined_constants', 'get_declared_classes', 'get_declared_interfaces', 'get_declared_traits')</default>
        <docblock line="47">
          <description></description>
          <long-description></long-description>
          <tag line="47" name="var" description="A static array of defined_* and declared_* functions names used for redefining defined_* and declared_* values" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="61" namespace="PHPSandbox" package="Default">
        <name>$name</name>
        <default>''</default>
        <docblock line="58">
          <description></description>
          <long-description></long-description>
          <tag line="58" name="var" description="The randomly generated name of the PHPSandbox variable passed to the generated closure" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="protected" line="63" namespace="PHPSandbox" package="Default">
        <name>$definitions</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'globals' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array())</default>
      </property>
      <property final="false" static="false" visibility="protected" line="74" namespace="PHPSandbox" package="Default">
        <name>$whitelist</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'globals' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array(), 'classes' =&gt; array(), 'interfaces' =&gt; array(), 'traits' =&gt; array(), 'keywords' =&gt; array(), 'operators' =&gt; array(), 'primitives' =&gt; array(), 'types' =&gt; array())</default>
      </property>
      <property final="false" static="false" visibility="protected" line="92" namespace="PHPSandbox" package="Default">
        <name>$blacklist</name>
        <default>array('functions' =&gt; array(), 'variables' =&gt; array(), 'globals' =&gt; array(), 'superglobals' =&gt; array(), 'constants' =&gt; array(), 'magic_constants' =&gt; array(), 'namespaces' =&gt; array(), 'aliases' =&gt; array(), 'classes' =&gt; array(), 'interfaces' =&gt; array(), 'traits' =&gt; array(), 'keywords' =&gt; array('declare' =&gt; true, 'include' =&gt; true, 'eval' =&gt; true, 'exit' =&gt; true, 'halt' =&gt; true), 'operators' =&gt; array(), 'primitives' =&gt; array(), 'types' =&gt; array())</default>
      </property>
      <property final="false" static="false" visibility="public" line="120" namespace="PHPSandbox" package="Default">
        <name>$error_level</name>
        <default>null</default>
        <docblock line="116">
          <description></description>
          <long-description></long-description>
          <tag line="116" name="var" description="The error_reporting level to set the PHPSandbox scope to when executing the generated closure, if set to null it will use parent scope error level." type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="116" name="default" description="null"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="125" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_trusted_code</name>
        <default>true</default>
        <docblock line="121">
          <description></description>
          <long-description></long-description>
          <tag line="121" name="var" description="Should PHPSandbox automagically whitelist prepended and appended code?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="121" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="130" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_functions</name>
        <default>true</default>
        <docblock line="126">
          <description></description>
          <long-description></long-description>
          <tag line="126" name="var" description="Should PHPSandbox automagically whitelist functions created in sandboxed code if $allow_functions is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="126" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="135" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_constants</name>
        <default>true</default>
        <docblock line="131">
          <description></description>
          <long-description></long-description>
          <tag line="131" name="var" description="Should PHPSandbox automagically whitelist constants created in sandboxed code if $allow_constants is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="131" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="140" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_globals</name>
        <default>true</default>
        <docblock line="136">
          <description></description>
          <long-description></long-description>
          <tag line="136" name="var" description="Should PHPSandbox automagically whitelist global variables created in sandboxed code if $allow_globals is true? (Used to whitelist them in the variables list)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="136" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="145" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_classes</name>
        <default>true</default>
        <docblock line="141">
          <description></description>
          <long-description></long-description>
          <tag line="141" name="var" description="Should PHPSandbox automagically whitelist classes created in sandboxed code if $allow_classes is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="141" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="150" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_interfaces</name>
        <default>true</default>
        <docblock line="146">
          <description></description>
          <long-description></long-description>
          <tag line="146" name="var" description="Should PHPSandbox automagically whitelist interfaces created in sandboxed code if $allow_interfaces is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="146" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="155" namespace="PHPSandbox" package="Default">
        <name>$auto_whitelist_traits</name>
        <default>true</default>
        <docblock line="151">
          <description></description>
          <long-description></long-description>
          <tag line="151" name="var" description="Should PHPSandbox automagically whitelist traits created in sandboxed code if $allow_traits is true?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="151" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="160" namespace="PHPSandbox" package="Default">
        <name>$auto_define_vars</name>
        <default>true</default>
        <docblock line="156">
          <description></description>
          <long-description></long-description>
          <tag line="156" name="var" description="Should PHPSandbox automagically define variables passed to prepended, appended and prepared code closures?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="156" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="165" namespace="PHPSandbox" package="Default">
        <name>$overwrite_defined_funcs</name>
        <default>true</default>
        <docblock line="161">
          <description></description>
          <long-description></long-description>
          <tag line="161" name="var" description="Should PHPSandbox overwrite get_defined_functions, get_defined_vars, get_defined_constants, get_declared_classes, get_declared_interfaces and get_declared_traits?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="161" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="170" namespace="PHPSandbox" package="Default">
        <name>$overwrite_superglobals</name>
        <default>true</default>
        <docblock line="166">
          <description></description>
          <long-description></long-description>
          <tag line="166" name="var" description="Should PHPSandbox overwrite $_GET, $_POST, $_COOKIE, $_FILES, $_ENV, $_REQUEST, $_SERVER, $_SESSION and $GLOBALS superglobals? If so, unless alternate superglobal values have been defined they will return as empty arrays." type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="166" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="175" namespace="PHPSandbox" package="Default">
        <name>$allow_functions</name>
        <default>false</default>
        <docblock line="171">
          <description></description>
          <long-description></long-description>
          <tag line="171" name="var" description="Should PHPSandbox allow sandboxed code to declare functions?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="171" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="180" namespace="PHPSandbox" package="Default">
        <name>$allow_closures</name>
        <default>false</default>
        <docblock line="176">
          <description></description>
          <long-description></long-description>
          <tag line="176" name="var" description="Should PHPSandbox allow sandboxed code to declare closures?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="176" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="185" namespace="PHPSandbox" package="Default">
        <name>$allow_variables</name>
        <default>true</default>
        <docblock line="181">
          <description></description>
          <long-description></long-description>
          <tag line="181" name="var" description="Should PHPSandbox allow sandboxed code to create variables?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="181" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="190" namespace="PHPSandbox" package="Default">
        <name>$allow_static_variables</name>
        <default>true</default>
        <docblock line="186">
          <description></description>
          <long-description></long-description>
          <tag line="186" name="var" description="Should PHPSandbox allow sandboxed code to create static variables?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="186" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="195" namespace="PHPSandbox" package="Default">
        <name>$allow_objects</name>
        <default>true</default>
        <docblock line="191">
          <description></description>
          <long-description></long-description>
          <tag line="191" name="var" description="Should PHPSandbox allow sandboxed code to create objects of allow classes (e.g. new keyword)?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="191" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="200" namespace="PHPSandbox" package="Default">
        <name>$allow_constants</name>
        <default>false</default>
        <docblock line="196">
          <description></description>
          <long-description></long-description>
          <tag line="196" name="var" description="Should PHPSandbox allow sandboxed code to define constants?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="196" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="205" namespace="PHPSandbox" package="Default">
        <name>$allow_globals</name>
        <default>false</default>
        <docblock line="201">
          <description></description>
          <long-description></long-description>
          <tag line="201" name="var" description="Should PHPSandbox allow sandboxed code to use global keyword to access variables in the global scope?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="201" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="210" namespace="PHPSandbox" package="Default">
        <name>$allow_namespaces</name>
        <default>false</default>
        <docblock line="206">
          <description></description>
          <long-description></long-description>
          <tag line="206" name="var" description="Should PHPSandbox allow sandboxed code to declare namespaces (utilizing the define_namespace function?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="206" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="215" namespace="PHPSandbox" package="Default">
        <name>$allow_aliases</name>
        <default>false</default>
        <docblock line="211">
          <description></description>
          <long-description></long-description>
          <tag line="211" name="var" description="Should PHPSandbox allow sandboxed code to use namespaces and declare namespace aliases (utilizing the define_alias function?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="211" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="220" namespace="PHPSandbox" package="Default">
        <name>$allow_classes</name>
        <default>false</default>
        <docblock line="216">
          <description></description>
          <long-description></long-description>
          <tag line="216" name="var" description="Should PHPSandbox allow sandboxed code to declare classes?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="216" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="225" namespace="PHPSandbox" package="Default">
        <name>$allow_interfaces</name>
        <default>false</default>
        <docblock line="221">
          <description></description>
          <long-description></long-description>
          <tag line="221" name="var" description="Should PHPSandbox allow sandboxed code to declare interfaces?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="221" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="230" namespace="PHPSandbox" package="Default">
        <name>$allow_traits</name>
        <default>false</default>
        <docblock line="226">
          <description></description>
          <long-description></long-description>
          <tag line="226" name="var" description="Should PHPSandbox allow sandboxed code to declare traits?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="226" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="235" namespace="PHPSandbox" package="Default">
        <name>$allow_escaping</name>
        <default>false</default>
        <docblock line="231">
          <description></description>
          <long-description></long-description>
          <tag line="231" name="var" description="Should PHPSandbox allow sandboxed code to escape to HTML?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="231" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="240" namespace="PHPSandbox" package="Default">
        <name>$allow_casting</name>
        <default>false</default>
        <docblock line="236">
          <description></description>
          <long-description></long-description>
          <tag line="236" name="var" description="Should PHPSandbox allow sandboxed code to cast types? (This will still be subject to allowed classes)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="236" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="245" namespace="PHPSandbox" package="Default">
        <name>$allow_error_suppressing</name>
        <default>false</default>
        <docblock line="241">
          <description></description>
          <long-description></long-description>
          <tag line="241" name="var" description="Should PHPSandbox allow sandboxed code to suppress errors (e.g. the @ operator?)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="241" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="250" namespace="PHPSandbox" package="Default">
        <name>$allow_references</name>
        <default>true</default>
        <docblock line="246">
          <description></description>
          <long-description></long-description>
          <tag line="246" name="var" description="Should PHPSandbox allow sandboxed code to assign references?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="246" name="default" description="true"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="255" namespace="PHPSandbox" package="Default">
        <name>$allow_backticks</name>
        <default>false</default>
        <docblock line="251">
          <description></description>
          <long-description></long-description>
          <tag line="251" name="var" description="Should PHPSandbox allow sandboxed code to use backtick execution? (e.g. $var = \`ping google.com\`; This will also be disabled if shell_exec is not whitelisted or if it is blacklisted, and will be converted to a defined shell_exec function call if one is defined)" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="251" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="260" namespace="PHPSandbox" package="Default">
        <name>$allow_halting</name>
        <default>false</default>
        <docblock line="256">
          <description></description>
          <long-description></long-description>
          <tag line="256" name="var" description="Should PHPSandbox allow sandboxed code to halt the PHP compiler?" type="bool">
            <type by_reference="false">bool</type>
          </tag>
          <tag line="256" name="default" description="false"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="265" namespace="PHPSandbox" package="Default">
        <name>$prepended_code</name>
        <default>''</default>
        <docblock line="262">
          <description></description>
          <long-description></long-description>
          <tag line="262" name="var" description="String of prepended code, will be automagically whitelisted for functions, variables, globals, constants, classes, interfaces and traits if $auto_whitelist_trusted_code is true" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="269" namespace="PHPSandbox" package="Default">
        <name>$appended_code</name>
        <default>''</default>
        <docblock line="266">
          <description></description>
          <long-description></long-description>
          <tag line="266" name="var" description="String of appended code, will be automagically whitelisted for functions, variables, globals, constants, classes, interfaces and traits if $auto_whitelist_trusted_code is true" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="274" namespace="PHPSandbox" package="Default">
        <name>$preparsed_code</name>
        <default>''</default>
        <docblock line="271">
          <description></description>
          <long-description></long-description>
          <tag line="271" name="var" description="String of preparsed code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="278" namespace="PHPSandbox" package="Default">
        <name>$parsed_ast</name>
        <default>array()</default>
        <docblock line="275">
          <description></description>
          <long-description></long-description>
          <tag line="275" name="var" description="Array of parsed code broken down into AST tokens, for debugging and serialization purposes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="282" namespace="PHPSandbox" package="Default">
        <name>$prepared_code</name>
        <default>''</default>
        <docblock line="279">
          <description></description>
          <long-description></long-description>
          <tag line="279" name="var" description="String of prepared code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="286" namespace="PHPSandbox" package="Default">
        <name>$prepared_ast</name>
        <default>array()</default>
        <docblock line="283">
          <description></description>
          <long-description></long-description>
          <tag line="283" name="var" description="Array of prepared code broken down into AST tokens, for debugging and serialization purposes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="290" namespace="PHPSandbox" package="Default">
        <name>$generated_code</name>
        <default>''</default>
        <docblock line="287">
          <description></description>
          <long-description></long-description>
          <tag line="287" name="var" description="String of generated code, for debugging and serialization purposes" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="294" namespace="PHPSandbox" package="Default">
        <name>$generated_closure</name>
        <default>null</default>
        <docblock line="291">
          <description></description>
          <long-description></long-description>
          <tag line="291" name="var" description="Closure generated by PHPSandbox execution, stored for future executions without the need to reparse and validate the code" type="\Closure|null">
            <type by_reference="false">\Closure</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="312" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <docblock line="295">
          <description>PHPSandbox class constructor</description>
          <long-description></long-description>
          <tag line="295" name="example" description="$sandbox = new PHPSandbox\PHPSandbox;&#13;&#10;You can pass optional arrays of predefined functions, variables, etc. to the sandbox through the constructor"/>
          <tag line="295" name="param" description="Optional array of options to set for the sandbox" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="param" description="Optional array of functions to define for the sandbox" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="param" description="Optional array of variables to define for the sandbox" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="param" description="Optional array of constants to define for the sandbox" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="param" description="Optional array of namespaces to define for the sandbox" type="array" variable="$namespaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="param" description="Optional array of aliases to define for the sandbox" type="array" variable="$aliases">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="param" description="Optional array of globals to define for the sandbox" type="array" variable="$globals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="param" description="Optional array of superglobals to define for the sandbox" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="param" description="Optional array of magic constants to define for the sandbox" type="array" variable="$magic_constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="295" name="return" description="The returned PHPSandbox variable" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="312">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="313">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="314">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="315">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="316">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="317">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="318">
          <name>$globals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="319">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="320">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="true" visibility="public" namespace="PHPSandbox" line="351" package="Default">
        <name>create</name>
        <full_name>create</full_name>
        <docblock line="333">
          <description>PHPSandbox static factory method</description>
          <long-description>&lt;p&gt;You can pass optional arrays of predefined functions, variables, etc. to the sandbox through the constructor&lt;/p&gt;</long-description>
          <tag line="333" name="example" description="$sandbox = PHPSandbox\PHPSandbox::create();"/>
          <tag line="333" name="param" description="Optional array of options to set for the sandbox" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="param" description="Optional array of functions to define for the sandbox" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="param" description="Optional array of variables to define for the sandbox" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="param" description="Optional array of constants to define for the sandbox" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="param" description="Optional array of namespaces to define for the sandbox" type="array" variable="$namespaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="param" description="Optional array of aliases to define for the sandbox" type="array" variable="$aliases">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="param" description="Optional array of globals to define for the sandbox" type="array" variable="$globals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="param" description="Optional array of superglobals to define for the sandbox" type="array" variable="$superglobals">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="param" description="Optional array of magic constants to define for the sandbox" type="array" variable="$magic_constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="333" name="return" description="The returned PHPSandbox variable" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
        <argument line="351">
          <name>$options</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="352">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="353">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="354">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="355">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="356">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="357">
          <name>$globals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="358">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
        <argument line="359">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="372" package="Default">
        <name>__invoke</name>
        <full_name>__invoke</full_name>
        <docblock line="362">
          <description>PHPSandbox invoke magic method</description>
          <long-description>&lt;p&gt;Besides the code or closure to be executed, you can also pass additional arguments that will overwrite the default values of their respective arguments defined in the code&lt;/p&gt;</long-description>
          <tag line="362" name="example" description="$sandbox = new PHPSandbox\PHPSandbox; $sandbox(function(){ echo 'Hello world!'; });"/>
          <tag line="362" name="param" description="The closure, callable or string of code to execute" type="\Closure|callable|string" variable="$code">
            <type by_reference="false">\Closure</type>
            <type by_reference="false">callable</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="362" name="return" description="The output of the executed sandboxed code" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="372">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="378" package="Default">
        <name>get_name</name>
        <full_name>get_name</full_name>
        <docblock line="375">
          <description>Get name of PHPSandbox variable</description>
          <long-description></long-description>
          <tag line="375" name="return" description="The name of the PHPSandbox variable" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="396" package="Default">
        <name>set_option</name>
        <full_name>set_option</full_name>
        <docblock line="381">
          <description>Set PHPSandbox option</description>
          <long-description>&lt;p&gt;You can pass an $option name to set to $value, an array of $option names to set to $value, or an associative array of $option names and their values to set.&lt;/p&gt;</long-description>
          <tag line="381" name="example" description="$sandbox-&gt;set_option(array('allow_functions' =&gt; true));"/>
          <tag line="381" name="example" description="$sandbox-&gt;set_option(array('allow_functions', 'allow_classes'), true);"/>
          <tag line="381" name="example" description="$sandbox-&gt;set_option('allow_functions', true);"/>
          <tag line="381" name="param" description="String or array of strings or associative array of keys of option names to set $value to" type="string|array" variable="$option">
            <type by_reference="false">string</type>
            <type by_reference="false">array</type>
          </tag>
          <tag line="381" name="param" description="Boolean, integer or null $value to set $option to (optional)" type="bool|int|null" variable="$value">
            <type by_reference="false">bool</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="381" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="396">
          <name>$option</name>
          <default></default>
          <type/>
        </argument>
        <argument line="396">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="505" package="Default">
        <name>set_options</name>
        <full_name>set_options</full_name>
        <docblock line="492">
          <description>Set PHPSandbox options by array</description>
          <long-description>&lt;p&gt;You can pass an array of option names to set to $value, or an associative array of option names and their values to set.&lt;/p&gt;</long-description>
          <tag line="492" name="example" description="$sandbox-&gt;set_option(array('allow_functions' =&gt; true));"/>
          <tag line="492" name="example" description="$sandbox-&gt;set_option(array('allow_functions', 'allow_classes'), true);"/>
          <tag line="492" name="param" description="Array of strings or associative array of keys of option names to set $value to" type="array" variable="$options">
            <type by_reference="false">array</type>
          </tag>
          <tag line="492" name="param" description="Boolean, integer or null $value to set $option to (optional)" type="bool|int|null" variable="$value">
            <type by_reference="false">bool</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="492" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="505">
          <name>$options</name>
          <default>array()</default>
          <type/>
        </argument>
        <argument line="505">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="521" package="Default">
        <name>get_option</name>
        <full_name>get_option</full_name>
        <docblock line="511">
          <description>Get PHPSandbox option</description>
          <long-description>&lt;p&gt;You pass a string $option name to get its associated value&lt;/p&gt;</long-description>
          <tag line="511" name="example" description="$sandbox-&gt;get_option('allow_functions');"/>
          <tag line="511" name="param" description="String of $option name to get" type="string" variable="$option">
            <type by_reference="false">string</type>
          </tag>
          <tag line="511" name="return" description="Returns the value of the requested option" type="boolean|int|null">
            <type by_reference="false">boolean</type>
            <type by_reference="false">int</type>
            <type by_reference="false">null</type>
          </tag>
        </docblock>
        <argument line="521">
          <name>$option</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="617" package="Default">
        <name>get_prepended_code</name>
        <full_name>get_prepended_code</full_name>
        <docblock line="614">
          <description>Get PHPSandbox prepended code</description>
          <long-description></long-description>
          <tag line="614" name="return" description="Returns a string of the prepended code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="623" package="Default">
        <name>get_appended_code</name>
        <full_name>get_appended_code</full_name>
        <docblock line="620">
          <description>Get PHPSandbox appended code</description>
          <long-description></long-description>
          <tag line="620" name="return" description="Returns a string of the appended code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="629" package="Default">
        <name>get_preparsed_code</name>
        <full_name>get_preparsed_code</full_name>
        <docblock line="626">
          <description>Get PHPSandbox preparsed code</description>
          <long-description></long-description>
          <tag line="626" name="return" description="Returns a string of the preparsed code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="635" package="Default">
        <name>get_parsed_ast</name>
        <full_name>get_parsed_ast</full_name>
        <docblock line="632">
          <description>Get PHPSandbox parsed AST array</description>
          <long-description></long-description>
          <tag line="632" name="return" description="Returns an array of the parsed AST code" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="641" package="Default">
        <name>get_prepared_code</name>
        <full_name>get_prepared_code</full_name>
        <docblock line="638">
          <description>Get PHPSandbox prepared code</description>
          <long-description></long-description>
          <tag line="638" name="return" description="Returns a string of the prepared code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="647" package="Default">
        <name>get_prepared_ast</name>
        <full_name>get_prepared_ast</full_name>
        <docblock line="644">
          <description>Get PHPSandbox parsed AST array</description>
          <long-description></long-description>
          <tag line="644" name="return" description="Returns an array of the parsed AST code" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="653" package="Default">
        <name>get_generated_code</name>
        <full_name>get_generated_code</full_name>
        <docblock line="650">
          <description>Get PHPSandbox generated code</description>
          <long-description></long-description>
          <tag line="650" name="return" description="Returns a string of the generated code" type="string">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="659" package="Default">
        <name>get_generated_closure</name>
        <full_name>get_generated_closure</full_name>
        <docblock line="656">
          <description>Get PHPSandbox generated closure</description>
          <long-description></long-description>
          <tag line="656" name="return" description="Returns the generated closure" type="\Closure">
            <type by_reference="false">\Closure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="666" package="Default">
        <name>get_closure</name>
        <full_name>get_closure</full_name>
        <docblock line="662">
          <description>Get PHPSandbox generated closure</description>
          <long-description></long-description>
          <tag line="662" name="alias" description="get_generated_closure()"/>
          <tag line="662" name="return" description="Returns the generated closure" type="\Closure">
            <type by_reference="false">\Closure</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="675" package="Default">
        <name>_get_defined_functions</name>
        <full_name>_get_defined_functions</full_name>
        <docblock line="669">
          <description>Get PHPSandbox redefined functions in place of get_defined_functions().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="669" name="param" description="Array result from get_defined_functions() is passed here" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="669" name="return" description="Returns the redefined functions array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="675">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="708" package="Default">
        <name>_get_defined_vars</name>
        <full_name>_get_defined_vars</full_name>
        <docblock line="702">
          <description>Get PHPSandbox redefined variables in place of get_defined_vars().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="702" name="param" description="Array result from get_defined_vars() is passed here" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="702" name="return" description="Returns the redefined variables array" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="708">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="720" package="Default">
        <name>_get_superglobal</name>
        <full_name>_get_superglobal</full_name>
        <docblock line="714">
          <description>Get PHPSandbox redefined superglobal.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="714" name="param" description="Requested superglobal name (e.g. _GET, _POST, etc.)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="714" name="return" description="Returns the redefined superglobal" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="720">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="760" package="Default">
        <name>_get_magic_const</name>
        <full_name>_get_magic_const</full_name>
        <docblock line="754">
          <description>Get PHPSandbox redefined magic constant.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="754" name="param" description="Requested magic constant name (e.g. __FILE__, __LINE__, etc.)" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="754" name="return" description="Returns the redefined magic constant" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="760">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="773" package="Default">
        <name>_get_defined_constants</name>
        <full_name>_get_defined_constants</full_name>
        <docblock line="767">
          <description>Get PHPSandbox redefined constants in place of get_defined_constants().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="767" name="param" description="Array result from get_defined_constants() is passed here" type="array" variable="$constants">
            <type by_reference="false">array</type>
          </tag>
          <tag line="767" name="return" description="Returns the redefined constants" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="773">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="804" package="Default">
        <name>_get_declared_classes</name>
        <full_name>_get_declared_classes</full_name>
        <docblock line="798">
          <description>Get PHPSandbox redefined classes in place of get_declared_classes().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="798" name="param" description="Array result from get_declared_classes() is passed here" type="array" variable="$classes">
            <type by_reference="false">array</type>
          </tag>
          <tag line="798" name="return" description="Returns the redefined classes" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="804">
          <name>$classes</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="830" package="Default">
        <name>_get_declared_interfaces</name>
        <full_name>_get_declared_interfaces</full_name>
        <docblock line="824">
          <description>Get PHPSandbox redefined interfaces in place of get_declared_interfaces().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="824" name="param" description="Array result from get_declared_interfaces() is passed here" type="array" variable="$interfaces">
            <type by_reference="false">array</type>
          </tag>
          <tag line="824" name="return" description="Returns the redefined interfaces" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="830">
          <name>$interfaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="856" package="Default">
        <name>_get_declared_traits</name>
        <full_name>_get_declared_traits</full_name>
        <docblock line="850">
          <description>Get PHPSandbox redefined traits in place of get_declared_traits().</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="850" name="param" description="Array result from get_declared_traits() is passed here" type="array" variable="$traits">
            <type by_reference="false">array</type>
          </tag>
          <tag line="850" name="return" description="Returns the redefined traits" type="array">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="856">
          <name>$traits</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="882" package="Default">
        <name>call_func</name>
        <full_name>call_func</full_name>
        <docblock line="876">
          <description>Get PHPSandbox redefined function.</description>
          <long-description>&lt;p&gt;This is an internal PHPSandbox function but requires public access to work.&lt;/p&gt;</long-description>
          <tag line="876" name="throws" description="Will throw exception if invalid function requested" type="\PHPSandbox\Error">
            <type by_reference="false">\PHPSandbox\Error</type>
          </tag>
          <tag line="876" name="return" description="Returns the redefined function result" type="mixed">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="910" package="Default">
        <name>define</name>
        <full_name>define</full_name>
        <docblock line="896">
          <description>Define PHPSandbox definitions, such as functions, constants, classes, etc.</description>
          <long-description>&lt;p&gt;You can pass an associative array of definitions types and an associative array of their corresponding values, or pass a string of the $type, $name and $value&lt;/p&gt;</long-description>
          <tag line="896" name="example" description="$sandbox-&gt;define(array('functions' =&gt; array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="896" name="example" description="$sandbox-&gt;define('functions', 'test', function(){ echo 'test'; });"/>
          <tag line="896" name="param" description="Associative array or string of definition type to define" type="array|string" variable="$type">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="896" name="param" description="Associative array or string of definition name to define" type="array|string|null" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="896" name="param" description="Value of definition to define" type="mixed|null" variable="$value">
            <type by_reference="false">mixed</type>
            <type by_reference="false">null</type>
          </tag>
          <tag line="896" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="910">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="910">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
        <argument line="910">
          <name>$value</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="958" package="Default">
        <name>undefine</name>
        <full_name>undefine</full_name>
        <docblock line="945">
          <description>Undefine PHPSandbox definitions, such as functions, constants, classes, etc.</description>
          <long-description>&lt;p&gt;You can pass an associative array of definitions types and an array of key names to undefine, or pass a string of the $type and $name to undefine&lt;/p&gt;</long-description>
          <tag line="945" name="example" description="$sandbox-&gt;undefine(array('functions' =&gt; array('test'));"/>
          <tag line="945" name="example" description="$sandbox-&gt;undefine('functions', 'test');"/>
          <tag line="945" name="param" description="Associative array or string of definition type to undefine" type="array|string" variable="$type">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="945" name="param" description="Associative array or string of definition name to undefine" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="945" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="958">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="958">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1010" package="Default">
        <name>define_func</name>
        <full_name>define_func</full_name>
        <docblock line="997">
          <description>Define PHPSandbox function</description>
          <long-description>&lt;p&gt;You can pass an associative array of functions to define, or the function $name and $function closure or callable to define&lt;/p&gt;</long-description>
          <tag line="997" name="example" description="$sandbox-&gt;define_func(array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="997" name="example" description="$sandbox-&gt;define_func('test', function(){ echo 'test'; });"/>
          <tag line="997" name="param" description="Associative array or string of function $name to define" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="997" name="param" description="Callable to define $function to" type="callable" variable="$function">
            <type by_reference="false">callable</type>
          </tag>
          <tag line="997" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1010">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1010">
          <name>$function</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1035" package="Default">
        <name>define_funcs</name>
        <full_name>define_funcs</full_name>
        <docblock line="1025">
          <description>Define PHPSandbox functions by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of functions to define&lt;/p&gt;</long-description>
          <tag line="1025" name="example" description="$sandbox-&gt;define_func(array('test' =&gt; function(){ echo 'test'; }));"/>
          <tag line="1025" name="param" description="Associative array of $functions to define" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1025" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1035">
          <name>$functions</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1047" package="Default">
        <name>has_defined_funcs</name>
        <full_name>has_defined_funcs</full_name>
        <docblock line="1041">
          <description>Query whether PHPSandbox instance has defined functions</description>
          <long-description></long-description>
          <tag line="1041" name="example" description="$sandbox-&gt;has_defined_funcs(); //returns number of defined functions, or zero if none defined"/>
          <tag line="1041" name="return" description="Returns the number of functions this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1058" package="Default">
        <name>is_defined_func</name>
        <full_name>is_defined_func</full_name>
        <docblock line="1050">
          <description>Check if PHPSandbox instance has $name function defined</description>
          <long-description></long-description>
          <tag line="1050" name="example" description="$sandbox-&gt;is_defined_func('test');"/>
          <tag line="1050" name="param" description="String of function $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1050" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1058">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1072" package="Default">
        <name>undefine_func</name>
        <full_name>undefine_func</full_name>
        <docblock line="1062">
          <description>Undefine PHPSandbox function</description>
          <long-description></long-description>
          <tag line="1062" name="example" description="$sandbox-&gt;undefine_func(array('test', 'test2'));"/>
          <tag line="1062" name="example" description="$sandbox-&gt;undefine_func('test');"/>
          <tag line="1062" name="param" description="Associative array of function names or string of function name to undefine" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="1062" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1072">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1092" package="Default">
        <name>undefine_funcs</name>
        <full_name>undefine_funcs</full_name>
        <docblock line="1082">
          <description>Undefine PHPSandbox functions by array</description>
          <long-description></long-description>
          <tag line="1082" name="example" description="$sandbox-&gt;undefine_funcs(array('test', 'test2'));"/>
          <tag line="1082" name="example" description="$sandbox-&gt;undefine_funcs(); //WILL UNDEFINE ALL FUNCTIONS!"/>
          <tag line="1082" name="param" description="Associative array of function names to undefine. Passing an empty array or no argument will result in undefining all functions" type="array" variable="$functions">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1082" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1092">
          <name>$functions</name>
          <default>array()</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1115" package="Default">
        <name>define_var</name>
        <full_name>define_var</full_name>
        <docblock line="1102">
          <description>Define PHPSandbox variable</description>
          <long-description>&lt;p&gt;You can pass an associative array of variables to define, or the variable $name and $value to define&lt;/p&gt;</long-description>
          <tag line="1102" name="example" description="$sandbox-&gt;define_var(array('test' =&gt; 1));"/>
          <tag line="1102" name="example" description="$sandbox-&gt;define_var('test', 1);"/>
          <tag line="1102" name="param" description="Associative array or string of variable $name to define" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="1102" name="param" description="Value to define variable to" type="mixed" variable="$value">
            <type by_reference="false">mixed</type>
          </tag>
          <tag line="1102" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1115">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1115">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1135" package="Default">
        <name>define_vars</name>
        <full_name>define_vars</full_name>
        <docblock line="1125">
          <description>Define PHPSandbox variables by array</description>
          <long-description>&lt;p&gt;You can pass an associative array of variables to define&lt;/p&gt;</long-description>
          <tag line="1125" name="example" description="$sandbox-&gt;define_var(array('test' =&gt; 1));"/>
          <tag line="1125" name="param" description="Associative array of $variables to define" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1125" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1135">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1147" package="Default">
        <name>has_defined_vars</name>
        <full_name>has_defined_vars</full_name>
        <docblock line="1141">
          <description>Query whether PHPSandbox instance has defined variables</description>
          <long-description></long-description>
          <tag line="1141" name="example" description="$sandbox-&gt;has_defined_vars(); //returns number of defined variables, or zero if none defined"/>
          <tag line="1141" name="return" description="Returns the number of variables this instance has defined" type="int">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1158" package="Default">
        <name>is_defined_var</name>
        <full_name>is_defined_var</full_name>
        <docblock line="1150">
          <description>Check if PHPSandbox instance has $name variable defined</description>
          <long-description></long-description>
          <tag line="1150" name="example" description="$sandbox-&gt;is_defined_var('test');"/>
          <tag line="1150" name="param" description="String of variable $name to query" type="string" variable="$name">
            <type by_reference="false">string</type>
          </tag>
          <tag line="1150" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1158">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1171" package="Default">
        <name>undefine_var</name>
        <full_name>undefine_var</full_name>
        <docblock line="1161">
          <description>Undefine PHPSandbox variable</description>
          <long-description></long-description>
          <tag line="1161" name="example" description="$sandbox-&gt;undefine_var(array('test', 'test2'));"/>
          <tag line="1161" name="example" description="$sandbox-&gt;undefine_var('test');"/>
          <tag line="1161" name="param" description="Associative array of variable names or string of variable name to undefine" type="array|string" variable="$name">
            <type by_reference="false">array</type>
            <type by_reference="false">string</type>
          </tag>
          <tag line="1161" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1171">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1187" package="Default">
        <name>undefine_vars</name>
        <full_name>undefine_vars</full_name>
        <docblock line="1177">
          <description>Undefine PHPSandbox variables by array</description>
          <long-description></long-description>
          <tag line="1177" name="example" description="$sandbox-&gt;undefine_vars(array('test', 'test2'));"/>
          <tag line="1177" name="example" description="$sandbox-&gt;undefine_vars(); //WILL UNDEFINE ALL VARIABLES!"/>
          <tag line="1177" name="param" description="Associative array of variable names to undefine. Passing an empty array or no argument will result in undefining all variables" type="array" variable="$variables">
            <type by_reference="false">array</type>
          </tag>
          <tag line="1177" name="return" description="Returns the PHPSandbox instance for chainability" type="$this">
            <type by_reference="false">$this</type>
          </tag>
        </docblock>
        <argument line="1187">
          <name>$variables</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1198" package="Default">
        <name>define_global</name>
        <full_name>define_global</full_name>
        <argument line="1198">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1198">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1209" package="Default">
        <name>define_globals</name>
        <full_name>define_globals</full_name>
        <argument line="1209">
          <name>$globals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1216" package="Default">
        <name>has_defined_globals</name>
        <full_name>has_defined_globals</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1220" package="Default">
        <name>is_defined_global</name>
        <full_name>is_defined_global</full_name>
        <argument line="1220">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1224" package="Default">
        <name>undefine_global</name>
        <full_name>undefine_global</full_name>
        <argument line="1224">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1231" package="Default">
        <name>undefine_globals</name>
        <full_name>undefine_globals</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1236" package="Default">
        <name>define_superglobal</name>
        <full_name>define_superglobal</full_name>
        <argument line="1236">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1236">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1254" package="Default">
        <name>define_superglobals</name>
        <full_name>define_superglobals</full_name>
        <argument line="1254">
          <name>$superglobals</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1261" package="Default">
        <name>has_defined_superglobals</name>
        <full_name>has_defined_superglobals</full_name>
        <argument line="1261">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1266" package="Default">
        <name>is_defined_superglobal</name>
        <full_name>is_defined_superglobal</full_name>
        <argument line="1266">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1266">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1271" package="Default">
        <name>undefine_superglobal</name>
        <full_name>undefine_superglobal</full_name>
        <argument line="1271">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1271">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1283" package="Default">
        <name>undefine_superglobals</name>
        <full_name>undefine_superglobals</full_name>
        <argument line="1283">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1293" package="Default">
        <name>define_const</name>
        <full_name>define_const</full_name>
        <argument line="1293">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1293">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1304" package="Default">
        <name>define_consts</name>
        <full_name>define_consts</full_name>
        <argument line="1304">
          <name>$constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1311" package="Default">
        <name>has_defined_consts</name>
        <full_name>has_defined_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1315" package="Default">
        <name>is_defined_const</name>
        <full_name>is_defined_const</full_name>
        <argument line="1315">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1319" package="Default">
        <name>undefine_const</name>
        <full_name>undefine_const</full_name>
        <argument line="1319">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1326" package="Default">
        <name>undefine_consts</name>
        <full_name>undefine_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1331" package="Default">
        <name>define_magic_const</name>
        <full_name>define_magic_const</full_name>
        <argument line="1331">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1331">
          <name>$value</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1343" package="Default">
        <name>define_magic_consts</name>
        <full_name>define_magic_consts</full_name>
        <argument line="1343">
          <name>$magic_constants</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1350" package="Default">
        <name>has_defined_magic_consts</name>
        <full_name>has_defined_magic_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1354" package="Default">
        <name>is_defined_magic_const</name>
        <full_name>is_defined_magic_const</full_name>
        <argument line="1354">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1359" package="Default">
        <name>undefine_magic_const</name>
        <full_name>undefine_magic_const</full_name>
        <argument line="1359">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1367" package="Default">
        <name>undefine_magic_consts</name>
        <full_name>undefine_magic_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1372" package="Default">
        <name>define_namespace</name>
        <full_name>define_namespace</full_name>
        <argument line="1372">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1383" package="Default">
        <name>define_namespaces</name>
        <full_name>define_namespaces</full_name>
        <argument line="1383">
          <name>$namespaces</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1390" package="Default">
        <name>has_defined_namespaces</name>
        <full_name>has_defined_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1394" package="Default">
        <name>is_defined_namespace</name>
        <full_name>is_defined_namespace</full_name>
        <argument line="1394">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1398" package="Default">
        <name>undefine_namespace</name>
        <full_name>undefine_namespace</full_name>
        <argument line="1398">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1405" package="Default">
        <name>undefine_namespaces</name>
        <full_name>undefine_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1410" package="Default">
        <name>define_alias</name>
        <full_name>define_alias</full_name>
        <argument line="1410">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1410">
          <name>$alias</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1421" package="Default">
        <name>define_aliases</name>
        <full_name>define_aliases</full_name>
        <argument line="1421">
          <name>$aliases</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1428" package="Default">
        <name>has_defined_aliases</name>
        <full_name>has_defined_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1432" package="Default">
        <name>is_defined_alias</name>
        <full_name>is_defined_alias</full_name>
        <argument line="1432">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1436" package="Default">
        <name>undefine_alias</name>
        <full_name>undefine_alias</full_name>
        <argument line="1436">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1443" package="Default">
        <name>undefine_aliases</name>
        <full_name>undefine_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1448" package="Default">
        <name>define_use</name>
        <full_name>define_use</full_name>
        <argument line="1448">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1448">
          <name>$alias</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1452" package="Default">
        <name>define_uses</name>
        <full_name>define_uses</full_name>
        <argument line="1452">
          <name>$uses</name>
          <default>array()</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1456" package="Default">
        <name>has_defined_uses</name>
        <full_name>has_defined_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1460" package="Default">
        <name>is_defined_use</name>
        <full_name>is_defined_use</full_name>
        <argument line="1460">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1464" package="Default">
        <name>undefine_use</name>
        <full_name>undefine_use</full_name>
        <argument line="1464">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1468" package="Default">
        <name>undefine_uses</name>
        <full_name>undefine_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1472" package="Default">
        <name>normalize_func</name>
        <full_name>normalize_func</full_name>
        <argument line="1472">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1476" package="Default">
        <name>normalize_superglobal</name>
        <full_name>normalize_superglobal</full_name>
        <argument line="1476">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1480" package="Default">
        <name>normalize_magic_const</name>
        <full_name>normalize_magic_const</full_name>
        <argument line="1480">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1484" package="Default">
        <name>normalize_namespace</name>
        <full_name>normalize_namespace</full_name>
        <argument line="1484">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1488" package="Default">
        <name>normalize_alias</name>
        <full_name>normalize_alias</full_name>
        <argument line="1488">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1492" package="Default">
        <name>normalize_use</name>
        <full_name>normalize_use</full_name>
        <argument line="1492">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1496" package="Default">
        <name>normalize_class</name>
        <full_name>normalize_class</full_name>
        <argument line="1496">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1500" package="Default">
        <name>normalize_interface</name>
        <full_name>normalize_interface</full_name>
        <argument line="1500">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1504" package="Default">
        <name>normalize_trait</name>
        <full_name>normalize_trait</full_name>
        <argument line="1504">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1508" package="Default">
        <name>normalize_keyword</name>
        <full_name>normalize_keyword</full_name>
        <argument line="1508">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1539" package="Default">
        <name>normalize_primitive</name>
        <full_name>normalize_primitive</full_name>
        <argument line="1539">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="1553" package="Default">
        <name>normalize_type</name>
        <full_name>normalize_type</full_name>
        <argument line="1553">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1557" package="Default">
        <name>whitelist</name>
        <full_name>whitelist</full_name>
        <argument line="1557">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1557">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1582" package="Default">
        <name>blacklist</name>
        <full_name>blacklist</full_name>
        <argument line="1582">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1582">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1607" package="Default">
        <name>dewhitelist</name>
        <full_name>dewhitelist</full_name>
        <argument line="1607">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1607">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1626" package="Default">
        <name>deblacklist</name>
        <full_name>deblacklist</full_name>
        <argument line="1626">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1626">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1645" package="Default">
        <name>has_whitelist</name>
        <full_name>has_whitelist</full_name>
        <argument line="1645">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1649" package="Default">
        <name>has_blacklist</name>
        <full_name>has_blacklist</full_name>
        <argument line="1649">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1653" package="Default">
        <name>is_whitelisted</name>
        <full_name>is_whitelisted</full_name>
        <argument line="1653">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1653">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1657" package="Default">
        <name>is_blacklisted</name>
        <full_name>is_blacklisted</full_name>
        <argument line="1657">
          <name>$type</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1657">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1661" package="Default">
        <name>has_whitelist_funcs</name>
        <full_name>has_whitelist_funcs</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1665" package="Default">
        <name>has_blacklist_funcs</name>
        <full_name>has_blacklist_funcs</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1669" package="Default">
        <name>is_whitelisted_func</name>
        <full_name>is_whitelisted_func</full_name>
        <argument line="1669">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1674" package="Default">
        <name>is_blacklisted_func</name>
        <full_name>is_blacklisted_func</full_name>
        <argument line="1674">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1679" package="Default">
        <name>has_whitelist_vars</name>
        <full_name>has_whitelist_vars</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1683" package="Default">
        <name>has_blacklist_vars</name>
        <full_name>has_blacklist_vars</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1687" package="Default">
        <name>is_whitelisted_var</name>
        <full_name>is_whitelisted_var</full_name>
        <argument line="1687">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1691" package="Default">
        <name>is_blacklisted_var</name>
        <full_name>is_blacklisted_var</full_name>
        <argument line="1691">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1695" package="Default">
        <name>has_whitelist_globals</name>
        <full_name>has_whitelist_globals</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1699" package="Default">
        <name>has_blacklist_globals</name>
        <full_name>has_blacklist_globals</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1703" package="Default">
        <name>is_whitelisted_global</name>
        <full_name>is_whitelisted_global</full_name>
        <argument line="1703">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1707" package="Default">
        <name>is_blacklisted_global</name>
        <full_name>is_blacklisted_global</full_name>
        <argument line="1707">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1711" package="Default">
        <name>has_whitelist_superglobals</name>
        <full_name>has_whitelist_superglobals</full_name>
        <argument line="1711">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1716" package="Default">
        <name>has_blacklist_superglobals</name>
        <full_name>has_blacklist_superglobals</full_name>
        <argument line="1716">
          <name>$name</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1721" package="Default">
        <name>is_whitelisted_superglobal</name>
        <full_name>is_whitelisted_superglobal</full_name>
        <argument line="1721">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1721">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1726" package="Default">
        <name>is_blacklisted_superglobal</name>
        <full_name>is_blacklisted_superglobal</full_name>
        <argument line="1726">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1726">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1731" package="Default">
        <name>has_whitelist_consts</name>
        <full_name>has_whitelist_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1735" package="Default">
        <name>has_blacklist_consts</name>
        <full_name>has_blacklist_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1739" package="Default">
        <name>is_whitelisted_const</name>
        <full_name>is_whitelisted_const</full_name>
        <argument line="1739">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1743" package="Default">
        <name>is_blacklisted_const</name>
        <full_name>is_blacklisted_const</full_name>
        <argument line="1743">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1747" package="Default">
        <name>has_whitelist_magic_consts</name>
        <full_name>has_whitelist_magic_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1751" package="Default">
        <name>has_blacklist_magic_consts</name>
        <full_name>has_blacklist_magic_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1755" package="Default">
        <name>is_whitelisted_magic_const</name>
        <full_name>is_whitelisted_magic_const</full_name>
        <argument line="1755">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1760" package="Default">
        <name>is_blacklisted_magic_const</name>
        <full_name>is_blacklisted_magic_const</full_name>
        <argument line="1760">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1765" package="Default">
        <name>has_whitelist_namespaces</name>
        <full_name>has_whitelist_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1769" package="Default">
        <name>has_blacklist_namespaces</name>
        <full_name>has_blacklist_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1773" package="Default">
        <name>is_whitelisted_namespace</name>
        <full_name>is_whitelisted_namespace</full_name>
        <argument line="1773">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1778" package="Default">
        <name>is_blacklisted_namespace</name>
        <full_name>is_blacklisted_namespace</full_name>
        <argument line="1778">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1783" package="Default">
        <name>has_whitelist_aliases</name>
        <full_name>has_whitelist_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1787" package="Default">
        <name>has_blacklist_aliases</name>
        <full_name>has_blacklist_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1791" package="Default">
        <name>is_whitelisted_alias</name>
        <full_name>is_whitelisted_alias</full_name>
        <argument line="1791">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1796" package="Default">
        <name>is_blacklisted_alias</name>
        <full_name>is_blacklisted_alias</full_name>
        <argument line="1796">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1801" package="Default">
        <name>has_whitelist_uses</name>
        <full_name>has_whitelist_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1805" package="Default">
        <name>has_blacklist_uses</name>
        <full_name>has_blacklist_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1809" package="Default">
        <name>is_whitelisted_use</name>
        <full_name>is_whitelisted_use</full_name>
        <argument line="1809">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1813" package="Default">
        <name>is_blacklisted_use</name>
        <full_name>is_blacklisted_use</full_name>
        <argument line="1813">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1817" package="Default">
        <name>has_whitelist_classes</name>
        <full_name>has_whitelist_classes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1821" package="Default">
        <name>has_blacklist_classes</name>
        <full_name>has_blacklist_classes</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1825" package="Default">
        <name>is_whitelisted_class</name>
        <full_name>is_whitelisted_class</full_name>
        <argument line="1825">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1830" package="Default">
        <name>is_blacklisted_class</name>
        <full_name>is_blacklisted_class</full_name>
        <argument line="1830">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1835" package="Default">
        <name>has_whitelist_interfaces</name>
        <full_name>has_whitelist_interfaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1839" package="Default">
        <name>has_blacklist_interfaces</name>
        <full_name>has_blacklist_interfaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1843" package="Default">
        <name>is_whitelisted_interface</name>
        <full_name>is_whitelisted_interface</full_name>
        <argument line="1843">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1848" package="Default">
        <name>is_blacklisted_interface</name>
        <full_name>is_blacklisted_interface</full_name>
        <argument line="1848">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1853" package="Default">
        <name>has_whitelist_traits</name>
        <full_name>has_whitelist_traits</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1857" package="Default">
        <name>has_blacklist_traits</name>
        <full_name>has_blacklist_traits</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1861" package="Default">
        <name>is_whitelisted_trait</name>
        <full_name>is_whitelisted_trait</full_name>
        <argument line="1861">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1866" package="Default">
        <name>is_blacklisted_trait</name>
        <full_name>is_blacklisted_trait</full_name>
        <argument line="1866">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1871" package="Default">
        <name>has_whitelist_keywords</name>
        <full_name>has_whitelist_keywords</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1875" package="Default">
        <name>has_blacklist_keywords</name>
        <full_name>has_blacklist_keywords</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1879" package="Default">
        <name>is_whitelisted_keyword</name>
        <full_name>is_whitelisted_keyword</full_name>
        <argument line="1879">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1884" package="Default">
        <name>is_blacklisted_keyword</name>
        <full_name>is_blacklisted_keyword</full_name>
        <argument line="1884">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1889" package="Default">
        <name>has_whitelist_operators</name>
        <full_name>has_whitelist_operators</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1893" package="Default">
        <name>has_blacklist_operators</name>
        <full_name>has_blacklist_operators</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1897" package="Default">
        <name>is_whitelisted_operator</name>
        <full_name>is_whitelisted_operator</full_name>
        <argument line="1897">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1901" package="Default">
        <name>is_blacklisted_operator</name>
        <full_name>is_blacklisted_operator</full_name>
        <argument line="1901">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1905" package="Default">
        <name>has_whitelist_primitives</name>
        <full_name>has_whitelist_primitives</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1909" package="Default">
        <name>has_blacklist_primitives</name>
        <full_name>has_blacklist_primitives</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1913" package="Default">
        <name>is_whitelisted_primitive</name>
        <full_name>is_whitelisted_primitive</full_name>
        <argument line="1913">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1918" package="Default">
        <name>is_blacklisted_primitive</name>
        <full_name>is_blacklisted_primitive</full_name>
        <argument line="1918">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1923" package="Default">
        <name>has_whitelist_types</name>
        <full_name>has_whitelist_types</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1927" package="Default">
        <name>has_blacklist_types</name>
        <full_name>has_blacklist_types</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1931" package="Default">
        <name>is_whitelisted_type</name>
        <full_name>is_whitelisted_type</full_name>
        <argument line="1931">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1936" package="Default">
        <name>is_blacklisted_type</name>
        <full_name>is_blacklisted_type</full_name>
        <argument line="1936">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1941" package="Default">
        <name>whitelist_func</name>
        <full_name>whitelist_func</full_name>
        <argument line="1941">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1946" package="Default">
        <name>blacklist_func</name>
        <full_name>blacklist_func</full_name>
        <argument line="1946">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1951" package="Default">
        <name>dewhitelist_func</name>
        <full_name>dewhitelist_func</full_name>
        <argument line="1951">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1956" package="Default">
        <name>deblacklist_func</name>
        <full_name>deblacklist_func</full_name>
        <argument line="1956">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1961" package="Default">
        <name>whitelist_var</name>
        <full_name>whitelist_var</full_name>
        <argument line="1961">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1965" package="Default">
        <name>blacklist_var</name>
        <full_name>blacklist_var</full_name>
        <argument line="1965">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1969" package="Default">
        <name>dewhitelist_var</name>
        <full_name>dewhitelist_var</full_name>
        <argument line="1969">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1973" package="Default">
        <name>deblacklist_var</name>
        <full_name>deblacklist_var</full_name>
        <argument line="1973">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1977" package="Default">
        <name>whitelist_global</name>
        <full_name>whitelist_global</full_name>
        <argument line="1977">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1981" package="Default">
        <name>blacklist_global</name>
        <full_name>blacklist_global</full_name>
        <argument line="1981">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1985" package="Default">
        <name>dewhitelist_global</name>
        <full_name>dewhitelist_global</full_name>
        <argument line="1985">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1989" package="Default">
        <name>deblacklist_global</name>
        <full_name>deblacklist_global</full_name>
        <argument line="1989">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="1993" package="Default">
        <name>whitelist_superglobal</name>
        <full_name>whitelist_superglobal</full_name>
        <argument line="1993">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="1993">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2028" package="Default">
        <name>blacklist_superglobal</name>
        <full_name>blacklist_superglobal</full_name>
        <argument line="2028">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2028">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2063" package="Default">
        <name>dewhitelist_superglobal</name>
        <full_name>dewhitelist_superglobal</full_name>
        <argument line="2063">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2063">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2093" package="Default">
        <name>deblacklist_superglobal</name>
        <full_name>deblacklist_superglobal</full_name>
        <argument line="2093">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2093">
          <name>$key</name>
          <default>null</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2123" package="Default">
        <name>whitelist_const</name>
        <full_name>whitelist_const</full_name>
        <argument line="2123">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2127" package="Default">
        <name>blacklist_const</name>
        <full_name>blacklist_const</full_name>
        <argument line="2127">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2131" package="Default">
        <name>dewhitelist_const</name>
        <full_name>dewhitelist_const</full_name>
        <argument line="2131">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2135" package="Default">
        <name>deblacklist_const</name>
        <full_name>deblacklist_const</full_name>
        <argument line="2135">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2139" package="Default">
        <name>whitelist_magic_const</name>
        <full_name>whitelist_magic_const</full_name>
        <argument line="2139">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2144" package="Default">
        <name>blacklist_magic_const</name>
        <full_name>blacklist_magic_const</full_name>
        <argument line="2144">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2149" package="Default">
        <name>dewhitelist_magic_const</name>
        <full_name>dewhitelist_magic_const</full_name>
        <argument line="2149">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2154" package="Default">
        <name>deblacklist_magic_const</name>
        <full_name>deblacklist_magic_const</full_name>
        <argument line="2154">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2159" package="Default">
        <name>whitelist_namespace</name>
        <full_name>whitelist_namespace</full_name>
        <argument line="2159">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2164" package="Default">
        <name>blacklist_namespace</name>
        <full_name>blacklist_namespace</full_name>
        <argument line="2164">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2169" package="Default">
        <name>dewhitelist_namespace</name>
        <full_name>dewhitelist_namespace</full_name>
        <argument line="2169">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2174" package="Default">
        <name>deblacklist_namespace</name>
        <full_name>deblacklist_namespace</full_name>
        <argument line="2174">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2179" package="Default">
        <name>whitelist_alias</name>
        <full_name>whitelist_alias</full_name>
        <argument line="2179">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2184" package="Default">
        <name>blacklist_alias</name>
        <full_name>blacklist_alias</full_name>
        <argument line="2184">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2189" package="Default">
        <name>dewhitelist_alias</name>
        <full_name>dewhitelist_alias</full_name>
        <argument line="2189">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2194" package="Default">
        <name>deblacklist_alias</name>
        <full_name>deblacklist_alias</full_name>
        <argument line="2194">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2199" package="Default">
        <name>whitelist_use</name>
        <full_name>whitelist_use</full_name>
        <argument line="2199">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2203" package="Default">
        <name>blacklist_use</name>
        <full_name>blacklist_use</full_name>
        <argument line="2203">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2207" package="Default">
        <name>dewhitelist_use</name>
        <full_name>dewhitelist_use</full_name>
        <argument line="2207">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2211" package="Default">
        <name>deblacklist_use</name>
        <full_name>deblacklist_use</full_name>
        <argument line="2211">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2215" package="Default">
        <name>whitelist_class</name>
        <full_name>whitelist_class</full_name>
        <argument line="2215">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2220" package="Default">
        <name>blacklist_class</name>
        <full_name>blacklist_class</full_name>
        <argument line="2220">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2225" package="Default">
        <name>dewhitelist_class</name>
        <full_name>dewhitelist_class</full_name>
        <argument line="2225">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2230" package="Default">
        <name>deblacklist_class</name>
        <full_name>deblacklist_class</full_name>
        <argument line="2230">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2235" package="Default">
        <name>whitelist_interface</name>
        <full_name>whitelist_interface</full_name>
        <argument line="2235">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2240" package="Default">
        <name>blacklist_interface</name>
        <full_name>blacklist_interface</full_name>
        <argument line="2240">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2245" package="Default">
        <name>dewhitelist_interface</name>
        <full_name>dewhitelist_interface</full_name>
        <argument line="2245">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2250" package="Default">
        <name>deblacklist_interface</name>
        <full_name>deblacklist_interface</full_name>
        <argument line="2250">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2255" package="Default">
        <name>whitelist_trait</name>
        <full_name>whitelist_trait</full_name>
        <argument line="2255">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2260" package="Default">
        <name>blacklist_trait</name>
        <full_name>blacklist_trait</full_name>
        <argument line="2260">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2265" package="Default">
        <name>dewhitelist_trait</name>
        <full_name>dewhitelist_trait</full_name>
        <argument line="2265">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2270" package="Default">
        <name>deblacklist_trait</name>
        <full_name>deblacklist_trait</full_name>
        <argument line="2270">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2275" package="Default">
        <name>whitelist_keyword</name>
        <full_name>whitelist_keyword</full_name>
        <argument line="2275">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2280" package="Default">
        <name>blacklist_keyword</name>
        <full_name>blacklist_keyword</full_name>
        <argument line="2280">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2285" package="Default">
        <name>dewhitelist_keyword</name>
        <full_name>dewhitelist_keyword</full_name>
        <argument line="2285">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2290" package="Default">
        <name>deblacklist_keyword</name>
        <full_name>deblacklist_keyword</full_name>
        <argument line="2290">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2295" package="Default">
        <name>whitelist_operator</name>
        <full_name>whitelist_operator</full_name>
        <argument line="2295">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2299" package="Default">
        <name>blacklist_operator</name>
        <full_name>blacklist_operator</full_name>
        <argument line="2299">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2303" package="Default">
        <name>dewhitelist_operator</name>
        <full_name>dewhitelist_operator</full_name>
        <argument line="2303">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2307" package="Default">
        <name>deblacklist_operator</name>
        <full_name>deblacklist_operator</full_name>
        <argument line="2307">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2311" package="Default">
        <name>whitelist_primitive</name>
        <full_name>whitelist_primitive</full_name>
        <argument line="2311">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2316" package="Default">
        <name>blacklist_primitive</name>
        <full_name>blacklist_primitive</full_name>
        <argument line="2316">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2321" package="Default">
        <name>dewhitelist_primitive</name>
        <full_name>dewhitelist_primitive</full_name>
        <argument line="2321">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2326" package="Default">
        <name>deblacklist_primitive</name>
        <full_name>deblacklist_primitive</full_name>
        <argument line="2326">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2331" package="Default">
        <name>whitelist_type</name>
        <full_name>whitelist_type</full_name>
        <argument line="2331">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2336" package="Default">
        <name>blacklist_type</name>
        <full_name>blacklist_type</full_name>
        <argument line="2336">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2341" package="Default">
        <name>dewhitelist_type</name>
        <full_name>dewhitelist_type</full_name>
        <argument line="2341">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2346" package="Default">
        <name>deblacklist_type</name>
        <full_name>deblacklist_type</full_name>
        <argument line="2346">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2351" package="Default">
        <name>check_func</name>
        <full_name>check_func</full_name>
        <argument line="2351">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2372" package="Default">
        <name>check_var</name>
        <full_name>check_var</full_name>
        <argument line="2372">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2392" package="Default">
        <name>check_global</name>
        <full_name>check_global</full_name>
        <argument line="2392">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2412" package="Default">
        <name>check_superglobal</name>
        <full_name>check_superglobal</full_name>
        <argument line="2412">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2433" package="Default">
        <name>check_const</name>
        <full_name>check_const</full_name>
        <argument line="2433">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2457" package="Default">
        <name>check_magic_const</name>
        <full_name>check_magic_const</full_name>
        <argument line="2457">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2478" package="Default">
        <name>check_namespace</name>
        <full_name>check_namespace</full_name>
        <argument line="2478">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2497" package="Default">
        <name>check_alias</name>
        <full_name>check_alias</full_name>
        <argument line="2497">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2516" package="Default">
        <name>check_use</name>
        <full_name>check_use</full_name>
        <argument line="2516">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2520" package="Default">
        <name>check_class</name>
        <full_name>check_class</full_name>
        <argument line="2520">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2539" package="Default">
        <name>check_interface</name>
        <full_name>check_interface</full_name>
        <argument line="2539">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2558" package="Default">
        <name>check_trait</name>
        <full_name>check_trait</full_name>
        <argument line="2558">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2577" package="Default">
        <name>check_keyword</name>
        <full_name>check_keyword</full_name>
        <argument line="2577">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2594" package="Default">
        <name>check_operator</name>
        <full_name>check_operator</full_name>
        <argument line="2594">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2610" package="Default">
        <name>check_primitive</name>
        <full_name>check_primitive</full_name>
        <argument line="2610">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2627" package="Default">
        <name>check_type</name>
        <full_name>check_type</full_name>
        <argument line="2627">
          <name>$name</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2646" package="Default">
        <name>prepare_vars</name>
        <full_name>prepare_vars</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2668" package="Default">
        <name>prepare_consts</name>
        <full_name>prepare_consts</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2690" package="Default">
        <name>prepare_namespaces</name>
        <full_name>prepare_namespaces</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2702" package="Default">
        <name>prepare_aliases</name>
        <full_name>prepare_aliases</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2714" package="Default">
        <name>prepare_uses</name>
        <full_name>prepare_uses</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2718" package="Default">
        <name>disassemble</name>
        <full_name>disassemble</full_name>
        <argument line="2718">
          <name>$closure</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2735" package="Default">
        <name>auto_whitelist</name>
        <full_name>auto_whitelist</full_name>
        <argument line="2735">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
        <argument line="2735">
          <name>$appended</name>
          <default>false</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="2751" package="Default">
        <name>auto_define</name>
        <full_name>auto_define</full_name>
        <docblock line="2748">
          <description></description>
          <long-description></long-description>
          <tag line="2748" name="param" description="" type="\FunctionParser\FunctionParser" variable="$disassembled_closure">
            <type by_reference="false">\FunctionParser\FunctionParser</type>
          </tag>
        </docblock>
        <argument line="2751">
          <name>$disassembled_closure</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2761" package="Default">
        <name>prepend</name>
        <full_name>prepend</full_name>
        <argument line="2761">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2773" package="Default">
        <name>append</name>
        <full_name>append</full_name>
        <argument line="2773">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2785" package="Default">
        <name>clear</name>
        <full_name>clear</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2790" package="Default">
        <name>clear_prepend</name>
        <full_name>clear_prepend</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2794" package="Default">
        <name>clear_append</name>
        <full_name>clear_append</full_name>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2798" package="Default">
        <name>prepare</name>
        <full_name>prepare</full_name>
        <argument line="2798">
          <name>$code</name>
          <default></default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="2847" package="Default">
        <name>execute</name>
        <full_name>execute</full_name>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file PHPSandbox.php</error>
      <error line="63" code="50018">No DocBlock was found for property $definitions</error>
      <error line="74" code="50018">No DocBlock was found for property $whitelist</error>
      <error line="92" code="50018">No DocBlock was found for property $blacklist</error>
      <error line="1198" code="50010">No DocBlock was found for method define_global()</error>
      <error line="1209" code="50010">No DocBlock was found for method define_globals()</error>
      <error line="1216" code="50010">No DocBlock was found for method has_defined_globals()</error>
      <error line="1220" code="50010">No DocBlock was found for method is_defined_global()</error>
      <error line="1224" code="50010">No DocBlock was found for method undefine_global()</error>
      <error line="1231" code="50010">No DocBlock was found for method undefine_globals()</error>
      <error line="1236" code="50010">No DocBlock was found for method define_superglobal()</error>
      <error line="1254" code="50010">No DocBlock was found for method define_superglobals()</error>
      <error line="1261" code="50010">No DocBlock was found for method has_defined_superglobals()</error>
      <error line="1266" code="50010">No DocBlock was found for method is_defined_superglobal()</error>
      <error line="1271" code="50010">No DocBlock was found for method undefine_superglobal()</error>
      <error line="1283" code="50010">No DocBlock was found for method undefine_superglobals()</error>
      <error line="1293" code="50010">No DocBlock was found for method define_const()</error>
      <error line="1304" code="50010">No DocBlock was found for method define_consts()</error>
      <error line="1311" code="50010">No DocBlock was found for method has_defined_consts()</error>
      <error line="1315" code="50010">No DocBlock was found for method is_defined_const()</error>
      <error line="1319" code="50010">No DocBlock was found for method undefine_const()</error>
      <error line="1326" code="50010">No DocBlock was found for method undefine_consts()</error>
      <error line="1331" code="50010">No DocBlock was found for method define_magic_const()</error>
      <error line="1343" code="50010">No DocBlock was found for method define_magic_consts()</error>
      <error line="1350" code="50010">No DocBlock was found for method has_defined_magic_consts()</error>
      <error line="1354" code="50010">No DocBlock was found for method is_defined_magic_const()</error>
      <error line="1359" code="50010">No DocBlock was found for method undefine_magic_const()</error>
      <error line="1367" code="50010">No DocBlock was found for method undefine_magic_consts()</error>
      <error line="1372" code="50010">No DocBlock was found for method define_namespace()</error>
      <error line="1383" code="50010">No DocBlock was found for method define_namespaces()</error>
      <error line="1390" code="50010">No DocBlock was found for method has_defined_namespaces()</error>
      <error line="1394" code="50010">No DocBlock was found for method is_defined_namespace()</error>
      <error line="1398" code="50010">No DocBlock was found for method undefine_namespace()</error>
      <error line="1405" code="50010">No DocBlock was found for method undefine_namespaces()</error>
      <error line="1410" code="50010">No DocBlock was found for method define_alias()</error>
      <error line="1421" code="50010">No DocBlock was found for method define_aliases()</error>
      <error line="1428" code="50010">No DocBlock was found for method has_defined_aliases()</error>
      <error line="1432" code="50010">No DocBlock was found for method is_defined_alias()</error>
      <error line="1436" code="50010">No DocBlock was found for method undefine_alias()</error>
      <error line="1443" code="50010">No DocBlock was found for method undefine_aliases()</error>
      <error line="1448" code="50010">No DocBlock was found for method define_use()</error>
      <error line="1452" code="50010">No DocBlock was found for method define_uses()</error>
      <error line="1456" code="50010">No DocBlock was found for method has_defined_uses()</error>
      <error line="1460" code="50010">No DocBlock was found for method is_defined_use()</error>
      <error line="1464" code="50010">No DocBlock was found for method undefine_use()</error>
      <error line="1468" code="50010">No DocBlock was found for method undefine_uses()</error>
      <error line="1472" code="50010">No DocBlock was found for method normalize_func()</error>
      <error line="1476" code="50010">No DocBlock was found for method normalize_superglobal()</error>
      <error line="1480" code="50010">No DocBlock was found for method normalize_magic_const()</error>
      <error line="1484" code="50010">No DocBlock was found for method normalize_namespace()</error>
      <error line="1488" code="50010">No DocBlock was found for method normalize_alias()</error>
      <error line="1492" code="50010">No DocBlock was found for method normalize_use()</error>
      <error line="1496" code="50010">No DocBlock was found for method normalize_class()</error>
      <error line="1500" code="50010">No DocBlock was found for method normalize_interface()</error>
      <error line="1504" code="50010">No DocBlock was found for method normalize_trait()</error>
      <error line="1508" code="50010">No DocBlock was found for method normalize_keyword()</error>
      <error line="1539" code="50010">No DocBlock was found for method normalize_primitive()</error>
      <error line="1553" code="50010">No DocBlock was found for method normalize_type()</error>
      <error line="1557" code="50010">No DocBlock was found for method whitelist()</error>
      <error line="1582" code="50010">No DocBlock was found for method blacklist()</error>
      <error line="1607" code="50010">No DocBlock was found for method dewhitelist()</error>
      <error line="1626" code="50010">No DocBlock was found for method deblacklist()</error>
      <error line="1645" code="50010">No DocBlock was found for method has_whitelist()</error>
      <error line="1649" code="50010">No DocBlock was found for method has_blacklist()</error>
      <error line="1653" code="50010">No DocBlock was found for method is_whitelisted()</error>
      <error line="1657" code="50010">No DocBlock was found for method is_blacklisted()</error>
      <error line="1661" code="50010">No DocBlock was found for method has_whitelist_funcs()</error>
      <error line="1665" code="50010">No DocBlock was found for method has_blacklist_funcs()</error>
      <error line="1669" code="50010">No DocBlock was found for method is_whitelisted_func()</error>
      <error line="1674" code="50010">No DocBlock was found for method is_blacklisted_func()</error>
      <error line="1679" code="50010">No DocBlock was found for method has_whitelist_vars()</error>
      <error line="1683" code="50010">No DocBlock was found for method has_blacklist_vars()</error>
      <error line="1687" code="50010">No DocBlock was found for method is_whitelisted_var()</error>
      <error line="1691" code="50010">No DocBlock was found for method is_blacklisted_var()</error>
      <error line="1695" code="50010">No DocBlock was found for method has_whitelist_globals()</error>
      <error line="1699" code="50010">No DocBlock was found for method has_blacklist_globals()</error>
      <error line="1703" code="50010">No DocBlock was found for method is_whitelisted_global()</error>
      <error line="1707" code="50010">No DocBlock was found for method is_blacklisted_global()</error>
      <error line="1711" code="50010">No DocBlock was found for method has_whitelist_superglobals()</error>
      <error line="1716" code="50010">No DocBlock was found for method has_blacklist_superglobals()</error>
      <error line="1721" code="50010">No DocBlock was found for method is_whitelisted_superglobal()</error>
      <error line="1726" code="50010">No DocBlock was found for method is_blacklisted_superglobal()</error>
      <error line="1731" code="50010">No DocBlock was found for method has_whitelist_consts()</error>
      <error line="1735" code="50010">No DocBlock was found for method has_blacklist_consts()</error>
      <error line="1739" code="50010">No DocBlock was found for method is_whitelisted_const()</error>
      <error line="1743" code="50010">No DocBlock was found for method is_blacklisted_const()</error>
      <error line="1747" code="50010">No DocBlock was found for method has_whitelist_magic_consts()</error>
      <error line="1751" code="50010">No DocBlock was found for method has_blacklist_magic_consts()</error>
      <error line="1755" code="50010">No DocBlock was found for method is_whitelisted_magic_const()</error>
      <error line="1760" code="50010">No DocBlock was found for method is_blacklisted_magic_const()</error>
      <error line="1765" code="50010">No DocBlock was found for method has_whitelist_namespaces()</error>
      <error line="1769" code="50010">No DocBlock was found for method has_blacklist_namespaces()</error>
      <error line="1773" code="50010">No DocBlock was found for method is_whitelisted_namespace()</error>
      <error line="1778" code="50010">No DocBlock was found for method is_blacklisted_namespace()</error>
      <error line="1783" code="50010">No DocBlock was found for method has_whitelist_aliases()</error>
      <error line="1787" code="50010">No DocBlock was found for method has_blacklist_aliases()</error>
      <error line="1791" code="50010">No DocBlock was found for method is_whitelisted_alias()</error>
      <error line="1796" code="50010">No DocBlock was found for method is_blacklisted_alias()</error>
      <error line="1801" code="50010">No DocBlock was found for method has_whitelist_uses()</error>
      <error line="1805" code="50010">No DocBlock was found for method has_blacklist_uses()</error>
      <error line="1809" code="50010">No DocBlock was found for method is_whitelisted_use()</error>
      <error line="1813" code="50010">No DocBlock was found for method is_blacklisted_use()</error>
      <error line="1817" code="50010">No DocBlock was found for method has_whitelist_classes()</error>
      <error line="1821" code="50010">No DocBlock was found for method has_blacklist_classes()</error>
      <error line="1825" code="50010">No DocBlock was found for method is_whitelisted_class()</error>
      <error line="1830" code="50010">No DocBlock was found for method is_blacklisted_class()</error>
      <error line="1835" code="50010">No DocBlock was found for method has_whitelist_interfaces()</error>
      <error line="1839" code="50010">No DocBlock was found for method has_blacklist_interfaces()</error>
      <error line="1843" code="50010">No DocBlock was found for method is_whitelisted_interface()</error>
      <error line="1848" code="50010">No DocBlock was found for method is_blacklisted_interface()</error>
      <error line="1853" code="50010">No DocBlock was found for method has_whitelist_traits()</error>
      <error line="1857" code="50010">No DocBlock was found for method has_blacklist_traits()</error>
      <error line="1861" code="50010">No DocBlock was found for method is_whitelisted_trait()</error>
      <error line="1866" code="50010">No DocBlock was found for method is_blacklisted_trait()</error>
      <error line="1871" code="50010">No DocBlock was found for method has_whitelist_keywords()</error>
      <error line="1875" code="50010">No DocBlock was found for method has_blacklist_keywords()</error>
      <error line="1879" code="50010">No DocBlock was found for method is_whitelisted_keyword()</error>
      <error line="1884" code="50010">No DocBlock was found for method is_blacklisted_keyword()</error>
      <error line="1889" code="50010">No DocBlock was found for method has_whitelist_operators()</error>
      <error line="1893" code="50010">No DocBlock was found for method has_blacklist_operators()</error>
      <error line="1897" code="50010">No DocBlock was found for method is_whitelisted_operator()</error>
      <error line="1901" code="50010">No DocBlock was found for method is_blacklisted_operator()</error>
      <error line="1905" code="50010">No DocBlock was found for method has_whitelist_primitives()</error>
      <error line="1909" code="50010">No DocBlock was found for method has_blacklist_primitives()</error>
      <error line="1913" code="50010">No DocBlock was found for method is_whitelisted_primitive()</error>
      <error line="1918" code="50010">No DocBlock was found for method is_blacklisted_primitive()</error>
      <error line="1923" code="50010">No DocBlock was found for method has_whitelist_types()</error>
      <error line="1927" code="50010">No DocBlock was found for method has_blacklist_types()</error>
      <error line="1931" code="50010">No DocBlock was found for method is_whitelisted_type()</error>
      <error line="1936" code="50010">No DocBlock was found for method is_blacklisted_type()</error>
      <error line="1941" code="50010">No DocBlock was found for method whitelist_func()</error>
      <error line="1946" code="50010">No DocBlock was found for method blacklist_func()</error>
      <error line="1951" code="50010">No DocBlock was found for method dewhitelist_func()</error>
      <error line="1956" code="50010">No DocBlock was found for method deblacklist_func()</error>
      <error line="1961" code="50010">No DocBlock was found for method whitelist_var()</error>
      <error line="1965" code="50010">No DocBlock was found for method blacklist_var()</error>
      <error line="1969" code="50010">No DocBlock was found for method dewhitelist_var()</error>
      <error line="1973" code="50010">No DocBlock was found for method deblacklist_var()</error>
      <error line="1977" code="50010">No DocBlock was found for method whitelist_global()</error>
      <error line="1981" code="50010">No DocBlock was found for method blacklist_global()</error>
      <error line="1985" code="50010">No DocBlock was found for method dewhitelist_global()</error>
      <error line="1989" code="50010">No DocBlock was found for method deblacklist_global()</error>
      <error line="1993" code="50010">No DocBlock was found for method whitelist_superglobal()</error>
      <error line="2028" code="50010">No DocBlock was found for method blacklist_superglobal()</error>
      <error line="2063" code="50010">No DocBlock was found for method dewhitelist_superglobal()</error>
      <error line="2093" code="50010">No DocBlock was found for method deblacklist_superglobal()</error>
      <error line="2123" code="50010">No DocBlock was found for method whitelist_const()</error>
      <error line="2127" code="50010">No DocBlock was found for method blacklist_const()</error>
      <error line="2131" code="50010">No DocBlock was found for method dewhitelist_const()</error>
      <error line="2135" code="50010">No DocBlock was found for method deblacklist_const()</error>
      <error line="2139" code="50010">No DocBlock was found for method whitelist_magic_const()</error>
      <error line="2144" code="50010">No DocBlock was found for method blacklist_magic_const()</error>
      <error line="2149" code="50010">No DocBlock was found for method dewhitelist_magic_const()</error>
      <error line="2154" code="50010">No DocBlock was found for method deblacklist_magic_const()</error>
      <error line="2159" code="50010">No DocBlock was found for method whitelist_namespace()</error>
      <error line="2164" code="50010">No DocBlock was found for method blacklist_namespace()</error>
      <error line="2169" code="50010">No DocBlock was found for method dewhitelist_namespace()</error>
      <error line="2174" code="50010">No DocBlock was found for method deblacklist_namespace()</error>
      <error line="2179" code="50010">No DocBlock was found for method whitelist_alias()</error>
      <error line="2184" code="50010">No DocBlock was found for method blacklist_alias()</error>
      <error line="2189" code="50010">No DocBlock was found for method dewhitelist_alias()</error>
      <error line="2194" code="50010">No DocBlock was found for method deblacklist_alias()</error>
      <error line="2199" code="50010">No DocBlock was found for method whitelist_use()</error>
      <error line="2203" code="50010">No DocBlock was found for method blacklist_use()</error>
      <error line="2207" code="50010">No DocBlock was found for method dewhitelist_use()</error>
      <error line="2211" code="50010">No DocBlock was found for method deblacklist_use()</error>
      <error line="2215" code="50010">No DocBlock was found for method whitelist_class()</error>
      <error line="2220" code="50010">No DocBlock was found for method blacklist_class()</error>
      <error line="2225" code="50010">No DocBlock was found for method dewhitelist_class()</error>
      <error line="2230" code="50010">No DocBlock was found for method deblacklist_class()</error>
      <error line="2235" code="50010">No DocBlock was found for method whitelist_interface()</error>
      <error line="2240" code="50010">No DocBlock was found for method blacklist_interface()</error>
      <error line="2245" code="50010">No DocBlock was found for method dewhitelist_interface()</error>
      <error line="2250" code="50010">No DocBlock was found for method deblacklist_interface()</error>
      <error line="2255" code="50010">No DocBlock was found for method whitelist_trait()</error>
      <error line="2260" code="50010">No DocBlock was found for method blacklist_trait()</error>
      <error line="2265" code="50010">No DocBlock was found for method dewhitelist_trait()</error>
      <error line="2270" code="50010">No DocBlock was found for method deblacklist_trait()</error>
      <error line="2275" code="50010">No DocBlock was found for method whitelist_keyword()</error>
      <error line="2280" code="50010">No DocBlock was found for method blacklist_keyword()</error>
      <error line="2285" code="50010">No DocBlock was found for method dewhitelist_keyword()</error>
      <error line="2290" code="50010">No DocBlock was found for method deblacklist_keyword()</error>
      <error line="2295" code="50010">No DocBlock was found for method whitelist_operator()</error>
      <error line="2299" code="50010">No DocBlock was found for method blacklist_operator()</error>
      <error line="2303" code="50010">No DocBlock was found for method dewhitelist_operator()</error>
      <error line="2307" code="50010">No DocBlock was found for method deblacklist_operator()</error>
      <error line="2311" code="50010">No DocBlock was found for method whitelist_primitive()</error>
      <error line="2316" code="50010">No DocBlock was found for method blacklist_primitive()</error>
      <error line="2321" code="50010">No DocBlock was found for method dewhitelist_primitive()</error>
      <error line="2326" code="50010">No DocBlock was found for method deblacklist_primitive()</error>
      <error line="2331" code="50010">No DocBlock was found for method whitelist_type()</error>
      <error line="2336" code="50010">No DocBlock was found for method blacklist_type()</error>
      <error line="2341" code="50010">No DocBlock was found for method dewhitelist_type()</error>
      <error line="2346" code="50010">No DocBlock was found for method deblacklist_type()</error>
      <error line="2351" code="50010">No DocBlock was found for method check_func()</error>
      <error line="2372" code="50010">No DocBlock was found for method check_var()</error>
      <error line="2392" code="50010">No DocBlock was found for method check_global()</error>
      <error line="2412" code="50010">No DocBlock was found for method check_superglobal()</error>
      <error line="2433" code="50010">No DocBlock was found for method check_const()</error>
      <error line="2457" code="50010">No DocBlock was found for method check_magic_const()</error>
      <error line="2478" code="50010">No DocBlock was found for method check_namespace()</error>
      <error line="2497" code="50010">No DocBlock was found for method check_alias()</error>
      <error line="2516" code="50010">No DocBlock was found for method check_use()</error>
      <error line="2520" code="50010">No DocBlock was found for method check_class()</error>
      <error line="2539" code="50010">No DocBlock was found for method check_interface()</error>
      <error line="2558" code="50010">No DocBlock was found for method check_trait()</error>
      <error line="2577" code="50010">No DocBlock was found for method check_keyword()</error>
      <error line="2594" code="50010">No DocBlock was found for method check_operator()</error>
      <error line="2610" code="50010">No DocBlock was found for method check_primitive()</error>
      <error line="2627" code="50010">No DocBlock was found for method check_type()</error>
      <error line="2646" code="50010">No DocBlock was found for method prepare_vars()</error>
      <error line="2668" code="50010">No DocBlock was found for method prepare_consts()</error>
      <error line="2690" code="50010">No DocBlock was found for method prepare_namespaces()</error>
      <error line="2702" code="50010">No DocBlock was found for method prepare_aliases()</error>
      <error line="2714" code="50010">No DocBlock was found for method prepare_uses()</error>
      <error line="2718" code="50010">No DocBlock was found for method disassemble()</error>
      <error line="2735" code="50010">No DocBlock was found for method auto_whitelist()</error>
      <error line="2748" code="50012">No short description for method auto_define()</error>
      <error line="2761" code="50010">No DocBlock was found for method prepend()</error>
      <error line="2773" code="50010">No DocBlock was found for method append()</error>
      <error line="2785" code="50010">No DocBlock was found for method clear()</error>
      <error line="2790" code="50010">No DocBlock was found for method clear_prepend()</error>
      <error line="2794" code="50010">No DocBlock was found for method clear_append()</error>
      <error line="2798" code="50010">No DocBlock was found for method prepare()</error>
      <error line="2847" code="50010">No DocBlock was found for method execute()</error>
    </parse_markers>
  </file>
  <file path="SandboxWhitelistVisitor.php" hash="9b4e5043cd911febf4c4163b43895c90" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="4" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>SandboxWhitelistVisitor</name>
      <full_name>\PHPSandbox\SandboxWhitelistVisitor</full_name>
      <property final="false" static="false" visibility="protected" line="8" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default/>
        <docblock line="5">
          <description/>
          <long-description/>
          <tag line="5" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="10" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="10">
          <name>$sandbox</name>
          <default/>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="14" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <argument line="14">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file SandboxWhitelistVisitor.php</error>
      <error line="4" code="50000">No DocBlock was found for \PHPSandbox\SandboxWhitelistVisitor</error>
      <critical line="5" code="50019">No short description for property $sandbox</critical>
      <error line="10" code="50010">No DocBlock was found for method __construct()</error>
      <error line="14" code="50010">No DocBlock was found for method leaveNode()</error>
    </parse_markers>
  </file>
  <file path="ValidatorVisitor.php" hash="680ee842258eebc38173483e6db4be17" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="4" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>ValidatorVisitor</name>
      <full_name>\PHPSandbox\ValidatorVisitor</full_name>
      <property final="false" static="false" visibility="protected" line="8" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default/>
        <docblock line="5">
          <description/>
          <long-description/>
          <tag line="5" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="10" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="10">
          <name>$sandbox</name>
          <default/>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="14" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <argument line="14">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="220" package="Default">
        <name>is_magic_const</name>
        <full_name>is_magic_const</full_name>
        <argument line="220">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="242" package="Default">
        <name>is_keyword</name>
        <full_name>is_keyword</full_name>
        <argument line="242">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="302" package="Default">
        <name>is_operator</name>
        <full_name>is_operator</full_name>
        <argument line="302">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" namespace="PHPSandbox" line="400" package="Default">
        <name>is_primitive</name>
        <full_name>is_primitive</full_name>
        <argument line="400">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file ValidatorVisitor.php</error>
      <error line="4" code="50000">No DocBlock was found for \PHPSandbox\ValidatorVisitor</error>
      <critical line="5" code="50019">No short description for property $sandbox</critical>
      <error line="10" code="50010">No DocBlock was found for method __construct()</error>
      <error line="14" code="50010">No DocBlock was found for method leaveNode()</error>
      <error line="220" code="50010">No DocBlock was found for method is_magic_const()</error>
      <error line="242" code="50010">No DocBlock was found for method is_keyword()</error>
      <error line="302" code="50010">No DocBlock was found for method is_operator()</error>
      <error line="400" code="50010">No DocBlock was found for method is_primitive()</error>
    </parse_markers>
  </file>
  <file path="WhitelistVisitor.php" hash="55a73410a5264be921e392b30b7d5428" package="Default">
    <class final="false" abstract="false" namespace="PHPSandbox" line="4" package="Default">
      <extends>\PHPParser_NodeVisitorAbstract</extends>
      <name>WhitelistVisitor</name>
      <full_name>\PHPSandbox\WhitelistVisitor</full_name>
      <property final="false" static="false" visibility="protected" line="8" namespace="PHPSandbox" package="Default">
        <name>$sandbox</name>
        <default/>
        <docblock line="5">
          <description/>
          <long-description/>
          <tag line="5" name="var" description="" type="\PHPSandbox\PHPSandbox">
            <type by_reference="false">\PHPSandbox\PHPSandbox</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="10" package="Default">
        <name>__construct</name>
        <full_name>__construct</full_name>
        <argument line="10">
          <name>$sandbox</name>
          <default/>
          <type>\PHPSandbox\PHPSandbox</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" namespace="PHPSandbox" line="14" package="Default">
        <name>leaveNode</name>
        <full_name>leaveNode</full_name>
        <argument line="14">
          <name>$node</name>
          <default/>
          <type>\PHPParser_Node</type>
        </argument>
      </method>
    </class>
    <parse_markers>
      <error line="0" code="50007">No page-level DocBlock was found in file WhitelistVisitor.php</error>
      <error line="4" code="50000">No DocBlock was found for \PHPSandbox\WhitelistVisitor</error>
      <critical line="5" code="50019">No short description for property $sandbox</critical>
      <error line="10" code="50010">No DocBlock was found for method __construct()</error>
      <error line="14" code="50010">No DocBlock was found for method leaveNode()</error>
    </parse_markers>
  </file>
  <package name="Default" full_name="Default"/>
  <namespace name="PHPSandbox" full_name="PHPSandbox"/>
  <marker count="0">todo</marker>
  <marker count="0">fixme</marker>
  <deprecated count="0"/>
</project>
